[
  {
    "objectID": "psets/pset-01.html",
    "href": "psets/pset-01.html",
    "title": "Problem set 1",
    "section": "",
    "text": "Problem set 1"
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "Archive\nCourse materials for past semesters can be found below:\n\nFall 2023\nSpring 2023"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for studying language and the mind",
    "section": "",
    "text": "Welcome to Data Science for Studying Language & the Mind! The Fall 2024 course information and materials are below. Course materials from previous semesters are archived here."
  },
  {
    "objectID": "index.html#syllabus",
    "href": "index.html#syllabus",
    "title": "Data Science for studying language and the mind",
    "section": "Syllabus",
    "text": "Syllabus\nCourse description: Data Sci for Lang & Mind is an entry-level course designed to teach basic principles of statistics and data science to students with little or no background in statistics or computer science. Students will learn to identify patterns in data using visualizations and descriptive statistics; make predictions from data using machine learning and optimization; and quantify the certainty of their predictions using statistical models. This course aims to help students build a foundation of critical thinking and computational skills that will allow them to work with data in all fields related to the study of the mind (e.g. linguistics, psychology, philosophy, cognitive science, neuroscience).\nPrerequisites: There are no prerequisites beyond high school algebra. No prior programming or statistics experience is necessary, though you will still enjoy this course if you already have a little. Students who have taken several computer science or statistics classes should look for a more advanced course.\nInstructor: Dr. Katie Schuler (she/her)\nTAs: Brittany Zykoski and Wesley Lincoln\nLectures: Tuesdays and Thursdays from 12 - 1:29pm in COHN 402.\nLabs: Hands-on practice and exam prep guided by TAs.\n\n402: Fri at 3:30p in WILL 201 with Brittany\n403: Thu at 1:45p in WILL 321 with Wesley\n404: Thu at 5:15p in TBD with Brittany\n405: Fri at 12:00p in WILL 316 with Wesley\n\nOffice Hours: You are welcome to attend any office hours that fit your schedule. The linguistics department is located on the 3rd floor of 3401-C Walnut street, between Franklin’s Table and Modern Eye.\n\nKatie Schuler: TBD in 314C\nBrittany Zykoski: TBD in TBD\nWesley Lincoln: TBD in TBD\n\nGrading:\n\n40% Homework (equally weighted, lowest dropped)\n60% exams (equally weighted, final is optional to replace lowest exam)\n\nCollaboration: Collaboration on problem sets is highly encouraged! If you collaborate, you need to write your own code/solutions, name your collaborators, and cite any outside sources you consulted (you don’t need to cite the course material).\nAccomodations: We will support any accommodations arranged through Disability Services via the Weingarten Center. Please make arrangements as soon as possible (1-2 weeks in advance).\nExtra credit: There is no extra credit in the course. However, students can submit any missed problem set or exam by the end of the semester for half credit (50%). To ensure fair treatment, all students will receive a 1% “bonus” to their final course grade: 92.54% will become 93.54%.\nRegrade requests Regrade requests should be submitted through Gradescope within one week of receiving your graded assignment. Please explain why you believe there was a grading mistake, given the posted solutions and rubric"
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Data Science for studying language and the mind",
    "section": "Resources",
    "text": "Resources\nIn addition to our course website, we will use the following:\n\ngoogle colab (r kernel) - for computing\ncanvas- for posting grades\ngradescope - for submitting problem sets\ned discussion - for announcements and questions\n\nOther helpful materials and resources:\n\nmarkdown tutorial\ntidyverse cheatsheets\n\nPlease consider using these Penn resources this semester:\n\nWeingarten Center for academic support and tutoring.\nWellness at Penn for health and wellbeing."
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "Data Science for studying language and the mind",
    "section": "Materials",
    "text": "Materials\n\nStudy guides\nStudy guides include weekly study guides and additional resources from each week, including slides, demos, and further reading.\n\nWeek 1: R Basics\nWeek 2: Data visualization\nWeek 3: Data wrangling\nWeek 4: Sampling distribution\nWeek 5: Hypothesis testing\nWeek 6: Exam 1 review\nWeek 7: Model specification\nWeek 8: Model fitting\nWeek 9: Model accuracy\nWeek 10: Model reliability\nWeek 11: Classification\nWeek 12: Inference\nWeek 13: Exam 2 review\nWeeK 15: Multilevel Models\n\n\n\nProblem sets\nThere are 6 problem sets, due to Gradescope by noon on the following Mondays. You may request an extension of up to 3 days for any reason. After solutions are posted, late problem sets can still be submitted for half credit (50%). If you submit all 6 problem sets, we will drop your lowest.\n\nProblem set 1 due Sep 9\nProblem set 2 due Sep 23\nProblem set 3 due Oct 14\nProblem set 4 due Oct 28\nProblem set 5 due Nov 11\nProblem set 6 due Dec 9\n\n\n\n\nExams\nThere are 2 midterm exams, taken in class on the following dates. Exams cannot be rescheduled, except in cases of genuine conflict or emergency (documentation and a Course Action Notice are required). However, you can submit any missed exam by the end of the semester for half credit (50%). You may also replace your lowest midterm exam score with the optional final exam.\n\nExam 1 in class Tuesday Oct 1\nExam 2 in class Thursday Nov 21\nFinal exam (optional) TBD\n\n\n\nLab exercises\nLab exercises are intended for practice and are not graded.\n\nLab 1 on Aug 29 or 30\nLab 2 on Sep 5 or 6\nLab 3 on Sep 12 or 13\nLab 4 on Sep 19 or 20\nLab 5 on Oct 10 or 11\nLab 6 on Oct 17 or 18\nLab 7 on Oct 24 or 25\nLab 8 on Nov 1 or 2\nLab 9 on Nov 8 or 9\nLab 10 on Dec 5 or 6"
  },
  {
    "objectID": "slides/week-01-r-basics.html#paperwork",
    "href": "slides/week-01-r-basics.html#paperwork",
    "title": "Week 1: R Basics",
    "section": "Paperwork",
    "text": "Paperwork\n\nWhen you arrive, complete this anonymous form: Who’s in class\nYou can also join the waitlist if you are not enrolled"
  },
  {
    "objectID": "slides/week-01-r-basics.html#announcements",
    "href": "slides/week-01-r-basics.html#announcements",
    "title": "Week 1: R Basics",
    "section": "Announcements",
    "text": "Announcements\n\nThe course is full and the room is full\nWays to join:\n\nWatch for an opening (highest odds of getting in)\nAdd your name to our waitlist"
  },
  {
    "objectID": "slides/week-01-r-basics.html#course-description",
    "href": "slides/week-01-r-basics.html#course-description",
    "title": "Week 1: R Basics",
    "section": "Course description",
    "text": "Course description\nData Sci for Lang & Mind is an entry-level course designed to teach basic principles of statistics and data science to students with little or no background in statistics or computer science. Students will learn to identify patterns in data using visualizations and descriptive statistics; make predictions from data using machine learning and optimization; and quantify the certainty of their predictions using statistical models. This course aims to help students build a foundation of critical thinking and computational skills that will allow them to work with data in all fields related to the study of the mind (e.g. linguistics, psychology, philosophy, cognitive science, neuroscience)."
  },
  {
    "objectID": "slides/week-01-r-basics.html#prerequisites",
    "href": "slides/week-01-r-basics.html#prerequisites",
    "title": "Week 1: R Basics",
    "section": "Prerequisites",
    "text": "Prerequisites\nThere are no prerequisites beyond high school algebra. No prior programming or statistics experience is necessary, though you will still enjoy this course if you already have a little. Students who have taken several computer science or statistics classes should look for a more advanced course."
  },
  {
    "objectID": "slides/week-01-r-basics.html#teaching-team",
    "href": "slides/week-01-r-basics.html#teaching-team",
    "title": "Week 1: R Basics",
    "section": "Teaching team",
    "text": "Teaching team\nInstructor: Dr. Katie Schuler (she/her)\nTAs:\n\nBrittany Zykoski\nWesley Lincoln"
  },
  {
    "objectID": "slides/week-01-r-basics.html#about-me-your-instructor-katie",
    "href": "slides/week-01-r-basics.html#about-me-your-instructor-katie",
    "title": "Week 1: R Basics",
    "section": "About me, your instructor (Katie)",
    "text": "About me, your instructor (Katie)\n\nYou can call me Professor Schuler or Katie, whichever makes you more comfortable\nI live in Mt Airy with my husband and two kids (Dory, 2 and Joan, 6)\nAt Penn I also have a research lab, the Child Language Lab and am on the Natural Science and Math Panel (a group focused on improving inclusive teaching in STEM at Penn).\nI’m a first-generation college student from Western NY. I worked 40 hours a week to put myself through college; I am still paying off my student loans."
  },
  {
    "objectID": "slides/week-01-r-basics.html#my-assumptions-about-you",
    "href": "slides/week-01-r-basics.html#my-assumptions-about-you",
    "title": "Week 1: R Basics",
    "section": "My assumptions about you",
    "text": "My assumptions about you\nYou are an honest, kind, and hardworking student who wants to do well in and enjoy this class\n\nYou are very busy, and will sometimes have to prioritize other things above this class."
  },
  {
    "objectID": "slides/week-01-r-basics.html#data-science",
    "href": "slides/week-01-r-basics.html#data-science",
    "title": "Week 1: R Basics",
    "section": "Data science",
    "text": "Data science\nData science is about making decisions based on incomplete information.\n\n\n\n\nFigure 1: from Kok & de Lange (2014)\n\n\nThis concept is not new. Brains were built for doing this!"
  },
  {
    "objectID": "slides/week-01-r-basics.html#but-we-have-new-tools-and-lots-more-data",
    "href": "slides/week-01-r-basics.html#but-we-have-new-tools-and-lots-more-data",
    "title": "Week 1: R Basics",
    "section": "But we have new tools and lots more data!",
    "text": "But we have new tools and lots more data!\n\n\n\n\nFigure 2: from https://web-assets.domo.com/miyagi/images/product/product-feature-22-data-never-sleeps-10.png"
  },
  {
    "objectID": "slides/week-01-r-basics.html#data-science-workflow",
    "href": "slides/week-01-r-basics.html#data-science-workflow",
    "title": "Week 1: R Basics",
    "section": "Data science workflow",
    "text": "Data science workflow\nThe folks who wrote R for Data Science proposed the following data science workflow:\n\n\n\n\nFigure 3: from R for Data Science"
  },
  {
    "objectID": "slides/week-01-r-basics.html#overview-of-course",
    "href": "slides/week-01-r-basics.html#overview-of-course",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nWe will spend the first few weeks getting comfortable programming in R, including some useful skills for data science:\n\nR basics\nData visualization\nData wrangling (import, tidy, and transform)"
  },
  {
    "objectID": "slides/week-01-r-basics.html#overview-of-course-1",
    "href": "slides/week-01-r-basics.html#overview-of-course-1",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nThen, we will spend the next several weeks building a foundation in basic statistics and model building:\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability"
  },
  {
    "objectID": "slides/week-01-r-basics.html#overview-of-course-2",
    "href": "slides/week-01-r-basics.html#overview-of-course-2",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nFinally we will cover a selection of more advanced topics that are often applied in language and mind fields, with a focus on basic understanding:\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "slides/week-01-r-basics.html#syllabus-briefly",
    "href": "slides/week-01-r-basics.html#syllabus-briefly",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nEach week will include two lectures and a lab:\n\nLectures are on Tuesdays and Thursdays at 12pm and will be a mix of conceptual overviews and R tutorials. It is a good idea to bring your laptop so you can follow along and try stuff in R!\nLabs are on Thursday or Friday and will consist of (ungraded) practice problems and concept review with TAs. You may attend any lab section that works for your schedule."
  },
  {
    "objectID": "slides/week-01-r-basics.html#syllabus-briefly-1",
    "href": "slides/week-01-r-basics.html#syllabus-briefly-1",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nThere are 8 graded assessments:\n\n6 Problem sets (40%) in which you will be asked to apply your newly aquired R programming skills.\n2 Midterm exams (60%) in which you will be tested on your understanding of lecture concepts."
  },
  {
    "objectID": "slides/week-01-r-basics.html#syllabus-briefly-2",
    "href": "slides/week-01-r-basics.html#syllabus-briefly-2",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nThere are a few policies to take note of:\n\nMissed exams cannot be made up except in cases of genuine conflict or emergency (documentation and course action notice required). You may take the optional final exam to replace a missed or low scoring exam.\nYou may request an extension on any problem set of up to 3 days. But extensions beyond 3 days will not be granted (because delying solutions will negative impact other students).\nYou may submit any missed quiz or problem set by the end of the semester for half-credit (50%), even after solutions are posted.\nWe will drop your lowest pset grade, but you must turn in all 6 assignements to be eligible."
  },
  {
    "objectID": "slides/week-01-r-basics.html#resources",
    "href": "slides/week-01-r-basics.html#resources",
    "title": "Week 1: R Basics",
    "section": "Resources",
    "text": "Resources\nIn addition to our course website, we will use the following:\n\ngoogle colab (r kernel) - for computing\ncanvas- for posting grades\ngradescope - for submitting problem sets\ned discussion - for announcements and questions"
  },
  {
    "objectID": "slides/week-01-r-basics.html#wellness-resources",
    "href": "slides/week-01-r-basics.html#wellness-resources",
    "title": "Week 1: R Basics",
    "section": "Wellness resources",
    "text": "Wellness resources\nPlease consider using these Penn resources this semester:\n\nWeingarten Center for academic support and tutoring.\nWellness at Penn for health and wellbeing."
  },
  {
    "objectID": "slides/week-01-r-basics.html#why-r",
    "href": "slides/week-01-r-basics.html#why-r",
    "title": "Week 1: R Basics",
    "section": "Why R?",
    "text": "Why R?\nWith many programming languages available for data science (e.g. R, Python, Julia, MATLAB), why use R?\n\nBuilt for stats, specifically\nMakes nice visualizations\nLots of people are doing it, especially in academia\nEasier for beginners to understand\nFree and open source (though so are Python and Julia, MATLAB costs $)"
  },
  {
    "objectID": "slides/week-01-r-basics.html#many-ways-to-use-r",
    "href": "slides/week-01-r-basics.html#many-ways-to-use-r",
    "title": "Week 1: R Basics",
    "section": "Many ways to use R",
    "text": "Many ways to use R\n\nR Studio\nJupyter\nVS Code\nand even simply the command line/terminal"
  },
  {
    "objectID": "slides/week-01-r-basics.html#google-colab",
    "href": "slides/week-01-r-basics.html#google-colab",
    "title": "Week 1: R Basics",
    "section": "Google Colab",
    "text": "Google Colab\n\nGoogle Colab is a cloud-based Jupyter notebook that allows you to write, execute, and share code like a google doc.\nWe use Google Colab because it’s simple and accessible to everyone. You can start programming right away, no setup required!"
  },
  {
    "objectID": "slides/week-01-r-basics.html#secretly-r",
    "href": "slides/week-01-r-basics.html#secretly-r",
    "title": "Week 1: R Basics",
    "section": "Secretly, R!",
    "text": "Secretly, R!\nGoogle Colab officially supports Python, but secretly supports R (and Julia, too!)\n\nUpdate 2024: Google Colab now officially supports R!\ncolab (r kernel)"
  },
  {
    "objectID": "slides/week-01-r-basics.html#open-a-new-r-notebook",
    "href": "slides/week-01-r-basics.html#open-a-new-r-notebook",
    "title": "Week 1: R Basics",
    "section": "Open a new R notebook:",
    "text": "Open a new R notebook:\n\ncolab (r kernel) - use this link to start a new R notebook\nFile &gt; New notebook and then Runtime &gt; Change runtime type to R"
  },
  {
    "objectID": "slides/week-01-r-basics.html#cell-types",
    "href": "slides/week-01-r-basics.html#cell-types",
    "title": "Week 1: R Basics",
    "section": "Cell types:",
    "text": "Cell types:\n\n+ Code - write and execute code\n+ Text - write text blocks in markdown"
  },
  {
    "objectID": "slides/week-01-r-basics.html#left-sidebar",
    "href": "slides/week-01-r-basics.html#left-sidebar",
    "title": "Week 1: R Basics",
    "section": "Left sidebar:",
    "text": "Left sidebar:\n\nTable of contents - outline from text headings\nFind and replace - find and/or replace\nFiles - upload files to cloud session"
  },
  {
    "objectID": "slides/week-01-r-basics.html#frequently-used-menu-options",
    "href": "slides/week-01-r-basics.html#frequently-used-menu-options",
    "title": "Week 1: R Basics",
    "section": "Frequently used menu options:",
    "text": "Frequently used menu options:\n\nFile &gt; Locate in Drive - where in your Google Drive?\nFile &gt; Save - saves\nFile &gt; Revision history - history of changes you made\nFile &gt; Download &gt; Download .ipynb - used to submit assignments!\nFile &gt; Print - prints\nRuntime &gt; Run all - run all cells\nRuntime &gt; Run before - run all cells before current active cell\nRuntime &gt; Restart and run all - restart runtime, then run all"
  },
  {
    "objectID": "slides/week-01-r-basics.html#frequently-used-keyboard-shortcuts",
    "href": "slides/week-01-r-basics.html#frequently-used-keyboard-shortcuts",
    "title": "Week 1: R Basics",
    "section": "Frequently used keyboard shortcuts:",
    "text": "Frequently used keyboard shortcuts:\n\nCmd/Ctrl+S - save\nCmd/Ctrl+Enter - run focused cell\nCmd/Ctrl+Shift+A - select all cells\nCmd/Ctrl+/ - comment/uncomment selection\nCmd/Ctrl+] - increase indent\nCmd/Ctrl+[ - decrease indent"
  },
  {
    "objectID": "slides/week-01-r-basics.html#expressions",
    "href": "slides/week-01-r-basics.html#expressions",
    "title": "Week 1: R Basics",
    "section": "Expressions",
    "text": "Expressions\n\nExpressions are combinations of values, variables, operators, and functions that can be evaluated to produce a result. Expressions can be as simple as a single value or more complex involving calculations, comparisons, and function calls. They are the fundamental building blocks of programming.\n\n10 - a simple value expression that evaluates to 10.\nx &lt;- 10 - an expression that assigns the value of 10 to x.\nx + 10 - an expression that adds the value of x to 10.\na &lt;- x + 10 - an expression that adds the value of x to 10 and assigns the result to the variable a"
  },
  {
    "objectID": "notes/week-01-r-basics.html",
    "href": "notes/week-01-r-basics.html",
    "title": "Week 1: R basics",
    "section": "",
    "text": "Materials"
  },
  {
    "objectID": "notes/week-01-r-basics.html#hello-world",
    "href": "notes/week-01-r-basics.html#hello-world",
    "title": "Week 1: R basics",
    "section": "Hello, World!",
    "text": "Hello, World!\n\nWhat is data science?\n\nData are descriptions of the world around us, collected through observation and stored on computers. Computers enable us to infer properties of the world from these descriptions. Data science is the discipline of drawing conclusions from data using computation.\n– Computational and Inferential Thinking: The Foundations of Data Science\n\nData science is about making decisions based on incomplete information. This concept is not new – brains (especially human brains!) love doing this. To illustrate, what do you see in the following image?\n\n\n\nFigure 1: from Kok & de Lange (2014)1\n\n\nDid you see a gray triangle on top of three circles? Most people do! But it turns out that your brain is filling in the gaps, inferring the presence of a triangle from the partial information available in the black circles 2.\nWhile the underlying concept is not new, the computational tools we use are relatively new. And we have a lot more data!\n\n\n\nFigure 2: from https://web-assets.domo.com/miyagi/images/product/product-feature-22-data-never-sleeps-10.png\n\n\n\n\nData science workflow\nThe folks who wrote R for Data Science proposed the following data science workflow:\n\n\n\nFigure 3: from R for Data Science\n\n\nLet’s unpack what these mean briefly:\n\nImport: gather data from a variety of sources, which can include structured data (like databases and spreadsheets) and unstructured data (like text, images, and videos).\nTidy and Transform: The raw data we import is often messy. Data scientists clean and preprocess the data, which involves removing errors, handling missing values, and transforming data into a suitable format for analysis.\nVisualize (exploratory data analysis) visualize and summarize data to identify patterns, form hypotheses, select appropriate models, and guide further analysis.\nModel: Using statistical methods, machine learning algorithms, and other computational techniques, data scientists build models to understand underlying patterns in the data. Models are tested using validation techniques to ensure their accuracy and reliability. Then data scientists use them to draw meaningful conclusions, like predictions about the future or inferences about populuation.\nCommunicate: Finally, a crucial part of data science is communicating findings clearly and effectively, whatever your purpose (academic, industry, or the public!)\nProgram: Surrounding all these is programming, since the computational tools are what make these possible!\n\nData science has applications in many fields far beyond language and the mind. It allows us to make data-driven decisions, solve complex problems, and uncover hidden insights that might not be apparent through other methods.\n\n\nOverview of the course\nWe will spend the first few weeks getting comfortable programming in R, including some useful skills for data science:\n\nR basics\nData visualization\nData wrangling\n\nThen, we will spend the next several weeks building a foundation in basic statistics and model building:\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability\n\nFinally we will cover a selection of more advanced topics that are often applied in language and mind fields, with a focus on basic understanding:\n\nClassification\nInference for regression\nMixed-effect models\n\n\n\nSyllabus, briefly\nEach week will include two lectures and a lab:\n\nLectures are on Tuesdays and Thursdays at 12pm and will be a mix of conceptual overviews and R tutorials. It is a good idea to bring your laptop so you can follow along and try stuff in R!\nLabs are on Thursday or Friday and will consist of (ungraded) practice problems and concept review with TAs. You may attend any lab section that works for your schedule.\n\nThere are 10 graded assessments:\nThere are 8 graded assessments:\n\n6 Problem sets (40%) in which you will be asked to apply your newly aquired R programming skills.\n2 Midterm exams (60%) in which you will be tested on your understanding of lecture concepts.\n\nThere are a few policies to take note of:\n\nMissed exams cannot be made up except in cases of genuine conflict or emergency (documentation and course action notice required). You may take the optional final exam to replace a missed or low scoring exam.\nYou may request an extension on any problem set of up to 3 days. But extensions beyond 3 days will not be granted (because delying solutions will negative impact other students).\nYou may submit any missed quiz or problem set by the end of the semester for half-credit (50%), even after solutions are posted.\nWe will drop your lowest pset grade, but you must turn in all 6 assignements to be eligible.\n\n\n\nWhy R?\nWith many programming languages available for data science (e.g. R, Python, Julia, MATLAB), why use R?\n\nBuilt for stats, specifically\nMakes nice visualizations\nLots of people are doing it, especially in academia\nEasier for beginners to understand\nFree and open source (though so are Python and Julia, MATLAB costs $)\n\nIf you are interested, here is a math professor’s take on the differences between Python, Julia, and MATLAB. Note that although they’re optimized for different things, they are all great and the technical skills and conceptual knowledge you gain in this course will transfer to other languages."
  },
  {
    "objectID": "notes/week-01-r-basics.html#google-colab",
    "href": "notes/week-01-r-basics.html#google-colab",
    "title": "Week 1: R basics",
    "section": "Google Colab",
    "text": "Google Colab\nThere are many ways to program with R. Some popular options include:\n\nR Studio\nJupyter\nVS Code\nand even simply the command line/terminal\n\nGoogle Colab is a cloud-based Jupyter notebook that allows you to write, execute, and share code like a google doc. We use Google Colab because it’s simple and accessible to everyone. You can start programming right away, no setup required! Google Colab officially supports Python and R (and secretly Julia, too!)\nNew R notebook:\n\ncolab (r kernel) - use this link to start a new R notebook\nFile &gt; New notebook and then Runtime &gt; Change runtime type to R\n\nCell types:\n\n+ Code - write and execute code\n+ Text - write text blocks in markdown\n\nLeft sidebar:\n\nTable of contents - outline from text headings\nFind and replace - find and/or replace\nFiles - upload files to cloud session\n\nFrequently used menu options:\n\nFile &gt; Locate in Drive - where in your Google Drive?\nFile &gt; Save - saves\nFile &gt; Revision history - history of changes you made\nFile &gt; Download &gt; Download .ipynb - used to submit assignments!\nFile &gt; Print - prints\nRuntime &gt; Run all - run all cells\nRuntime &gt; Run before - run all cells before current active cell\nRuntime &gt; Restart and run all - restart runtime, then run all\n\nFrequently used keyboard shortcuts:\n\nCmd/Ctrl+S - save\nCmd/Ctrl+Enter - run focused cell\nCmd/Ctrl+Shift+A - select all cells\nCmd/Ctrl+/ - comment/uncomment selection\nCmd/Ctrl+] - increase indent\nCmd/Ctrl+[ - decrease indent"
  },
  {
    "objectID": "notes/week-01-r-basics.html#r-basics",
    "href": "notes/week-01-r-basics.html#r-basics",
    "title": "Week 1: R basics",
    "section": "R Basics",
    "text": "R Basics\n\nBasics\nWe begin by defining some basic concepts:\n\nExpressions are combinations of values, variables, operators, and functions that can be evaluated to produce a result. Expressions can be as simple as a single value or more complex involving calculations, comparisons, and function calls. They are the fundamental building blocks of programming.\n\n10 - a simple value expression that evaluates to 10.\nx &lt;- 10 - an expression that assigns the value of 10 to x.\nx + 10 - an expression that adds the value of x to 10.\na &lt;- x + 10 - an expression that adds the value of x to 10 and assigns the result to the variable a\n\nObjects allow us to store various types of data, such as numbers, text, vectors, matrices; and more complex structures like functions and data frames. Objects are created by assigning values to variable names with the assignment operator, &lt;-. For example, in x &lt;- 10, x is an object assigned to the value 10.\nNames that we assign to objects must include only letters, numbers, ., or _. Names must start with a letter (or . if not followed by a number).\nAttributes allow you to attach arbitrary metadata to an object. For example, adding a dim (dimension) attribute to a vector allows it to behave like a matrix or n dimensional array.\nFunctions (or commands) are reusable pieces of code that take some input, preform some task or computation, and return an output. Many functions are built-in to base R (see below!), others can be part of packages or even defined by you. Functions are objects!\nEnvironment is the collection of all the objects (functions, variables etc.) we defined in the current R session.\nPackages are collections of functions, data, and documentation bundled together in R. They enhance R’s capabilities by introducing new functions and specialized data structures. Packages need to be installed and loaded before you can use their functions or data.\nComments are notes you leave to yourself (within code blocks in colab) to document your code; comments are not evaluated.\nMessages are notes R leaves for you, after you run your code. Messages can be simply for-your-information, warnings that something unexpected might happen, or erros if R cannot evaluate your code.\n\nWays to get help when coding in R:\n\nRead package docs - packages usually come with extensive documentation and examples. Reading the docs is one of the best ways to figure things out. Here is an example from the dplyr package.\nRead error messages - read any error messages you receive while coding — they give clues about what is going wrong!\nAsk R - Use R’s built-in functions to get help as you code\nAsk on Ed - ask questions on our class discussion board!\nAsk Google or Stack Overflow - It is a normal and important skill (not cheating) to google things while coding and learning to code! Use keywords and package names to ensure your solutions are course-relevant.\nAsk ChatGPT - You can similarly use ChatGPT or other LLMs as a resource. But keep in mind they may provide a solution that is wrong or not relevant to what we are learning in this course.\n\n\n\nImportant functions\nFor objects:\n\nstr(x) - returns summary of object’s structure\ntypeof(x) - returns object’s data type\nlength(x) - returns object’s length\nattributes(x) - returns list of object’s attributes\nx - returns object x\nprint(x) - prints object x\n\nFor environment:\n\nls() - list all variables in environment\nrm(x) - remove x variable from environment\nrm(list = ls()) - remove all variables from environment\n\nFor packages:\n\ninstall.packages() to install packages\nlibrary() to load the package into your current R session.\ndata() to load data from package into environment\nsessionInfo() - version information for current R session and packages\n\nFor help:\n\n?mean - get help with a function\nhelp('mean') - search help files for word or phrase\nhelp(package='tidyverse') - find help for a package\n\n\n\nVectors\nOne of the must fundamental data structures in R is the vector. There are two types:\n\natomic vector - elements of the same data type\nlist - elements refer to any object (even complex objects or other lists)\n\nAtomic vectors can be one of six data types:\n\ndouble - real numbers, written in decimal (0.1234) or scientific notation (1.23e4)\n\nnumbers are double by default (3 is stored as 3.00)\nthree special doubles: Inf, -Inf, and NaN (not a number)\n\ninteger - integers, whole numbers followed by L (3L or 1e3L)\ncharacter - strings with single or double quotes (‘hello world!’ or “hello world!”)\nlogical - boolean, written (TRUE or FALSE) or abbreviated (T or F)\ncomplex - complex numbers, where i is the imaginary number (5 + 3i)\nraw - stores raw bytes\n\nTo create atomic vectors:\n\nc(2,4,6) - c() function for combining elements, returns 2 4 6\n2:4 - : notation to construct a sequence of integers, returns 2 3 4\nseq(from = 2, to = 6, by=2) - seq() function to create an evenly-spaced sequence, returns 2 4 6\n\nTo check an object’s data type:\n\ntypeof(x) - returns the data type of object x\nis.*(x) - test if object x is data type, returns TRUE or FALSE\n\nis.double()\nis.integer()\nis.character()\nis.logical()\n\n\nTo change an object to data type (explicit coercion):\n\nas.*(x) - coerce object to data type\n\nas.double()\nas.integer()\nas.character()\nas.logical()\n\n\nNote that atomic vectors must contain only elements of the same type. If you try to include elements of different types, R will coerce them into the same type with no warning (implicit coercion) according to the heirarchy character &gt; double &gt; integer &gt; logical.\n\n\nOperations\nArithmetic operators:\n\n+ - add\n- - subtract\n* - multiply\n/ - divide\n^ - exponent\n\nComparison operators return true or false:\n\na == b - equal to\na != b - not equal to\na &gt; b - greater than\na &lt; b - less than\na &gt;= b - greater than or equal to\na &lt;= b - less than or equal to\n\nLogical operators combine multiple true or false statements:\n\n& - and\n| - or\n! - not\nany() - returns true if any element meets condition\nall() - returns true if all elements meet condition\n%in% - returns true if any element is in the following vector\n\nMost math operations (and many functions) are vectorized in R:\n\nthey can work on entire vectors, without the need for explicit loops or iteration.\nthis a powerful feature that allows you to write cleaner, more efficient code\nTo illustrate, suppose x &lt;- c(1, 2, 3):\n\nx + 100 returns c(101, 102, 103)\nx == 1 returns c(TRUE, FALSE, FALSE)\n\n\n\n\nMore complex structures\nSome more complex data structures are built from atomic vectors by adding attributes:\n\nmatrix - a vector with a dim attribute representing 2 dimensions\narray - a vector with a dim attribute representing n dimensions\nfactor - an integer vector with two attributes: class=\"factor\" and levels, which defines the set of allowed values (useful for categorical data)\ndate-time - a double vector where the value is the number of seconds since Jan 01, 1970 and a tzone attribute representing the time zone\ndata.frame - a named list of vectors (of equal length) with attributes for names (column names), row.names, and class=\"data.frame\" (used to represent datasets)\n\nTo create more complex structures:\n\nlist(x=c(1,2,3), y=c('a','b')) - create a list\nmatrix(x, nrow=2, ncol=2) - create a matrix from a vector x with nrow and ncol\narray(x, dim=c(2,3,2)) - create an array from a vector x with dimensions\nfactor(x, levels=unique(x)) - turn a vector x into a factor\ndata.frame(x=c(1,2,3), y=c('a','b','c')) - create a data frame\n\nMissing elements and empty vectors:\n\nNA- used to represent missing or unknown elements in vectors. Note that NA is contageous: expressions including NA usually return NA. Check for NA values with is.na().\nNULL - used to represent an empty or absent vector of arbitrary type. NULL is its own special type and always has length zero and NULL attributes. Check for NULL values with is.null().\n\n\n\nSubsetting\n\nSubsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that you’re interested in. ~ Hadley Wickham, Advanced R\n\nThere are three operators for subsetting objects:\n\n[ - subsets (one or more) elements\n[[ and $ - extracts a single element\n\nThere are six ways to subset multiple elements from vectors with [:\n\nx[c(1,2)] - positive integers select elements at specified indexes\nx[-c(1,2)] - negative integers select all but elements at specified indexes\nx[c(\"name\", \"name2\")] select elements by name, if elements are named\nx[] - nothing returns the original object\nx[0] - zero returns a zero-length vector\nx[c(TRUE, TRUE)] - select elements where corresponding logical value is TRUE\n\nThese also apply when selecting multiple elements from higher dimensional objects (matrix, array, data frame), but note that:\n\nindexes for different dimensions are separated by commas [rows, columns, ...]\nomitted dimensions return all values along that dimension\nthe result is simplified to the lowest possible dimensions by default\ndata frames can also be indexed like a vector (selects columns)\n\nThere are 3 ways to extract a single element from any data structure:\n\n[[2]] - a single positive integer (index)\n[['name']] - a single string\nx$name - the $ operator is a useful shorthand for [['name']]\n\nWhen extracting single elements, note that:\n\n[[ is preferred for atomic vectors for clarity (though[ also works)\n$ does partial matching without warning; use options(warnPartialMatchDollar=TRUE)\nthe behavior for invalid indexes is inconsistent: sometimes you’ll get an error message, and sometimes it will return NULL\n\n\n\nBuilt-in functions\nNote that you do not need to memorize these built-in functions to be successful on quizzes. Use this as a reference.\nFor basic math:\n\nlog(x) - natural log\nexp(x) - exponential\nsqrt(x) - square root\nabs(x) - absolute value\nmax(x) - largest element\nmin(x) - smallest element\nround(x, n) - round to n decimal places\nsignif(x, n) - round to n significant figures\nsum(x) - add all elements\n\nFor stats:\n\nmean(x) - mean\nmedian(x) - median\nsd(x) - standard deviation\nvar(x) - variance\nquantile(x) - percentage quantiles\nrank(x) - rank of elements\ncor(x, y) - correlation\nlm(x ~ y, data=df) - fit a linear model\nglm(x ~ y, data=df) - fit a generalized linear model\nsummary(x) - get more detailed information from a fitted model\naov(x) - analysis of variance\n\nFor vectors:\n\nsort(x) - return sorted vector\ntable(x) - see counts of values in a vector\nrev(x) - return reversed vector\nunique(x) - return unique values in a vector\narray(x, dim) - transform vector into n-dimensional array\n\nFor matrices:\n\nt(m) - transpose matrix\nm %+% n - matrix multiplication\nsolve(m, n) - find x in m * x = n\n\nFor data frames:\n\nview(df) - see the full data frame\nhead(df) - see the first 6 rows of data frame\nnrow(df) - number of rows in a data frame\nncol(df) - number of columns in a data frame\ndim(df) - number of rows and columns in a data frame\ncbind(df1, df2) - bind dataframe columns\nrbind(df1, df2) - bind dataframe rows\n\nFor strings:\n\npaste(x, y, sep=' ') - join vectors together element-wise\ntoupper(x) - convert to uppercase\ntolower(x) - convert to lowercase\nnchar(x) - number of characters in a string\n\nFor simple plotting:\n\nplot(x) values of x in order\nplot(x, y) - values of x against y\nhist(x) - histogram of x\n\n\n\nProgramming in R\nWriting functions and handling control flow are important aspects of learning to program in any language. For our purposes, some general conceptual knowledge on these topics is sufficient (see below). Those interested to learn more might enjoy the book Hands-On Programming with R.\n\nFunctions are reusable pieces of code that take some input, perform some task or computation, and return an output.\nfunction(inputs){\n    ## do something\n    return(output)\n}\nControl flow refers to managing the order in which expressions are executed in a program:\n\nif…else - if something is true, do this; otherwise do that\nfor loops - repeat code a specific number of times\nwhile loops - repeat code as long as certain conditions are true\nbreak - exit a loop early\nnext - skip to next iteration in a loop"
  },
  {
    "objectID": "notes/week-01-r-basics.html#further-reading-and-references",
    "href": "notes/week-01-r-basics.html#further-reading-and-references",
    "title": "Week 1: R basics",
    "section": "Further reading and references",
    "text": "Further reading and references\nSuggested further reading:\n\nGetting started with Data in R from Modern Dive textbook\nR Nuts and Bolts in R Programming for Data Science by Roger Peng\nBase R Cheat Sheet\n\nOther references:\n\nVectors in Advanced R by Hadley Wickham\nSubsetting in Advanced R by Hadley Wickham\nA field guide to base R in R for Data Science by Hadley Wickham"
  },
  {
    "objectID": "notes/week-01-r-basics.html#footnotes",
    "href": "notes/week-01-r-basics.html#footnotes",
    "title": "Week 1: R basics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nKok, P., & de Lange, F. P. (2014). Shape perception simultaneously up-and downregulates neural activity in the primary visual cortex. Current Biology, 24(13), 1531-1535.↩︎\nhttps://neurosciencenews.com/neuroimaging-visual-processing-fmri-1150/↩︎"
  }
]