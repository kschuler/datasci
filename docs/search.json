[
  {
    "objectID": "notes/r-basics.html",
    "href": "notes/r-basics.html",
    "title": "Week 1: R basics",
    "section": "",
    "text": "Tuesday: slides and demo\nThursday: slides and demo"
  },
  {
    "objectID": "notes/r-basics.html#what-is-data-science",
    "href": "notes/r-basics.html#what-is-data-science",
    "title": "Week 1: R basics",
    "section": "2.1 What is data science?",
    "text": "2.1 What is data science?\n\nData are descriptions of the world around us, collected through observation and stored on computers. Computers enable us to infer properties of the world from these descriptions. Data science is the discipline of drawing conclusions from data using computation.\n– Computational and Inferential Thinking: The Foundations of Data Science\n\nData science is about making decisions based on incomplete information. This concept is not new – brains (especially human brains!) love doing this. To illustrate, what do you see in the following image?\n\n\n\n\n\n\nFigure 1: from Kok & de Lange (2014)1\n\n\n\nDid you see a gray triangle on top of three circles? Most people do! But it turns out that your brain is filling in the gaps, inferring the presence of a triangle from the partial information available in the black circles 2.\nWhile the underlying concept is not new, the computational tools we use are relatively new. And we have a lot more data!\n\n\n\n\n\n\nFigure 2: from https://web-assets.domo.com/miyagi/images/product/product-feature-22-data-never-sleeps-10.png"
  },
  {
    "objectID": "notes/r-basics.html#data-science-workflow",
    "href": "notes/r-basics.html#data-science-workflow",
    "title": "Week 1: R basics",
    "section": "2.2 Data science workflow",
    "text": "2.2 Data science workflow\nThe folks who wrote R for Data Science proposed the following data science workflow:\n\n\n\n\n\n\nFigure 3: from R for Data Science\n\n\n\nLet’s unpack what these mean briefly:\n\nImport: gather data from a variety of sources, which can include structured data (like databases and spreadsheets) and unstructured data (like text, images, and videos).\nTidy and Transform: The raw data we import is often messy. Data scientists clean and preprocess the data, which involves removing errors, handling missing values, and transforming data into a suitable format for analysis.\nVisualize (exploratory data analysis) visualize and summarize data to identify patterns, form hypotheses, select appropriate models, and guide further analysis.\nModel: Using statistical methods, machine learning algorithms, and other computational techniques, data scientists build models to understand underlying patterns in the data. Models are tested using validation techniques to ensure their accuracy and reliability. Then data scientists use them to draw meaningful conclusions, like predictions about the future or inferences about populuation.\nCommunicate: Finally, a crucial part of data science is communicating findings clearly and effectively, whatever your purpose (academic, industry, or the public!)\nProgram: Surrounding all these is programming, since the computational tools are what make these possible!\n\nData science has applications in many fields far beyond language and the mind. It allows us to make data-driven decisions, solve complex problems, and uncover hidden insights that might not be apparent through other methods."
  },
  {
    "objectID": "notes/r-basics.html#overview-of-the-course",
    "href": "notes/r-basics.html#overview-of-the-course",
    "title": "Week 1: R basics",
    "section": "2.3 Overview of the course",
    "text": "2.3 Overview of the course\nWe will spend the first few weeks getting comfortable programming in R, including some useful skills for data science:\n\nR basics\nData visualization\nData wrangling\n\nThen, we will spend the next several weeks building a foundation in basic statistics and model building:\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability\n\nFinally we will cover a selection of more advanced topics that are often applied in language and mind fields, with a focus on basic understanding:\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "notes/r-basics.html#syllabus-briefly",
    "href": "notes/r-basics.html#syllabus-briefly",
    "title": "Week 1: R basics",
    "section": "2.4 Syllabus, briefly",
    "text": "2.4 Syllabus, briefly\nEach week will include two lectures and a lab:\n\nLectures are on Tuesdays and Thursdays at 12pm and will be a mix of conceptual overviews and R tutorials. It is a good idea to bring your laptop so you can follow along and try stuff in R!\nLabs are on Thursday or Friday and will consist of (ungraded) practice problems and concept review with TAs. You may attend any lab section that works for your schedule.\n\nThere are 8 graded assessments:\n\n6 Problem sets (40%) in which you will be asked to apply your newly aquired R programming skills.\n2 Midterm exams (60%) in which you will be tested on your understanding of lecture concepts.\n\nThere are a few policies to take note of:\n\nMissed exams cannot be made up except in cases of genuine conflict or emergency (documentation and course action notice required). You may take the optional final exam to replace a missed or low scoring exam.\nYou may request an extension on any problem set of up to 3 days. But extensions beyond 3 days will not be granted (because delying solutions will negative impact other students).\nYou may submit any missed quiz or problem set by the end of the semester for half-credit (50%), even after solutions are posted.\nWe will drop your lowest pset grade, but you must turn in all 6 assignements to be eligible."
  },
  {
    "objectID": "notes/r-basics.html#why-r",
    "href": "notes/r-basics.html#why-r",
    "title": "Week 1: R basics",
    "section": "2.5 Why R?",
    "text": "2.5 Why R?\nWith many programming languages available for data science (e.g. R, Python, Julia, MATLAB), why use R?\n\nBuilt for stats, specifically\nMakes nice visualizations\nLots of people are doing it, especially in academia\nEasier for beginners to understand\nFree and open source (though so are Python and Julia, MATLAB costs $)\n\nIf you are interested, here is a math professor’s take on the differences between Python, Julia, and MATLAB. Note that although they’re optimized for different things, they are all great and the technical skills and conceptual knowledge you gain in this course will transfer to other languages."
  },
  {
    "objectID": "notes/r-basics.html#basics",
    "href": "notes/r-basics.html#basics",
    "title": "Week 1: R basics",
    "section": "4.1 Basics",
    "text": "4.1 Basics\nWe begin by defining some basic concepts:\n\nExpressions are combinations of values, variables, operators, and functions that can be evaluated to produce a result. Expressions can be as simple as a single value or more complex involving calculations, comparisons, and function calls. They are the fundamental building blocks of programming.\n\n10 - a simple value expression that evaluates to 10.\nx &lt;- 10 - an expression that assigns the value of 10 to x.\nx + 10 - an expression that adds the value of x to 10.\na &lt;- x + 10 - an expression that adds the value of x to 10 and assigns the result to the variable a\n\nObjects allow us to store various types of data, such as numbers, text, vectors, matrices; and more complex structures like functions and data frames. Objects are created by assigning values to variable names with the assignment operator, &lt;-. For example, in x &lt;- 10, x is an object assigned to the value 10.\nNames that we assign to objects must include only letters, numbers, ., or _. Names must start with a letter (or . if not followed by a number).\nAttributes allow you to attach arbitrary metadata to an object. For example, adding a dim (dimension) attribute to a vector allows it to behave like a matrix or n dimensional array.\nFunctions (or commands) are reusable pieces of code that take some input, preform some task or computation, and return an output. Many functions are built-in to base R (see below!), others can be part of packages or even defined by you. Functions are objects!\nEnvironment is the collection of all the objects (functions, variables etc.) we defined in the current R session.\nPackages are collections of functions, data, and documentation bundled together in R. They enhance R’s capabilities by introducing new functions and specialized data structures. Packages need to be installed and loaded before you can use their functions or data.\nComments are notes you leave to yourself (within code blocks in colab) to document your code; comments are not evaluated.\nMessages are notes R leaves for you, after you run your code. Messages can be simply for-your-information, warnings that something unexpected might happen, or erros if R cannot evaluate your code.\n\nWays to get help when coding in R:\n\nRead package docs - packages usually come with extensive documentation and examples. Reading the docs is one of the best ways to figure things out. Here is an example from the dplyr package.\nRead error messages - read any error messages you receive while coding — they give clues about what is going wrong!\nAsk R - Use R’s built-in functions to get help as you code\nAsk on Ed - ask questions on our class discussion board!\nAsk Google or Stack Overflow - It is a normal and important skill (not cheating) to google things while coding and learning to code! Use keywords and package names to ensure your solutions are course-relevant.\nAsk ChatGPT - You can similarly use ChatGPT or other LLMs as a resource. But keep in mind they may provide a solution that is wrong or not relevant to what we are learning in this course."
  },
  {
    "objectID": "notes/r-basics.html#important-functions",
    "href": "notes/r-basics.html#important-functions",
    "title": "Week 1: R basics",
    "section": "4.2 Important functions",
    "text": "4.2 Important functions\nFor objects:\n\nstr(x) - returns summary of object’s structure\ntypeof(x) - returns object’s data type\nlength(x) - returns object’s length\nattributes(x) - returns list of object’s attributes\nx - returns object x\nprint(x) - prints object x\n\nFor environment:\n\nls() - list all variables in environment\nrm(x) - remove x variable from environment\nrm(list = ls()) - remove all variables from environment\n\nFor packages:\n\ninstall.packages() to install packages\nlibrary() to load the package into your current R session.\ndata() to load data from package into environment\nsessionInfo() - version information for current R session and packages\n\nFor help:\n\n?mean - get help with a function\nhelp('mean') - search help files for word or phrase\nhelp(package='tidyverse') - find help for a package"
  },
  {
    "objectID": "notes/r-basics.html#vectors",
    "href": "notes/r-basics.html#vectors",
    "title": "Week 1: R basics",
    "section": "4.3 Vectors",
    "text": "4.3 Vectors\nOne of the must fundamental data structures in R is the vector. There are two types:\n\natomic vector - elements of the same data type\nlist - elements refer to any object (even complex objects or other lists)\n\nAtomic vectors can be one of six data types:\n\ndouble - real numbers, written in decimal (0.1234) or scientific notation (1.23e4)\n\nnumbers are double by default (3 is stored as 3.00)\nthree special doubles: Inf, -Inf, and NaN (not a number)\n\ninteger - integers, whole numbers followed by L (3L or 1e3L)\ncharacter - strings with single or double quotes (‘hello world!’ or “hello world!”)\nlogical - boolean, written (TRUE or FALSE) or abbreviated (T or F)\ncomplex - complex numbers, where i is the imaginary number (5 + 3i)\nraw - stores raw bytes\n\nTo create atomic vectors:\n\nc(2,4,6) - c() function for combining elements, returns 2 4 6\n2:4 - : notation to construct a sequence of integers, returns 2 3 4\nseq(from = 2, to = 6, by=2) - seq() function to create an evenly-spaced sequence, returns 2 4 6\n\nTo check an object’s data type:\n\ntypeof(x) - returns the data type of object x\nis.*(x) - test if object x is data type, returns TRUE or FALSE\n\nis.double()\nis.integer()\nis.character()\nis.logical()\n\n\nTo change an object to data type (explicit coercion):\n\nas.*(x) - coerce object to data type\n\nas.double()\nas.integer()\nas.character()\nas.logical()\n\n\nNote that atomic vectors must contain only elements of the same type. If you try to include elements of different types, R will coerce them into the same type with no warning (implicit coercion) according to the heirarchy character &gt; double &gt; integer &gt; logical."
  },
  {
    "objectID": "notes/r-basics.html#operations",
    "href": "notes/r-basics.html#operations",
    "title": "Week 1: R basics",
    "section": "4.4 Operations",
    "text": "4.4 Operations\nArithmetic operators:\n\n+ - add\n- - subtract\n* - multiply\n/ - divide\n^ - exponent\n\nComparison operators return true or false:\n\na == b - equal to\na != b - not equal to\na &gt; b - greater than\na &lt; b - less than\na &gt;= b - greater than or equal to\na &lt;= b - less than or equal to\n\nLogical operators combine multiple true or false statements:\n\n& - and\n| - or\n! - not\nany() - returns true if any element meets condition\nall() - returns true if all elements meet condition\n%in% - returns true if any element is in the following vector\n\nMost math operations (and many functions) are vectorized in R:\n\nthey can work on entire vectors, without the need for explicit loops or iteration.\nthis a powerful feature that allows you to write cleaner, more efficient code\nTo illustrate, suppose x &lt;- c(1, 2, 3):\n\nx + 100 returns c(101, 102, 103)\nx == 1 returns c(TRUE, FALSE, FALSE)"
  },
  {
    "objectID": "notes/r-basics.html#more-complex-structures",
    "href": "notes/r-basics.html#more-complex-structures",
    "title": "Week 1: R basics",
    "section": "4.5 More complex structures",
    "text": "4.5 More complex structures\nSome more complex data structures are built from atomic vectors by adding attributes:\n\nmatrix - a vector with a dim attribute representing 2 dimensions\narray - a vector with a dim attribute representing n dimensions\nfactor - an integer vector with two attributes: class=\"factor\" and levels, which defines the set of allowed values (useful for categorical data)\ndate-time - a double vector where the value is the number of seconds since Jan 01, 1970 and a tzone attribute representing the time zone\ndata.frame - a named list of vectors (of equal length) with attributes for names (column names), row.names, and class=\"data.frame\" (used to represent datasets)\n\nTo create more complex structures:\n\nlist(x=c(1,2,3), y=c('a','b')) - create a list\nmatrix(x, nrow=2, ncol=2) - create a matrix from a vector x with nrow and ncol\narray(x, dim=c(2,3,2)) - create an array from a vector x with dimensions\nfactor(x, levels=unique(x)) - turn a vector x into a factor\ndata.frame(x=c(1,2,3), y=c('a','b','c')) - create a data frame\n\nMissing elements and empty vectors:\n\nNA- used to represent missing or unknown elements in vectors. Note that NA is contageous: expressions including NA usually return NA. Check for NA values with is.na().\nNULL - used to represent an empty or absent vector of arbitrary type. NULL is its own special type and always has length zero and NULL attributes. Check for NULL values with is.null()."
  },
  {
    "objectID": "notes/r-basics.html#subsetting",
    "href": "notes/r-basics.html#subsetting",
    "title": "Week 1: R basics",
    "section": "4.6 Subsetting",
    "text": "4.6 Subsetting\n\nSubsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that you’re interested in. ~ Hadley Wickham, Advanced R\n\nThere are three operators for subsetting objects:\n\n[ - subsets (one or more) elements\n[[ and $ - extracts a single element\n\nThere are six ways to subset multiple elements from vectors with [:\n\nx[c(1,2)] - positive integers select elements at specified indexes\nx[-c(1,2)] - negative integers select all but elements at specified indexes\nx[c(\"name\", \"name2\")] select elements by name, if elements are named\nx[] - nothing returns the original object\nx[0] - zero returns a zero-length vector\nx[c(TRUE, TRUE)] - select elements where corresponding logical value is TRUE\n\nThese also apply when selecting multiple elements from higher dimensional objects (matrix, array, data frame), but note that:\n\nindexes for different dimensions are separated by commas [rows, columns, ...]\nomitted dimensions return all values along that dimension\nthe result is simplified to the lowest possible dimensions by default\ndata frames can also be indexed like a vector (selects columns)\n\nThere are 3 ways to extract a single element from any data structure:\n\n[[2]] - a single positive integer (index)\n[['name']] - a single string\nx$name - the $ operator is a useful shorthand for [['name']]\n\nWhen extracting single elements, note that:\n\n[[ is preferred for atomic vectors for clarity (though[ also works)\n$ does partial matching without warning; use options(warnPartialMatchDollar=TRUE)\nthe behavior for invalid indexes is inconsistent: sometimes you’ll get an error message, and sometimes it will return NULL"
  },
  {
    "objectID": "notes/r-basics.html#built-in-functions",
    "href": "notes/r-basics.html#built-in-functions",
    "title": "Week 1: R basics",
    "section": "4.7 Built-in functions",
    "text": "4.7 Built-in functions\nNote that you do not need to memorize these built-in functions to be successful on quizzes. Use this as a reference.\nFor basic math:\n\nlog(x) - natural log\nexp(x) - exponential\nsqrt(x) - square root\nabs(x) - absolute value\nmax(x) - largest element\nmin(x) - smallest element\nround(x, n) - round to n decimal places\nsignif(x, n) - round to n significant figures\nsum(x) - add all elements\n\nFor stats:\n\nmean(x) - mean\nmedian(x) - median\nsd(x) - standard deviation\nvar(x) - variance\nquantile(x) - percentage quantiles\nrank(x) - rank of elements\ncor(x, y) - correlation\nlm(x ~ y, data=df) - fit a linear model\nglm(x ~ y, data=df) - fit a generalized linear model\nsummary(x) - get more detailed information from a fitted model\naov(x) - analysis of variance\n\nFor vectors:\n\nsort(x) - return sorted vector\ntable(x) - see counts of values in a vector\nrev(x) - return reversed vector\nunique(x) - return unique values in a vector\narray(x, dim) - transform vector into n-dimensional array\n\nFor matrices:\n\nt(m) - transpose matrix\nm %+% n - matrix multiplication\nsolve(m, n) - find x in m * x = n\n\nFor data frames:\n\nview(df) - see the full data frame\nhead(df) - see the first 6 rows of data frame\nnrow(df) - number of rows in a data frame\nncol(df) - number of columns in a data frame\ndim(df) - number of rows and columns in a data frame\ncbind(df1, df2) - bind dataframe columns\nrbind(df1, df2) - bind dataframe rows\n\nFor strings:\n\npaste(x, y, sep=' ') - join vectors together element-wise\ntoupper(x) - convert to uppercase\ntolower(x) - convert to lowercase\nnchar(x) - number of characters in a string\n\nFor simple plotting:\n\nplot(x) values of x in order\nplot(x, y) - values of x against y\nhist(x) - histogram of x"
  },
  {
    "objectID": "notes/r-basics.html#programming-in-r",
    "href": "notes/r-basics.html#programming-in-r",
    "title": "Week 1: R basics",
    "section": "4.8 Programming in R",
    "text": "4.8 Programming in R\nWriting functions and handling control flow are important aspects of learning to program in any language. For our purposes, some general conceptual knowledge on these topics is sufficient (see below). Those interested to learn more might enjoy the book Hands-On Programming with R.\n\nFunctions are reusable pieces of code that take some input, perform some task or computation, and return an output.\nfunction(inputs){\n    ## do something\n    return(output)\n}\nControl flow refers to managing the order in which expressions are executed in a program:\n\nif…else - if something is true, do this; otherwise do that\nfor loops - repeat code a specific number of times\nwhile loops - repeat code as long as certain conditions are true\nbreak - exit a loop early\nnext - skip to next iteration in a loop"
  },
  {
    "objectID": "notes/r-basics.html#footnotes",
    "href": "notes/r-basics.html#footnotes",
    "title": "Week 1: R basics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nKok, P., & de Lange, F. P. (2014). Shape perception simultaneously up-and downregulates neural activity in the primary visual cortex. Current Biology, 24(13), 1531-1535.↩︎\nhttps://neurosciencenews.com/neuroimaging-visual-processing-fmri-1150/↩︎"
  },
  {
    "objectID": "slides/r-basics.html#announcements",
    "href": "slides/r-basics.html#announcements",
    "title": "R basics",
    "section": "Announcements",
    "text": "Announcements\n\nCourse is full\nThursday 3:30 moved to 5:15pm\nPlease join the waitlist\nPlease fill out Who’s in class"
  },
  {
    "objectID": "slides/r-basics.html#you-are-here",
    "href": "slides/r-basics.html#you-are-here",
    "title": "R basics",
    "section": "You are here",
    "text": "You are here\n\n\nData science with R\n\n\nR basics\nData visualization\nData wrangling\n\n\n\nStats & Model buidling\n\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability\n\n\n\nMore advanced\n\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "slides/r-basics.html#basic-concepts",
    "href": "slides/r-basics.html#basic-concepts",
    "title": "R basics",
    "section": "Basic concepts",
    "text": "Basic concepts\n\nExpressions: fundamental building blocks of programming\nObjects: allow us to store stuff, created with assignment operator\nNames: names w give objects must be letters, numbers, ., or _\nAttributes: allow us to attach arbitrary metadata to objects\nFunctions: take some input, perform some computation, and return some output\nEnvironment: collection of all objects we defined in current R session\nPackages: collections of functions, data, and documentation bundled together in R\nComments: notes you leave for yourself, not evaluated\nMessages: notes R leaves for you (FYI, warning, error)"
  },
  {
    "objectID": "slides/r-basics.html#important-functions",
    "href": "slides/r-basics.html#important-functions",
    "title": "R basics",
    "section": "Important functions",
    "text": "Important functions\nObjects\n\nstr(x) - returns summary of object’s structure\ntypeof(x) - returns object’s data type\nlength(x) - returns object’s length\nattributes(x) - returns list of object’s attributes"
  },
  {
    "objectID": "slides/r-basics.html#important-functions-1",
    "href": "slides/r-basics.html#important-functions-1",
    "title": "R basics",
    "section": "Important functions",
    "text": "Important functions\nEnvironment\n\nls() - list all variables in environment\nrm(x) - remove x variable from environment\nrm(list = ls()) - remove all variables from environment"
  },
  {
    "objectID": "slides/r-basics.html#important-function",
    "href": "slides/r-basics.html#important-function",
    "title": "R basics",
    "section": "Important function",
    "text": "Important function\nPackages\n\ninstall.packages() to install packages\nlibrary() to load package into current R session.\ndata() to load data from package into environment\nsessionInfo() - version info, packages for current R session"
  },
  {
    "objectID": "slides/r-basics.html#important-functions-2",
    "href": "slides/r-basics.html#important-functions-2",
    "title": "R basics",
    "section": "Important functions",
    "text": "Important functions\nHelp\n\n?mean - get help with a function\nhelp('mean') - search help files for word or phrase\nhelp(package='tidyverse') - find help for a package"
  },
  {
    "objectID": "slides/r-basics.html#vectors-1",
    "href": "slides/r-basics.html#vectors-1",
    "title": "R basics",
    "section": "Vectors",
    "text": "Vectors\nare fundamental data structures in R. There are two types:\n\natomic vectors - elements of the same data type\nlists - elements refer to any object"
  },
  {
    "objectID": "slides/r-basics.html#atomic-vectors",
    "href": "slides/r-basics.html#atomic-vectors",
    "title": "R basics",
    "section": "Atomic vectors",
    "text": "Atomic vectors\nAtomic vectors can be one of six data types:\n\n\n\ntypeof(x)\nexamples\n\n\n\n\ndouble\n3, 3.32\n\n\ninteger\n1L, 144L\n\n\ncharacter\n“hello”, ‘hello, world!’\n\n\nlogical\nTRUE, F\n\n\n\n\natomic because they must contain only one type"
  },
  {
    "objectID": "slides/r-basics.html#atomic-vectors-1",
    "href": "slides/r-basics.html#atomic-vectors-1",
    "title": "R basics",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\n\ndouble\n\ntypeof(3.34)\n\n[1] \"double\"\n\n\ninteger\n\ntypeof(3L)\n\n[1] \"integer\"\n\n\n\ncharacter\n\ntypeof('hello, world!')\n\n[1] \"character\"\n\n\nlogical\n\ntypeof(TRUE)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/r-basics.html#create-a-vector",
    "href": "slides/r-basics.html#create-a-vector",
    "title": "R basics",
    "section": "Create a vector",
    "text": "Create a vector\nwith c() for concatenate\n\nc(2,4,6)\n\n[1] 2 4 6\n\nc(\"hello\", \"world\", \"!\")\n\n[1] \"hello\" \"world\" \"!\"    \n\nc(T, F, T)\n\n[1]  TRUE FALSE  TRUE\n\nc(\"hello\", c(2, 3))\n\n[1] \"hello\" \"2\"     \"3\""
  },
  {
    "objectID": "slides/r-basics.html#create-a-vector-1",
    "href": "slides/r-basics.html#create-a-vector-1",
    "title": "R basics",
    "section": "Create a vector",
    "text": "Create a vector\nwith sequences seq() or repetitions rep()\n\n# sequence of integers have a special shorthand\n6:10\n\n[1]  6  7  8  9 10\n\n\n\n\n# sequence from, to, by \nseq(from=3, to=5, by=0.5)\n\n[1] 3.0 3.5 4.0 4.5 5.0\n\n\n\n\n\n# rep(x, times = 1, each = 1)\nrep(c(1,0), times = 4)\n\n[1] 1 0 1 0 1 0 1 0\n\n\n\n\n\n# rep(x, times = 1, each = 1)\nrep(c(1,0), each = 4)\n\n[1] 1 1 1 1 0 0 0 0"
  },
  {
    "objectID": "slides/r-basics.html#check-data-type",
    "href": "slides/r-basics.html#check-data-type",
    "title": "R basics",
    "section": "Check data type",
    "text": "Check data type\nwith typeof(x) - returns the type of vector x\n\ntypeof(3)\n\n[1] \"double\"\n\ntypeof(3L)\n\n[1] \"integer\"\n\ntypeof(\"three\")\n\n[1] \"character\"\n\ntypeof(TRUE)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/r-basics.html#check-data-type-1",
    "href": "slides/r-basics.html#check-data-type-1",
    "title": "R basics",
    "section": "Check data type",
    "text": "Check data type\nwith is.*(x) - returns TRUE if x has type *\n\nis.double(3)\n\n[1] TRUE\n\nis.integer(3L)\n\n[1] TRUE\n\nis.character(\"three\")\n\n[1] TRUE\n\nis.logical(TRUE)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/r-basics.html#coercion-implicit",
    "href": "slides/r-basics.html#coercion-implicit",
    "title": "R basics",
    "section": "Coercion, implicit",
    "text": "Coercion, implicit\nIf you try to include elements of different types, R will coerce them into the same type without warning (implicit coercion)\n\nx &lt;- c(1, 2, \"three\", 4, 5 )\nx\n\n[1] \"1\"     \"2\"     \"three\" \"4\"     \"5\"    \n\ntypeof(x)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/r-basics.html#coercion-explicit",
    "href": "slides/r-basics.html#coercion-explicit",
    "title": "R basics",
    "section": "Coercion, explicit",
    "text": "Coercion, explicit\nYou can also use explict coercion to change a vector to another data type with as.*()\n\nx &lt;- c(1, 0 , 1, 0)\nas.logical(x)\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\n\n\n\n\nhierarchy: character &gt; double &gt; integer &gt; logical"
  },
  {
    "objectID": "slides/r-basics.html#more-complex-structures-1",
    "href": "slides/r-basics.html#more-complex-structures-1",
    "title": "R basics",
    "section": "More complex structures",
    "text": "More complex structures\nSome more complex data structures are built from atomic vectors by adding attributes:\n\n\n\n\n\n\n\nStructure\nDescription\n\n\n\n\nmatrix\nvector with dim attribute representing 2 dimensions\n\n\narray\nvector with dim attribute representing n dimensions\n\n\ndata.frame\na named list of vectors (of equal length) with attributes for names (column names), row.names, and class=\"data.frame\""
  },
  {
    "objectID": "slides/r-basics.html#create-more-complex-structures",
    "href": "slides/r-basics.html#create-more-complex-structures",
    "title": "R basics",
    "section": "Create more complex structures",
    "text": "Create more complex structures\n\n\nmatrix\n\nmatrix(0, nrow=2, ncol=3)\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\n\ndata.frame\n\ndata.frame(x=c(1,2,3), y=c('a','b','c'))\n\n  x y\n1 1 a\n2 2 b\n3 3 c\n\n\n\narray\n\narray(0, dim=c(2,3,2))\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0"
  },
  {
    "objectID": "slides/r-basics.html#basic-math-operators",
    "href": "slides/r-basics.html#basic-math-operators",
    "title": "R basics",
    "section": "Basic math operators",
    "text": "Basic math operators\n\n\n\nOperator\nOperation\n\n\n\n\n()\nParentheses\n\n\n^\nExponent\n\n\n*\nMultiply\n\n\n/\nDivide\n\n\n+\nAdd\n\n\n-\nSubtract"
  },
  {
    "objectID": "slides/r-basics.html#basic-math-operations",
    "href": "slides/r-basics.html#basic-math-operations",
    "title": "R basics",
    "section": "Basic math operations",
    "text": "Basic math operations\nfollow the order of operations you expect (PEMDAS)\n\n# multiplication takes precedence\n2 + 3 * 10\n\n[1] 32\n\n# we can use paratheses to be explicit\n(2 + 3) * 10 \n\n[1] 50"
  },
  {
    "objectID": "slides/r-basics.html#comparison-operators",
    "href": "slides/r-basics.html#comparison-operators",
    "title": "R basics",
    "section": "Comparison operators",
    "text": "Comparison operators\n\n\n\nOperator\nComparison\n\n\n\n\nx &lt; y\nless than\n\n\nx &gt; y\ngreater than\n\n\nx &lt;= y\nless than or equal to\n\n\nx &gt;= y\ngreater than or equal to\n\n\nx != y\nnot equal to\n\n\nx == y\nequal to"
  },
  {
    "objectID": "slides/r-basics.html#comparison-operators-1",
    "href": "slides/r-basics.html#comparison-operators-1",
    "title": "R basics",
    "section": "Comparison operators",
    "text": "Comparison operators\n\nx &lt;- 2\ny &lt;- 3\n\n\n\n\nx &lt; y\n\n[1] TRUE\n\nx &gt; y \n\n[1] FALSE\n\nx != y\n\n[1] TRUE\n\nx == y\n\n[1] FALSE"
  },
  {
    "objectID": "slides/r-basics.html#logical-operators",
    "href": "slides/r-basics.html#logical-operators",
    "title": "R basics",
    "section": "Logical operators",
    "text": "Logical operators\n\n\n\nOperator\nOperation\n\n\n\n\nx | y\nor\n\n\nx & y\nand\n\n\n!x\nnot\n\n\nany()\ntrue if any element meets condition\n\n\nall()\ntrue if all elements meet condition\n\n\n%in%\ntrue if any element is in following vector"
  },
  {
    "objectID": "slides/r-basics.html#logical-operators-1",
    "href": "slides/r-basics.html#logical-operators-1",
    "title": "R basics",
    "section": "Logical operators",
    "text": "Logical operators\n\nx &lt;- TRUE\ny &lt;- FALSE\n\n\n\n\nx | y\n\n[1] TRUE\n\nx & y \n\n[1] FALSE\n\n!x \n\n[1] FALSE\n\nany(c(x,y))\n\n[1] TRUE\n\nall(c(x,y))\n\n[1] FALSE"
  },
  {
    "objectID": "slides/r-basics.html#operations-are-vectorized",
    "href": "slides/r-basics.html#operations-are-vectorized",
    "title": "R basics",
    "section": "Operations are vectorized",
    "text": "Operations are vectorized\nAlmost all operations (and many functions) are vectorized\n\n\n\nmath\n\nc(1, 2, 3) + c(4, 5, 6)\n\n[1] 5 7 9\n\nc(1, 2, 3) / c(4, 5, 6)\n\n[1] 0.25 0.40 0.50\n\nc(1, 2, 3) * 10 \n\n[1] 10 20 30\n\nc(1, 2, 30) &gt; 10\n\n[1] FALSE FALSE  TRUE\n\n\n\nlogical\n\nx &lt;- c(TRUE, FALSE, FALSE)\ny &lt;- c(TRUE, TRUE, FALSE)\nz &lt;- TRUE\n\n\nx | y\n\n[1]  TRUE  TRUE FALSE\n\nx & y \n\n[1]  TRUE FALSE FALSE\n\nx | z \n\n[1] TRUE TRUE TRUE\n\nx & z \n\n[1]  TRUE FALSE FALSE"
  },
  {
    "objectID": "slides/r-basics.html#operator-coercion",
    "href": "slides/r-basics.html#operator-coercion",
    "title": "R basics",
    "section": "Operator coercion",
    "text": "Operator coercion\nOperators and functions will also coerce values when needed (and without warning)\n\n5.6 + 2L\n\n[1] 7.6\n\n10 + FALSE \n\n[1] 10\n\nlog(1)\n\n[1] 0\n\nlog(TRUE)\n\n[1] 0"
  },
  {
    "objectID": "slides/r-basics.html#subsetting-1",
    "href": "slides/r-basics.html#subsetting-1",
    "title": "R basics",
    "section": "Subsetting",
    "text": "Subsetting\n\nSubsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that you’re interested in. ~ Hadley Wickham, Advanced R\n\nstr()\n\nx &lt;- c(\"hello\", \"world\", \"!\")\nstr(x)\n\n chr [1:3] \"hello\" \"world\" \"!\"\n\ny &lt;- c(1, 2, 3, 4, 5)\nstr(y)\n\n num [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "slides/r-basics.html#subsetting-2",
    "href": "slides/r-basics.html#subsetting-2",
    "title": "R basics",
    "section": "Subsetting",
    "text": "Subsetting\nThere are three operators for subsetting objects:\n\n[ - subsets (one or more) elements\n[[ and $ - extracts a single element"
  },
  {
    "objectID": "slides/r-basics.html#subset-multiple-elements-with",
    "href": "slides/r-basics.html#subset-multiple-elements-with",
    "title": "R basics",
    "section": "Subset multiple elements with [",
    "text": "Subset multiple elements with [\n\n\n\n\n\n\n\nCode\nReturns\n\n\n\n\nx[c(1,2)]\npositive integers select elements at specified indexes\n\n\nx[-c(1,2)]\nnegative integers select all but elements at specified indexes\n\n\nx[c(\"x\", \"y\")]\nselect elements by name, if elements are named\n\n\nx[]\nnothing returns the original object\n\n\nx[0]\nzero returns a zero-length vector\n\n\nx[c(TRUE, TRUE)]\nselect elements where corresponding logical value is TRUE"
  },
  {
    "objectID": "slides/r-basics.html#subset-multiple-elements-with-1",
    "href": "slides/r-basics.html#subset-multiple-elements-with-1",
    "title": "R basics",
    "section": "Subset multiple elements with [",
    "text": "Subset multiple elements with [\n\n\natomic vector\n\nx &lt;- c(\"hello\", \"world\", \"1\")\n\n\nx[c(1,2)]\n\n[1] \"hello\" \"world\"\n\nx[-c(1,2)]\n\n[1] \"1\"\n\nx[]\n\n[1] \"hello\" \"world\" \"1\"    \n\n\n\ndata.frame\n\ny &lt;- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n\n\ny[c(1,2)]\n\n  this that\n1    1    a\n2    2    b\n3    3    c\n\ny[-c(1,2)]\n\n  theother\n1        4\n2        5\n3        6\n\ny[c(\"this\")]\n\n  this\n1    1\n2    2\n3    3"
  },
  {
    "objectID": "slides/r-basics.html#ways-to-extract-a-single-element",
    "href": "slides/r-basics.html#ways-to-extract-a-single-element",
    "title": "R basics",
    "section": "3 ways to extract a single element",
    "text": "3 ways to extract a single element\n\n\n\nCode\nReturns\n\n\n\n\n[[2]]\na single positive integer (index)\n\n\n[['name']]\na single string\n\n\nx$name\nthe $ operator is a useful shorthand for [['name']]"
  },
  {
    "objectID": "slides/r-basics.html#ways-to-extract-a-single-element-1",
    "href": "slides/r-basics.html#ways-to-extract-a-single-element-1",
    "title": "R basics",
    "section": "3 ways to extract a single element",
    "text": "3 ways to extract a single element\n\n\natomic vector\n\nx &lt;- c(\"hello\", \"world\", \"1\")\n\n\nx[[1]]\n\n[1] \"hello\"\n\nx[[2]]\n\n[1] \"world\"\n\nx[[3]]\n\n[1] \"1\"\n\n\n\ndata.frame\n\ny &lt;- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n\n\ny[[1]]\n\n[1] 1 2 3\n\ny[[\"that\"]]\n\n[1] \"a\" \"b\" \"c\"\n\ny$that\n\n[1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "slides/r-basics.html#r-has-many-built-in-functions",
    "href": "slides/r-basics.html#r-has-many-built-in-functions",
    "title": "R basics",
    "section": "R has many built-in functions",
    "text": "R has many built-in functions\n\nx &lt;- c(1, -2, 3)\n\n\n\n\nSome are vectorized\n\nlog(x)\n\n[1] 0.000000      NaN 1.098612\n\nabs(x)\n\n[1] 1 2 3\n\nround(x, 2)\n\n[1]  1 -2  3\n\n\n\nSome are not\n\nmean(x)\n\n[1] 0.6666667\n\nmax(x)\n\n[1] 3\n\nmin(x)\n\n[1] -2"
  },
  {
    "objectID": "slides/r-basics.html#missing-values",
    "href": "slides/r-basics.html#missing-values",
    "title": "R basics",
    "section": "Missing values",
    "text": "Missing values\n\n\nNA\n\nused to represent missing or unknown elements in vectors\nNote that NA is contageous: expressions including NA usually return NA\nCheck for NA values with is.na()\n\n\nx &lt;- c(1, NA, 3)\nis.na(x)\n\n[1] FALSE  TRUE FALSE\n\nlength(x)\n\n[1] 3\n\nmean(x)\n\n[1] NA\n\n\n\nNULL\n\nused to represent an empty or absent vector of arbitrary type\nNULL is its own special type and always has length zero and NULL attributes\nCheck for NULL values with is.null()\n\n\nx &lt;- c()\nis.null(x)\n\n[1] TRUE\n\nlength(x)\n\n[1] 0\n\nmean(x)\n\n[1] NA"
  },
  {
    "objectID": "slides/r-basics.html#programming",
    "href": "slides/r-basics.html#programming",
    "title": "R basics",
    "section": "Programming",
    "text": "Programming\n\n\nfunctions\nare reusable pieces of code that take some input, perform some task or computation, and return an output\nfunction(inputs){\n    # do something\n    return(output)\n}\n\ncontrol flow\nrefers to managing the order in which expressions are executed in a program\n\nif…else - if something is true, do this; otherwise do that\nfor loops - repeat code a specific number of times\nwhile loops - repeat code as long as certain conditions are true\nbreak - exit a loop early\nnext - skip to next iteration in a loop"
  },
  {
    "objectID": "slides/r-basics.html#notes-on-with-higher-dim-objects",
    "href": "slides/r-basics.html#notes-on-with-higher-dim-objects",
    "title": "R basics",
    "section": "Notes on [ with higher dim objects",
    "text": "Notes on [ with higher dim objects\n\nm &lt;- matrix(1:6, nrow=2, ncol=3)\nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n# separate dimensions by comma \nm[1, 2]\n\n[1] 3\n\n# omitted dim return all from that dim \nm[2, ]\n\n[1] 2 4 6\n\nm[ , 2]\n\n[1] 3 4"
  },
  {
    "objectID": "slides/r-basics.html#notes-on-and",
    "href": "slides/r-basics.html#notes-on-and",
    "title": "R basics",
    "section": "Notes on [[ and $:",
    "text": "Notes on [[ and $:\nboth [[ and [ work for vectors; use [[\n\nx &lt;- c(1, -2, 3)\nx[[1]]\n\n[1] 1\n\nx[1]\n\n[1] 1\n\n\n$ does partial matching without warning\n\ndf &lt;- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n\n\ndf[['theo']]\n\nNULL\n\ndf$theo\n\n[1] 4 5 6"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for studying language and the mind",
    "section": "",
    "text": "Welcome to Data Science for Studying Language & the Mind! The Fall 2024 course information and materials are below. Course materials from previous semesters are archived here.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#study-guides",
    "href": "index.html#study-guides",
    "title": "Data Science for studying language and the mind",
    "section": "3.1 Study guides",
    "text": "3.1 Study guides\nStudy guides include weekly study guides and additional resources from each week, including slides, demos, and further reading.\n\nWeek 1: R Basics\nWeek 2: Data visualization\nWeek 3: Data wrangling\nWeek 4: Sampling distribution\nWeek 5: Hypothesis testing\nWeek 6: Exam 1 review\nWeek 7: Model specification\nWeek 8: Model fitting\nWeek 9: Model accuracy\nWeek 10: Model reliability\nWeek 11: Classification\nWeek 12: Inference\nWeek 13: Exam 2 review\nWeeK 15: Multilevel Models",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#problem-sets",
    "href": "index.html#problem-sets",
    "title": "Data Science for studying language and the mind",
    "section": "3.2 Problem sets",
    "text": "3.2 Problem sets\nThere are 6 problem sets, due to Gradescope by noon on the following Mondays. You may request an extension of up to 3 days for any reason. After solutions are posted, late problem sets can still be submitted for half credit (50%). If you submit all 6 problem sets, we will drop your lowest.\n\nProblem set 1 due Sep 9\nProblem set 2 due Sep 23\nProblem set 3 due Oct 14\nProblem set 4 due Oct 28\nProblem set 5 due Nov 11\nProblem set 6 due Dec 9",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#exams",
    "href": "index.html#exams",
    "title": "Data Science for studying language and the mind",
    "section": "3.3 Exams",
    "text": "3.3 Exams\nThere are 2 midterm exams, taken in class on the following dates. Exams cannot be rescheduled, except in cases of genuine conflict or emergency (documentation and a Course Action Notice are required). However, you can submit any missed exam by the end of the semester for half credit (50%). You may also replace your lowest midterm exam score with the optional final exam.\n\nExam 1 in class Tuesday Oct 1\nExam 2 in class Thursday Nov 21\nFinal exam (optional) TBD",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#lab-exercises",
    "href": "index.html#lab-exercises",
    "title": "Data Science for studying language and the mind",
    "section": "3.4 Lab exercises",
    "text": "3.4 Lab exercises\nLab exercises are intended for practice and are not graded.\n\nLab 1 on Aug 29 or 30\nLab 2 on Sep 5 or 6\nLab 3 on Sep 12 or 13\nLab 4 on Sep 19 or 20\nLab 5 on Oct 10 or 11\nLab 6 on Oct 17 or 18\nLab 7 on Oct 24 or 25\nLab 8 on Nov 1 or 2\nLab 9 on Nov 8 or 9\nLab 10 on Dec 5 or 6",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "webexercises.html",
    "href": "webexercises.html",
    "title": "Webexercises",
    "section": "",
    "text": "This is a Web Exercise template created by the psychology teaching team at the University of Glasgow, based on ideas from Software Carpentry. This template shows how instructors can easily create interactive web documents that students can use in self-guided learning.\nThe {webexercises} package provides a number of functions that you use in inline R code or through code chunk options to create HTML widgets (text boxes, pull down menus, buttons that reveal hidden content). Examples are given below. Render this file to HTML to see how it works.\nNOTE: To use the widgets in the compiled HTML file, you need to have a JavaScript-enabled browser."
  },
  {
    "objectID": "webexercises.html#example-questions",
    "href": "webexercises.html#example-questions",
    "title": "Webexercises",
    "section": "1 Example Questions",
    "text": "1 Example Questions\n\n1.1 Fill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 36 is: \n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\n\n1.2 Multiple Choice (mcq())\n\n“Never gonna give you up, never gonna: let you goturn you downrun awaylet you down”\n“I bless the rainsguess it rainssense the rain down in Africa” -Toto\n\n\n\n1.3 True or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). TRUEFALSE\n\n\n\n1.4 Longer MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n 95% of the data fall within this range if you repeated the process many times, 95% of intervals calculated in this way contain the true mean there is a 95% probability that the true mean lies within this range"
  },
  {
    "objectID": "webexercises.html#checked-sections",
    "href": "webexercises.html#checked-sections",
    "title": "Webexercises",
    "section": "2 Checked sections",
    "text": "2 Checked sections\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion"
  },
  {
    "objectID": "webexercises.html#hidden-solutions-and-hints",
    "href": "webexercises.html#hidden-solutions-and-hints",
    "title": "Webexercises",
    "section": "3 Hidden solutions and hints",
    "text": "3 Hidden solutions and hints\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  },
  {
    "objectID": "labs/lab-01.html",
    "href": "labs/lab-01.html",
    "title": "Lab 1: Getting started with R",
    "section": "",
    "text": "To learn to program in R (or any language), you can read about how to do it, and watch someone else do it; but the only way to really learn is to do it yourself. Create some data structures, try some stuff, and see what happens! Here are some practice quiz questions to guide your learning. We will go over the solutions to these in lab.\n\n1 Materials from lab\n\nBrittany’s lab slides\nWesley’s lab slides\n\n\n\n\n2 Google Colab\n\nTrue or false? We can start a new R notebook in Google Colab with File &gt; New notebook\n\n True True, but we need to change the Runtime environment too False\n\nFor problem sets, how will you submit your colab notebook for grading?\n\n File &gt; Download &gt; Download .ipynb, then upload to Gradescope File &gt; Download &gt; Download .ipynb, then upload to Canvas File &gt; Download &gt; Download .py, then upload to Gradescope File &gt; Download &gt; Download .py, then upload to Canvas\n\nWhat version of R is Google Colab running? Hint: use sessionInfo().\n\nWhat is the relationship between R and Google Colab?\n\n R is a programming language. Google Colab is a smaller, specific version of R. R is a programming language. Google Colab is a development environment where you can run R R and Google Colab are both programming languages. R is a paid (proprietary) programming language. Google Colab is a free service to run R.\n\nWhat happens to files you upload to google colab when the Runtime environment is restarted?\n\n They are saved in your google drive. They are saved in Google Colab's cloud for future use They are deleted They are stored for 7 business days, then deleted.\n\n\n\n\n3 R Basics\n\nWhich of the following are expressions?\n\n 10 5 + 10 x &lt;- 5 + 10 x &lt;- y + 10 mean(x)\n\nWhich of the following are valid variable names in R?\n\n childAge response_time 1stPlaceWinner 2fast2furious pi\n\nSuppose we open a new colab notebook and run the following code block. What will be returned?\nx &lt;- 1 + 2\ny &lt;- 0 + 3\nls()\n\n 3 x=3 • y=3 'x' • 'y'  mean(c(1,3,5)) • median(c(1,3,5))\n\nWhich of the following will load the emo package into the current environment?\n\n install.packages('emo') library(emo) data(emo) attributes(emo)\n\nWhich of the following occur in the code block below?\n# compute the mean of x and y\nmean(c(x,y))\n\n a message a function a comment an expression\n\n\n\n\n4 Vectors\n\nWhich of the following returns the vector 20 22 24 26\n\n 20:26 seq(from=20, to=26, by =2) rep(c(20, 22, 24, 26), times = 4) c(20, 22, 24, 26)\n\nSuppose we construct a vector with c(1, \"two\", 3, 4, 5, 6) and assign it to x. What will the following code block return?\ntypeof(x)\n\nWhat is the previous question an example of?\n\n attribute addition explicit coercion implicit coercion none of the above\n\nWhat will the following code block return?\nx &lt;- 1:4\ny &lt;- matrix(x, ncol=2, nrow=2)\ntypeof(y)\n\nWhat will the following code block return?\nx &lt;- c()\nlength(x)\n\nGiven the following output from str(x), what will as.logical(x) return?\n::: {.cell} ::: {.cell-output .cell-output-stdout}\n num [1:4] 1 0 1 0\n::: :::\n\n an error TRUE • FALSE • TRUE • FALSE FALSE FALSE • TRUE • FALSE • TRUE\n\nGiven the following vector, what will as.double(x) return?\nx &lt;- c(\"one\", \"two\", \"three\")\n\n an error 1 • 2 • 3 2 • 4 • 6 'one' • 'two' • 'three'\n\nWhat happens if you add a vector of numbers to a single number in the following expression?\nc(1, 3, 5) + 1\n\n 2 • 3 • 5 Error: length mismatch 1 • 3 • 5 • 1 2 • 4 • 6\n\nWhat happens if you multiply a vector times another vector?\nc(1, 3, 5) * c(10, 100, 1000)\n\n 10 • 300 • 5000 Error: length mismatch 10 • 30 • 50 • 100 • 300 • 500 • 1000 • 3000 • 5000 a 2 x 3 matrix Error: cannot multiply vectors\n\nSuppose we run the following code. What will any(x) return?\nx &lt;- c(1, 5, 11) &gt; 10\n\n TRUE FALSE Error: vector is double but requires logical\n\n\n\n\n5 Subsetting\n\nWhich of the following code subsets the vector x &lt;- c(\"blue\", \"pink\", \"red\") to return just the first element?\n\n x[1] x[[1]] x[0] x[-c(2, 3)] x[“blue”]\n\nSuppose we run the following code. What will x[[2]] return?\nx &lt;- seq(from = 2, to =8, by=2)\n\nSuppose we run the following code. What will m[1, 2] return?\nm &lt;- matrix(c(10,20,30,40), nrow=2, ncol=2)\n\nSuppose we run the following code. What will df$y[4] return?\ndf &lt;- data.frame(\n    x = c(2, 4, 6, 8), \n    y = c(\"l\", \"m\", \"n\", \"o\")\n)\n\n\n\n\n6 Missing Values\n\nSuppose we run the following code. What will is.na(y) return?\n\ny &lt;- c(25, 25, NA, 36)\n\n 3 Error: Non-atomic vector is invalid type TRUE FALSE FALSE TRUE FALSE\n\nSuppose we run the following code. What will is.null(y) return?\ny &lt;- c()\n\nSuppose we run the following code. What will mean(y) return?\ny &lt;- c()"
  },
  {
    "objectID": "psets/pset-01.html",
    "href": "psets/pset-01.html",
    "title": "Problem set 1",
    "section": "",
    "text": "Load the tidyverse package library into Google Colab."
  },
  {
    "objectID": "psets/pset-01.html#problem-1",
    "href": "psets/pset-01.html#problem-1",
    "title": "Problem set 1",
    "section": "",
    "text": "Load the tidyverse package library into Google Colab."
  },
  {
    "objectID": "psets/pset-01.html#problem-1-1",
    "href": "psets/pset-01.html#problem-1-1",
    "title": "Problem set 1",
    "section": "Problem 1",
    "text": "Problem 1\n\ndone\n\nSuppose you track the number of hours you spend studying each day for a week. You store your data in a vector called study_hours_stringy. Convert the study_hours_stringy vector from strings to doubles using explicit coercion and store it as study_hours. Use R’s built-in functions to compute the total number of hours you studied that week, the average number of hours studied per day, and the median number of hours studied on a single day. Store the results in a tibble with columns named Total_Hours, Average_Hours, and Median_Hours. Perform a comparison operation on the study_hours vector to determine whether each day’s study hours were below the median. Finally, use subsetting to extract the days where the number of hours studied was exactly 2 or 4."
  },
  {
    "objectID": "psets/pset-01.html#problem-2",
    "href": "psets/pset-01.html#problem-2",
    "title": "Problem set 1",
    "section": "Problem 2",
    "text": "Problem 2\nCreate the matrix given below. Use one of R’s built-in functions to append a new row to the matrix made up of all 1s. Multiply every number in the new matrix by 5. Then use subsetting to return the second and fourth row of values in the final matrix.\n\n\n     [,1] [,2] [,3]\n[1,]    3    6    9\n[2,]    4    7   10\n[3,]    5    8   11"
  },
  {
    "objectID": "psets/pset-01.html#problem-3",
    "href": "psets/pset-01.html#problem-3",
    "title": "Problem set 1",
    "section": "Problem 3",
    "text": "Problem 3\nCreate a data frame that looks like the one below. Return the structure of the dataframe with str(). Use subsetting to select all columns that were indicated as doubles. Compute the mean of each column in the subset dataframe using map_*() and convert the output to a tibble (use the pipe!).\n\n\n  age height  major score firstgen\n1  30     65 cogsci   100     TRUE\n2  45     66   ling    75    FALSE\n3  81     72  psych    88     TRUE\n4  27     59   ling    97    FALSE"
  },
  {
    "objectID": "psets/pset-01.html#problem-4",
    "href": "psets/pset-01.html#problem-4",
    "title": "Problem set 1",
    "section": "Problem 4",
    "text": "Problem 4\nRead the documentation for the emo package. Install and load the package. Then create a character vector including 8 of your favorite emojis by their keyword (see the docs for a list). Finally, use the package’s emo::ji() function in conjunction with map_*() to print all 8 emojis with one line of code. Combine this output with your keyword vector in a tibble."
  },
  {
    "objectID": "psets/pset-01.html#problem-5",
    "href": "psets/pset-01.html#problem-5",
    "title": "Problem set 1",
    "section": "Problem 5",
    "text": "Problem 5\nSuppose you extend your experiment: you decide to record the number of words your quiet roommate says to you every day for the entire semester. Import the file below from the given url, ensuring that week is an integer vector, words spoken is a double, and all column names are valid variable names in R. Take care to use the approaches we discussed in lecture to identify and handle any issues. Use glimpse to show the resulting tibble. Finally, use these data to recreate (as faithfully as possible) the figure below.\n\"https://kathrynschuler.com/datasets/quiet_roommate.csv\""
  },
  {
    "objectID": "psets/pset-01.html#problem-6",
    "href": "psets/pset-01.html#problem-6",
    "title": "Problem set 1",
    "section": "Problem 6",
    "text": "Problem 6\nProblem 6 makes use of the english dataset in the languageR package. From the documentation:\n\nThis data set gives mean visual lexical decision latencies and word naming latencies to 2284 monomorphemic English nouns and verbs, averaged for old and young subjects, with various predictor variables.\n\nInstall and load the languageR library. Convert the english dataset to a tibble, then use glimpse to show the result. Finally, use the RTlexdec, Familiarity, and AgeSubjects columns to recreate (as faithfully as possible) the figure below."
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "1 Archive",
    "section": "",
    "text": "1 Archive\nCourse materials for past semesters can be found below:\n\nFall 2023\nSpring 2023"
  },
  {
    "objectID": "slides/hello-world.html#paperwork",
    "href": "slides/hello-world.html#paperwork",
    "title": "Week 1: R Basics",
    "section": "Paperwork",
    "text": "Paperwork\n\nWhen you arrive, complete this anonymous form: Who’s in class\nYou can also join the waitlist if you are not enrolled"
  },
  {
    "objectID": "slides/hello-world.html#announcements",
    "href": "slides/hello-world.html#announcements",
    "title": "Week 1: R Basics",
    "section": "Announcements",
    "text": "Announcements\n\nThe course is full and the room is full\nWays to join:\n\nWatch for an opening (highest odds of getting in)\nAdd your name to our waitlist"
  },
  {
    "objectID": "slides/hello-world.html#course-description",
    "href": "slides/hello-world.html#course-description",
    "title": "Week 1: R Basics",
    "section": "Course description",
    "text": "Course description\nData Sci for Lang & Mind is an entry-level course designed to teach basic principles of statistics and data science to students with little or no background in statistics or computer science. Students will learn to identify patterns in data using visualizations and descriptive statistics; make predictions from data using machine learning and optimization; and quantify the certainty of their predictions using statistical models. This course aims to help students build a foundation of critical thinking and computational skills that will allow them to work with data in all fields related to the study of the mind (e.g. linguistics, psychology, philosophy, cognitive science, neuroscience)."
  },
  {
    "objectID": "slides/hello-world.html#prerequisites",
    "href": "slides/hello-world.html#prerequisites",
    "title": "Week 1: R Basics",
    "section": "Prerequisites",
    "text": "Prerequisites\nThere are no prerequisites beyond high school algebra. No prior programming or statistics experience is necessary, though you will still enjoy this course if you already have a little. Students who have taken several computer science or statistics classes should look for a more advanced course."
  },
  {
    "objectID": "slides/hello-world.html#teaching-team",
    "href": "slides/hello-world.html#teaching-team",
    "title": "Week 1: R Basics",
    "section": "Teaching team",
    "text": "Teaching team\nInstructor: Dr. Katie Schuler (she/her)\nTAs:\n\nBrittany Zykoski\nWesley Lincoln"
  },
  {
    "objectID": "slides/hello-world.html#about-me-your-instructor-katie",
    "href": "slides/hello-world.html#about-me-your-instructor-katie",
    "title": "Week 1: R Basics",
    "section": "About me, your instructor (Katie)",
    "text": "About me, your instructor (Katie)\n\nYou can call me Professor Schuler or Katie, whichever makes you more comfortable\nI live in Mt Airy with my husband and two kids (Dory, 2 and Joan, 6)\nAt Penn I also have a research lab, the Child Language Lab and am on the Natural Science and Math Panel (a group focused on improving inclusive teaching in STEM at Penn).\nI’m a first-generation college student from Western NY. I worked 40 hours a week to put myself through college; I am still paying off my student loans."
  },
  {
    "objectID": "slides/hello-world.html#my-assumptions-about-you",
    "href": "slides/hello-world.html#my-assumptions-about-you",
    "title": "Week 1: R Basics",
    "section": "My assumptions about you",
    "text": "My assumptions about you\nYou are an honest, kind, and hardworking student who wants to do well in and enjoy this class\n\nYou are very busy, and will sometimes have to prioritize other things above this class."
  },
  {
    "objectID": "slides/hello-world.html#data-science",
    "href": "slides/hello-world.html#data-science",
    "title": "Week 1: R Basics",
    "section": "Data science",
    "text": "Data science\nData science is about making decisions based on incomplete information.\n\n\n\n\n\n\n\nFigure 1: from Kok & de Lange (2014)\n\n\n\nThis concept is not new. Brains were built for doing this!"
  },
  {
    "objectID": "slides/hello-world.html#but-we-have-new-tools-and-lots-more-data",
    "href": "slides/hello-world.html#but-we-have-new-tools-and-lots-more-data",
    "title": "Week 1: R Basics",
    "section": "But we have new tools and lots more data!",
    "text": "But we have new tools and lots more data!\n\n\n\n\n\n\n\nFigure 2: from https://web-assets.domo.com/miyagi/images/product/product-feature-22-data-never-sleeps-10.png"
  },
  {
    "objectID": "slides/hello-world.html#data-science-workflow",
    "href": "slides/hello-world.html#data-science-workflow",
    "title": "Week 1: R Basics",
    "section": "Data science workflow",
    "text": "Data science workflow\nThe folks who wrote R for Data Science proposed the following data science workflow:\n\n\n\n\n\n\n\nFigure 3: from R for Data Science"
  },
  {
    "objectID": "slides/hello-world.html#overview-of-course",
    "href": "slides/hello-world.html#overview-of-course",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nWe will spend the first few weeks getting comfortable programming in R, including some useful skills for data science:\n\nR basics\nData visualization\nData wrangling (import, tidy, and transform)"
  },
  {
    "objectID": "slides/hello-world.html#overview-of-course-1",
    "href": "slides/hello-world.html#overview-of-course-1",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nThen, we will spend the next several weeks building a foundation in basic statistics and model building:\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability"
  },
  {
    "objectID": "slides/hello-world.html#overview-of-course-2",
    "href": "slides/hello-world.html#overview-of-course-2",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nFinally we will cover a selection of more advanced topics that are often applied in language and mind fields, with a focus on basic understanding:\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "slides/hello-world.html#syllabus-briefly",
    "href": "slides/hello-world.html#syllabus-briefly",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nEach week will include two lectures and a lab:\n\nLectures are on Tuesdays and Thursdays at 12pm and will be a mix of conceptual overviews and R tutorials. It is a good idea to bring your laptop so you can follow along and try stuff in R!\nLabs are on Thursday or Friday and will consist of (ungraded) practice problems and concept review with TAs. You may attend any lab section that works for your schedule."
  },
  {
    "objectID": "slides/hello-world.html#syllabus-briefly-1",
    "href": "slides/hello-world.html#syllabus-briefly-1",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nThere are 8 graded assessments:\n\n6 Problem sets (40%) in which you will be asked to apply your newly aquired R programming skills.\n2 Midterm exams (60%) in which you will be tested on your understanding of lecture concepts."
  },
  {
    "objectID": "slides/hello-world.html#syllabus-briefly-2",
    "href": "slides/hello-world.html#syllabus-briefly-2",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nThere are a few policies to take note of:\n\nMissed exams cannot be made up except in cases of genuine conflict or emergency (documentation and course action notice required). You may take the optional final exam to replace a missed or low scoring exam.\nYou may request an extension on any problem set of up to 3 days. But extensions beyond 3 days will not be granted (because delying solutions will negative impact other students).\nYou may submit any missed quiz or problem set by the end of the semester for half-credit (50%), even after solutions are posted.\nWe will drop your lowest pset grade, but you must turn in all 6 assignements to be eligible."
  },
  {
    "objectID": "slides/hello-world.html#resources",
    "href": "slides/hello-world.html#resources",
    "title": "Week 1: R Basics",
    "section": "Resources",
    "text": "Resources\nIn addition to our course website, we will use the following:\n\ngoogle colab (r kernel) - for computing\ncanvas- for posting grades\ngradescope - for submitting problem sets\ned discussion - for announcements and questions"
  },
  {
    "objectID": "slides/hello-world.html#wellness-resources",
    "href": "slides/hello-world.html#wellness-resources",
    "title": "Week 1: R Basics",
    "section": "Wellness resources",
    "text": "Wellness resources\nPlease consider using these Penn resources this semester:\n\nWeingarten Center for academic support and tutoring.\nWellness at Penn for health and wellbeing."
  },
  {
    "objectID": "slides/hello-world.html#why-r",
    "href": "slides/hello-world.html#why-r",
    "title": "Week 1: R Basics",
    "section": "Why R?",
    "text": "Why R?\nWith many programming languages available for data science (e.g. R, Python, Julia, MATLAB), why use R?\n\nBuilt for stats, specifically\nMakes nice visualizations\nLots of people are doing it, especially in academia\nEasier for beginners to understand\nFree and open source (though so are Python and Julia, MATLAB costs $)"
  },
  {
    "objectID": "slides/hello-world.html#many-ways-to-use-r",
    "href": "slides/hello-world.html#many-ways-to-use-r",
    "title": "Week 1: R Basics",
    "section": "Many ways to use R",
    "text": "Many ways to use R\n\nR Studio\nJupyter\nVS Code\nand even simply the command line/terminal"
  },
  {
    "objectID": "slides/hello-world.html#google-colab",
    "href": "slides/hello-world.html#google-colab",
    "title": "Week 1: R Basics",
    "section": "Google Colab",
    "text": "Google Colab\n\nGoogle Colab is a cloud-based Jupyter notebook that allows you to write, execute, and share code like a google doc.\nWe use Google Colab because it’s simple and accessible to everyone. You can start programming right away, no setup required!"
  },
  {
    "objectID": "slides/hello-world.html#secretly-r",
    "href": "slides/hello-world.html#secretly-r",
    "title": "Week 1: R Basics",
    "section": "Secretly, R!",
    "text": "Secretly, R!\nGoogle Colab officially supports Python, but secretly supports R (and Julia, too!)\n\nUpdate 2024: Google Colab now officially supports R!\ncolab (r kernel)"
  },
  {
    "objectID": "slides/hello-world.html#open-a-new-r-notebook",
    "href": "slides/hello-world.html#open-a-new-r-notebook",
    "title": "Week 1: R Basics",
    "section": "Open a new R notebook:",
    "text": "Open a new R notebook:\n\ncolab (r kernel) - use this link to start a new R notebook\nFile &gt; New notebook and then Runtime &gt; Change runtime type to R"
  },
  {
    "objectID": "slides/hello-world.html#cell-types",
    "href": "slides/hello-world.html#cell-types",
    "title": "Week 1: R Basics",
    "section": "Cell types:",
    "text": "Cell types:\n\n+ Code - write and execute code\n+ Text - write text blocks in markdown"
  },
  {
    "objectID": "slides/hello-world.html#left-sidebar",
    "href": "slides/hello-world.html#left-sidebar",
    "title": "Week 1: R Basics",
    "section": "Left sidebar:",
    "text": "Left sidebar:\n\nTable of contents - outline from text headings\nFind and replace - find and/or replace\nFiles - upload files to cloud session"
  },
  {
    "objectID": "slides/hello-world.html#frequently-used-menu-options",
    "href": "slides/hello-world.html#frequently-used-menu-options",
    "title": "Week 1: R Basics",
    "section": "Frequently used menu options:",
    "text": "Frequently used menu options:\n\nFile &gt; Locate in Drive - where in your Google Drive?\nFile &gt; Save - saves\nFile &gt; Revision history - history of changes you made\nFile &gt; Download &gt; Download .ipynb - used to submit assignments!\nFile &gt; Print - prints\nRuntime &gt; Run all - run all cells\nRuntime &gt; Run before - run all cells before current active cell\nRuntime &gt; Restart and run all - restart runtime, then run all"
  },
  {
    "objectID": "slides/hello-world.html#frequently-used-keyboard-shortcuts",
    "href": "slides/hello-world.html#frequently-used-keyboard-shortcuts",
    "title": "Week 1: R Basics",
    "section": "Frequently used keyboard shortcuts:",
    "text": "Frequently used keyboard shortcuts:\n\nCmd/Ctrl+S - save\nCmd/Ctrl+Enter - run focused cell\nCmd/Ctrl+Shift+A - select all cells\nCmd/Ctrl+/ - comment/uncomment selection\nCmd/Ctrl+] - increase indent\nCmd/Ctrl+[ - decrease indent"
  },
  {
    "objectID": "slides/hello-world.html#expressions",
    "href": "slides/hello-world.html#expressions",
    "title": "Week 1: R Basics",
    "section": "Expressions",
    "text": "Expressions\n\nExpressions are combinations of values, variables, operators, and functions that can be evaluated to produce a result. Expressions can be as simple as a single value or more complex involving calculations, comparisons, and function calls. They are the fundamental building blocks of programming.\n\n10 - a simple value expression that evaluates to 10.\nx &lt;- 10 - an expression that assigns the value of 10 to x.\nx + 10 - an expression that adds the value of x to 10.\na &lt;- x + 10 - an expression that adds the value of x to 10 and assigns the result to the variable a"
  },
  {
    "objectID": "notes/data-visualization.html",
    "href": "notes/data-visualization.html",
    "title": "Week 2: Data visualization",
    "section": "",
    "text": "Under Construction\n\n\n\nThis page may undergo minor changes"
  },
  {
    "objectID": "notes/data-visualization.html#visualization-with-ggplot2",
    "href": "notes/data-visualization.html#visualization-with-ggplot2",
    "title": "Week 2: Data visualization",
    "section": "1 Visualization with ggplot2",
    "text": "1 Visualization with ggplot2\nThere are many ways to visualize data with R. One great option is ggplot2, one of the core pacakges in the tidyverse.\n\nggplot2 makes use of a system for describing and creating graphics known as the layered grammar of graphics\nlearning this one simple system allows you to generate many different types of plots\n\nTo create a plot with ggplot2, you call the function ggplot(), which creates a plot object Then you add layers to the object. There are 3 basic requirements for every ggplot:\n\ndata - what dataset are you ploting? Including only data generates an empty canvas\naesthetics - define how variables in your dataset are mapped to visual properties in the plot\ngeoms - determine the geometrical object that a plot uses to represent the data\n\nWe can think of the following as a basic template for any ggplot:\nggplot(\n    data = &lt;DATA&gt;,\n    mapping = aes(&lt;MAPPINGS&gt;)\n) + \n &lt;GEOM_FUNCTION&gt;\nOne common warning you will encounter is about missing values. ggplot2 will always let you know that some of your data could not be plotted in the way you specified. Usually this is good to know, but nothing to worry about:\n\nRemoved n rows containing missing values\n\nWe won’t cover everything you can do with ggplot2 (that would be a lot!) In lecture we’ll demo the most common features, but you should feel comfortable using ggplot2’s function reference to figure out how to do other things."
  },
  {
    "objectID": "notes/data-visualization.html#aesthetics",
    "href": "notes/data-visualization.html#aesthetics",
    "title": "Week 2: Data visualization",
    "section": "2 Aesthetics",
    "text": "2 Aesthetics\nThere are two ways we can determine the aesthetics of a plot:\n\nmapping allows us to determine aesthetics based on a variable, which are passed as arguments. e.g. mapping=aes(color=var).\nsetting allows us to set aesthetics to a constant value, which are passed as their own argument e.g. color=var\n\nWhen we map categorical variables to aesthetics, ggplot2 assigns a unique value of the aesthetic to each unique value of the variable.\n\nThis process is known as scaling; we can override the scale ggplot2 selected by adding a scales layer.\nggplot2 also automatically creates a legend to describe the mapping for us (except for x and y aesthetics, where ggplot2 simply creates the axis – no legend is necessary).\n\nWhen we set aesthetics, we must select the value for the aesthetic manually.\n\ncolor and fill - set name of a color as a string, e.g. color=\"blue\"\nalpha - set value between 0 and 1, where 0 is most transparent, e.g. alpha=0.5\nsize - set size of point in mm, e.g. size=1\nshape - set shape of point as a number 1-25, e.g. shape=1. There are 25 built in shapes (see below)\nlinetype - a name of “blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”, e.g. linetype=\"dotted\"\n\n\n\n\n\n\n\nFigure 1: from R4DS’s figure 10.1 showing the available shapes\n\n\n\nThere are 3 common warnings people encounter when mapping categorical variables\n\n\nThe shape palette can deal with a maximum of 6 discrete values\nRemoved n rows containing missing values\nUsing alpha for a discrete value is not advised.\n\n\n\nThe first two happen when mapping shape, because by default ggplot2 will use no more than 6 shapes at a time (and any additional levels are discarded)\nThe last one happens when mapping size or alpha, because it is strange to map an unordered categorical variable to an ordered aesthetic. Size and alpha imply there is some ranking but there is none!"
  },
  {
    "objectID": "notes/data-visualization.html#geoms",
    "href": "notes/data-visualization.html#geoms",
    "title": "Week 2: Data visualization",
    "section": "3 Geoms",
    "text": "3 Geoms\nGeoms are the geometric objects used to represent the data in your plot. To change the geom, simply change the geom function\n\ngeom_histogram() - histogram, distribution of a continuous variable\ngeom_density() - distribution of a continuous variable\ngeom_bar()- distribution of categorical data\ngeom_point() - scatterplot\ngeom_smooth() - smoothed line of best fit\nAll available geoms\n\nMapping and data: Every geom function takes a mapping argument and a data argument, both can be defined either globally in the ggplot() layer or locally in the geom layer. When defining mappings or data locally in the geom layer, remember:\n\nthey are local, meaning they only apply to that specific layer\nthey will extend or override any global mappings or data you specified in ggplot()\nthey (usefully!) allow you to specify different aesthetics or data in different layers\n\nPosition: Every geom also takes a position argument, which adjusts the position of the geom. We will encounter this most often in geom_bar() and geom_point():\n\nFor geom_bar(), the default position is stacked, e.g. position=\"stacked\", but there are 3 other options: (1) dodge would place overlapping bars next to each other, (2) fill would make each set of stacked bars the same height (a relative frequency plot), (3) identity would make the bars overlapping (which isn’t very useful – we’d only see the tallest one!)\nFor geom_point(), set position=\"jitter\" to add a small amount of random noise to each point, which speads them out! Technically makes your plot less accurate, but can also reveal important information. (geom_jitter() is shorthand for geom_point(position=\"jitter\"))\n\nStat: All geoms also take a stat argument, which is short for statistical transformation. Many geoms have stat=\"identity\" as their default argument, which means they plot the raw (untransformed) data from your dataset (geom_point() is one of them!). But some geoms do calculate new values to plot by default. For example:\n\ngeom_bar() and geom_histogram() bin the data and plot the bin counts (the number of points that fall in each bin) by default\ngeom_smooth() fits a model to your data and plots the prediction from the model\ngeom_boxplot() computes the five-number summary of the distribution (more on this next week!) and then display that number as a summary\n\nUsually we use the default stat, so we don’t need to specify it at all. But sometimes when making geom_bar() plots, we want to override the default to stat=\"identity\" to make the height of the bars map to the raw values of a y variable.\nOther geom-specific arguments: Certain geoms make frequent use of other more specific arguments. Two we will encounter often are:\n\nFor geom_smooth(), we set the smoothing method with the method argument, e.g. method=\"lm\"\nFor geom_histogram(), we set the number of bins with the bins argument or the width of the bins with the binwidth argument, e.g. binwidth=30."
  },
  {
    "objectID": "notes/data-visualization.html#other-layers",
    "href": "notes/data-visualization.html#other-layers",
    "title": "Week 2: Data visualization",
    "section": "4 Other layers",
    "text": "4 Other layers\nThere are many other layers that can be specified in ggplot2 to create more complex plots. I find this figure helpful in understanding the layered nature of the grammar of graphics:\n\n\n\n\n\n\nFigure 2: Adapted from The Grammar of Graphics by Leland Wilkinson\n\n\n\nBelow we’ll outline some common uses for the following layers. We demoed most of this in class, but a few of them might be new to you!\n\nfacets - display subsets of data\nlabels - modifies axis, legend and plot labels\nthemes - overall visuals\nscales - map data values to visual values of aestetic\n\n\n4.1 Facets\nFacets are smaller plots that display different subsets of the data. They are often used as an alternative to aesthetics to plot additional categorical variables.\n\nfacet_wrap(~var) - splits a plot into subplots based on a categorical variable; each subplot displays a subset of the data. The ncol argument takes a number and specifies the number of columns.\nfacet_grid(rows~cols) - splits a plot into subplots with the combination of two variables, one as the rows of the facet and one as the columns. To leave off rows (or cols), use the ., e.g. facet_grid(.~species)\nscales - by default facets share the same scale and range for x and y aesthetics. Set the scales argument to “free” to allow for different axis scales, e.g. scales=\"free\"\n\n\n\n4.2 Labels\nThe labs() functions allows you to modify axis, legend, and plot labels. labs() takes several arguments.\nSome are a straightforward name, like:\n\ntitle - plot title\nsubtitle - plot subtitle\ncaption - caption at bottom right of plot\n\nOthers are mapped to aesthetics, like:\n\nx - the x axis label\ny - the y axis label\ncolor - the legend for the color aesthetic\nsize - the legend for the size aesthetic\n\n\n\n4.3 Themes\nggplot2 comes with many complete themes which control how everything is displayed (except data!). A few favorites include:\n\ntheme_gray() - the default\ntheme_bw() - classic dark-on-light theme\ntheme_minimal() - minimal theme with no backgroun annotations\ntheme_classic() - a classic looking theme with no gridelines\n\nThemes take a few arguments, two of which we may use in the class:\n\nbase_size - base font size, given in pts\nbase_family - base font family to use\n\n\n\n4.4 Scales\nScales control the details of how data values are translated to visual properties. Adding a scale layer overrides the default scales that ggplot2 uses automatically. There are many kinds of scales, but we will mostly encounter them when changing colors of things:\n\nscale_color_brewer() - changes the color, allows you to select color palettes from the RColorBrewer package with palette argument, e.g. palette=\"Greens\"\nscale_fill_manual() - also changes the color, set to manual values with values argument, e.g. values=c(\"green\", \"blue\", \"red\")"
  },
  {
    "objectID": "notes/data-visualization.html#shortcuts",
    "href": "notes/data-visualization.html#shortcuts",
    "title": "Week 2: Data visualization",
    "section": "5 Shortcuts",
    "text": "5 Shortcuts\nWhen calling ggplot2 (or any function!) we can specify argument names explicitly or leave them off (implicit). Leaving off the names makes code more conscise, so you’ll typically see it that way.\n\nexplicit naming of arguments allow us to write them in any order (because we indicate them to ggplot2 by their name)\nggplot(\n    data = my_data,\n    mapping = aes(x = weight, y = height)\n)\nimplict argument names means we have to specify them in a perscribed order (data first!) so ggplot2 can identify them without their name\nggplot(\n    my_data,\n    aes(x = weight, y = height)\n)\n\nAnother shortcut you’ll encounter is the pipe operator, %&gt;%. The pipe takes the thing on its left and passes it along to the function on its right (as the function’s first argument)\n\nx %&gt;% y is equivalent to f(x, y)\nsince the first argument to ggplot() is data, you’ll typically see the pipe used like this:\nmy_data %&gt;% \nggplot(\n    aes(x = weight, y = height)\n)"
  },
  {
    "objectID": "notes/data-visualization.html#saving-plots",
    "href": "notes/data-visualization.html#saving-plots",
    "title": "Week 2: Data visualization",
    "section": "6 Saving plots",
    "text": "6 Saving plots\nOften we want to save a plot (to add it to a presentation or paper). We can accomplish this with ggsave().\n# save your most recent plot with the name\nggsave(\"myfigurename.png\")\n\n# specify the width and height; can also specify which units you mean\nggsave(\"myfigurename.png\", width = 4, height = 4)\nggsave(\"mtcars.pdf\", width = 20, height = 20, units = \"cm\")\nIn Google Colab, you can find your saved plot by clicking the file icon on the left side bar."
  },
  {
    "objectID": "notes/data-visualization.html#further-reading",
    "href": "notes/data-visualization.html#further-reading",
    "title": "Week 2: Data visualization",
    "section": "7 Further reading",
    "text": "7 Further reading\nRecommended further reading:\n\nCh 2 Data visualization in R for Data Science\nhttps://moderndive.com/2-viz.html\nCh 10 Layers in R for Data Science\n\nOther useful resources:\n\nggplot2 function reference\nggplot2 cheat sheet\nintroduction to palmerpenguins"
  }
]