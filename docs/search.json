[
  {
    "objectID": "notes/r-basics.html",
    "href": "notes/r-basics.html",
    "title": "Week 1: R basics",
    "section": "",
    "text": "Tuesday: slides and demo\nThursday: slides and demo"
  },
  {
    "objectID": "notes/r-basics.html#what-is-data-science",
    "href": "notes/r-basics.html#what-is-data-science",
    "title": "Week 1: R basics",
    "section": "2.1 What is data science?",
    "text": "2.1 What is data science?\n\nData are descriptions of the world around us, collected through observation and stored on computers. Computers enable us to infer properties of the world from these descriptions. Data science is the discipline of drawing conclusions from data using computation.\n– Computational and Inferential Thinking: The Foundations of Data Science\n\nData science is about making decisions based on incomplete information. This concept is not new – brains (especially human brains!) love doing this. To illustrate, what do you see in the following image?\n\n\n\n\n\n\nFigure 1: from Kok & de Lange (2014)1\n\n\n\nDid you see a gray triangle on top of three circles? Most people do! But it turns out that your brain is filling in the gaps, inferring the presence of a triangle from the partial information available in the black circles 2.\nWhile the underlying concept is not new, the computational tools we use are relatively new. And we have a lot more data!\n\n\n\n\n\n\nFigure 2: from https://web-assets.domo.com/miyagi/images/product/product-feature-22-data-never-sleeps-10.png"
  },
  {
    "objectID": "notes/r-basics.html#data-science-workflow",
    "href": "notes/r-basics.html#data-science-workflow",
    "title": "Week 1: R basics",
    "section": "2.2 Data science workflow",
    "text": "2.2 Data science workflow\nThe folks who wrote R for Data Science proposed the following data science workflow:\n\n\n\n\n\n\nFigure 3: from R for Data Science\n\n\n\nLet’s unpack what these mean briefly:\n\nImport: gather data from a variety of sources, which can include structured data (like databases and spreadsheets) and unstructured data (like text, images, and videos).\nTidy and Transform: The raw data we import is often messy. Data scientists clean and preprocess the data, which involves removing errors, handling missing values, and transforming data into a suitable format for analysis.\nVisualize (exploratory data analysis) visualize and summarize data to identify patterns, form hypotheses, select appropriate models, and guide further analysis.\nModel: Using statistical methods, machine learning algorithms, and other computational techniques, data scientists build models to understand underlying patterns in the data. Models are tested using validation techniques to ensure their accuracy and reliability. Then data scientists use them to draw meaningful conclusions, like predictions about the future or inferences about populuation.\nCommunicate: Finally, a crucial part of data science is communicating findings clearly and effectively, whatever your purpose (academic, industry, or the public!)\nProgram: Surrounding all these is programming, since the computational tools are what make these possible!\n\nData science has applications in many fields far beyond language and the mind. It allows us to make data-driven decisions, solve complex problems, and uncover hidden insights that might not be apparent through other methods."
  },
  {
    "objectID": "notes/r-basics.html#overview-of-the-course",
    "href": "notes/r-basics.html#overview-of-the-course",
    "title": "Week 1: R basics",
    "section": "2.3 Overview of the course",
    "text": "2.3 Overview of the course\nWe will spend the first few weeks getting comfortable programming in R, including some useful skills for data science:\n\nR basics\nData visualization\nData wrangling\n\nThen, we will spend the next several weeks building a foundation in basic statistics and model building:\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability\n\nFinally we will cover a selection of more advanced topics that are often applied in language and mind fields, with a focus on basic understanding:\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "notes/r-basics.html#syllabus-briefly",
    "href": "notes/r-basics.html#syllabus-briefly",
    "title": "Week 1: R basics",
    "section": "2.4 Syllabus, briefly",
    "text": "2.4 Syllabus, briefly\nEach week will include two lectures and a lab:\n\nLectures are on Tuesdays and Thursdays at 12pm and will be a mix of conceptual overviews and R tutorials. It is a good idea to bring your laptop so you can follow along and try stuff in R!\nLabs are on Thursday or Friday and will consist of (ungraded) practice problems and concept review with TAs. You may attend any lab section that works for your schedule.\n\nThere are 8 graded assessments:\n\n6 Problem sets (40%) in which you will be asked to apply your newly aquired R programming skills.\n2 Midterm exams (60%) in which you will be tested on your understanding of lecture concepts.\n\nThere are a few policies to take note of:\n\nMissed exams cannot be made up except in cases of genuine conflict or emergency (documentation and course action notice required). You may take the optional final exam to replace a missed or low scoring exam.\nYou may request an extension on any problem set of up to 3 days. But extensions beyond 3 days will not be granted (because delying solutions will negative impact other students).\nYou may submit any missed quiz or problem set by the end of the semester for half-credit (50%), even after solutions are posted.\nWe will drop your lowest pset grade, but you must turn in all 6 assignements to be eligible."
  },
  {
    "objectID": "notes/r-basics.html#why-r",
    "href": "notes/r-basics.html#why-r",
    "title": "Week 1: R basics",
    "section": "2.5 Why R?",
    "text": "2.5 Why R?\nWith many programming languages available for data science (e.g. R, Python, Julia, MATLAB), why use R?\n\nBuilt for stats, specifically\nMakes nice visualizations\nLots of people are doing it, especially in academia\nEasier for beginners to understand\nFree and open source (though so are Python and Julia, MATLAB costs $)\n\nIf you are interested, here is a math professor’s take on the differences between Python, Julia, and MATLAB. Note that although they’re optimized for different things, they are all great and the technical skills and conceptual knowledge you gain in this course will transfer to other languages."
  },
  {
    "objectID": "notes/r-basics.html#basics",
    "href": "notes/r-basics.html#basics",
    "title": "Week 1: R basics",
    "section": "4.1 Basics",
    "text": "4.1 Basics\nWe begin by defining some basic concepts:\n\nExpressions are combinations of values, variables, operators, and functions that can be evaluated to produce a result. Expressions can be as simple as a single value or more complex involving calculations, comparisons, and function calls. They are the fundamental building blocks of programming.\n\n10 - a simple value expression that evaluates to 10.\nx &lt;- 10 - an expression that assigns the value of 10 to x.\nx + 10 - an expression that adds the value of x to 10.\na &lt;- x + 10 - an expression that adds the value of x to 10 and assigns the result to the variable a\n\nObjects allow us to store various types of data, such as numbers, text, vectors, matrices; and more complex structures like functions and data frames. Objects are created by assigning values to variable names with the assignment operator, &lt;-. For example, in x &lt;- 10, x is an object assigned to the value 10.\nNames that we assign to objects must include only letters, numbers, ., or _. Names must start with a letter (or . if not followed by a number).\nAttributes allow you to attach arbitrary metadata to an object. For example, adding a dim (dimension) attribute to a vector allows it to behave like a matrix or n dimensional array.\nFunctions (or commands) are reusable pieces of code that take some input, preform some task or computation, and return an output. Many functions are built-in to base R (see below!), others can be part of packages or even defined by you. Functions are objects!\nEnvironment is the collection of all the objects (functions, variables etc.) we defined in the current R session.\nPackages are collections of functions, data, and documentation bundled together in R. They enhance R’s capabilities by introducing new functions and specialized data structures. Packages need to be installed and loaded before you can use their functions or data.\nComments are notes you leave to yourself (within code blocks in colab) to document your code; comments are not evaluated.\nMessages are notes R leaves for you, after you run your code. Messages can be simply for-your-information, warnings that something unexpected might happen, or erros if R cannot evaluate your code.\n\nWays to get help when coding in R:\n\nRead package docs - packages usually come with extensive documentation and examples. Reading the docs is one of the best ways to figure things out. Here is an example from the dplyr package.\nRead error messages - read any error messages you receive while coding — they give clues about what is going wrong!\nAsk R - Use R’s built-in functions to get help as you code\nAsk on Ed - ask questions on our class discussion board!\nAsk Google or Stack Overflow - It is a normal and important skill (not cheating) to google things while coding and learning to code! Use keywords and package names to ensure your solutions are course-relevant.\nAsk ChatGPT - You can similarly use ChatGPT or other LLMs as a resource. But keep in mind they may provide a solution that is wrong or not relevant to what we are learning in this course."
  },
  {
    "objectID": "notes/r-basics.html#important-functions",
    "href": "notes/r-basics.html#important-functions",
    "title": "Week 1: R basics",
    "section": "4.2 Important functions",
    "text": "4.2 Important functions\nFor objects:\n\nstr(x) - returns summary of object’s structure\ntypeof(x) - returns object’s data type\nlength(x) - returns object’s length\nattributes(x) - returns list of object’s attributes\nx - returns object x\nprint(x) - prints object x\n\nFor environment:\n\nls() - list all variables in environment\nrm(x) - remove x variable from environment\nrm(list = ls()) - remove all variables from environment\n\nFor packages:\n\ninstall.packages() to install packages\nlibrary() to load the package into your current R session.\ndata() to load data from package into environment\nsessionInfo() - version information for current R session and packages\n\nFor help:\n\n?mean - get help with a function\nhelp('mean') - search help files for word or phrase\nhelp(package='tidyverse') - find help for a package"
  },
  {
    "objectID": "notes/r-basics.html#vectors",
    "href": "notes/r-basics.html#vectors",
    "title": "Week 1: R basics",
    "section": "4.3 Vectors",
    "text": "4.3 Vectors\nOne of the must fundamental data structures in R is the vector. There are two types:\n\natomic vector - elements of the same data type\nlist - elements refer to any object (even complex objects or other lists)\n\nAtomic vectors can be one of six data types:\n\ndouble - real numbers, written in decimal (0.1234) or scientific notation (1.23e4)\n\nnumbers are double by default (3 is stored as 3.00)\nthree special doubles: Inf, -Inf, and NaN (not a number)\n\ninteger - integers, whole numbers followed by L (3L or 1e3L)\ncharacter - strings with single or double quotes (‘hello world!’ or “hello world!”)\nlogical - boolean, written (TRUE or FALSE) or abbreviated (T or F)\ncomplex - complex numbers, where i is the imaginary number (5 + 3i)\nraw - stores raw bytes\n\nTo create atomic vectors:\n\nc(2,4,6) - c() function for combining elements, returns 2 4 6\n2:4 - : notation to construct a sequence of integers, returns 2 3 4\nseq(from = 2, to = 6, by=2) - seq() function to create an evenly-spaced sequence, returns 2 4 6\n\nTo check an object’s data type:\n\ntypeof(x) - returns the data type of object x\nis.*(x) - test if object x is data type, returns TRUE or FALSE\n\nis.double()\nis.integer()\nis.character()\nis.logical()\n\n\nTo change an object to data type (explicit coercion):\n\nas.*(x) - coerce object to data type\n\nas.double()\nas.integer()\nas.character()\nas.logical()\n\n\nNote that atomic vectors must contain only elements of the same type. If you try to include elements of different types, R will coerce them into the same type with no warning (implicit coercion) according to the heirarchy character &gt; double &gt; integer &gt; logical."
  },
  {
    "objectID": "notes/r-basics.html#operations",
    "href": "notes/r-basics.html#operations",
    "title": "Week 1: R basics",
    "section": "4.4 Operations",
    "text": "4.4 Operations\nArithmetic operators:\n\n+ - add\n- - subtract\n* - multiply\n/ - divide\n^ - exponent\n\nComparison operators return true or false:\n\na == b - equal to\na != b - not equal to\na &gt; b - greater than\na &lt; b - less than\na &gt;= b - greater than or equal to\na &lt;= b - less than or equal to\n\nLogical operators combine multiple true or false statements:\n\n& - and\n| - or\n! - not\nany() - returns true if any element meets condition\nall() - returns true if all elements meet condition\n%in% - returns true if any element is in the following vector\n\nMost math operations (and many functions) are vectorized in R:\n\nthey can work on entire vectors, without the need for explicit loops or iteration.\nthis a powerful feature that allows you to write cleaner, more efficient code\nTo illustrate, suppose x &lt;- c(1, 2, 3):\n\nx + 100 returns c(101, 102, 103)\nx == 1 returns c(TRUE, FALSE, FALSE)"
  },
  {
    "objectID": "notes/r-basics.html#more-complex-structures",
    "href": "notes/r-basics.html#more-complex-structures",
    "title": "Week 1: R basics",
    "section": "4.5 More complex structures",
    "text": "4.5 More complex structures\nSome more complex data structures are built from atomic vectors by adding attributes:\n\nmatrix - a vector with a dim attribute representing 2 dimensions\narray - a vector with a dim attribute representing n dimensions\nfactor - an integer vector with two attributes: class=\"factor\" and levels, which defines the set of allowed values (useful for categorical data)\ndate-time - a double vector where the value is the number of seconds since Jan 01, 1970 and a tzone attribute representing the time zone\ndata.frame - a named list of vectors (of equal length) with attributes for names (column names), row.names, and class=\"data.frame\" (used to represent datasets)\n\nTo create more complex structures:\n\nlist(x=c(1,2,3), y=c('a','b')) - create a list\nmatrix(x, nrow=2, ncol=2) - create a matrix from a vector x with nrow and ncol\narray(x, dim=c(2,3,2)) - create an array from a vector x with dimensions\nfactor(x, levels=unique(x)) - turn a vector x into a factor\ndata.frame(x=c(1,2,3), y=c('a','b','c')) - create a data frame\n\nMissing elements and empty vectors:\n\nNA- used to represent missing or unknown elements in vectors. Note that NA is contageous: expressions including NA usually return NA. Check for NA values with is.na().\nNULL - used to represent an empty or absent vector of arbitrary type. NULL is its own special type and always has length zero and NULL attributes. Check for NULL values with is.null()."
  },
  {
    "objectID": "notes/r-basics.html#subsetting",
    "href": "notes/r-basics.html#subsetting",
    "title": "Week 1: R basics",
    "section": "4.6 Subsetting",
    "text": "4.6 Subsetting\n\nSubsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that you’re interested in. ~ Hadley Wickham, Advanced R\n\nThere are three operators for subsetting objects:\n\n[ - subsets (one or more) elements\n[[ and $ - extracts a single element\n\nThere are six ways to subset multiple elements from vectors with [:\n\nx[c(1,2)] - positive integers select elements at specified indexes\nx[-c(1,2)] - negative integers select all but elements at specified indexes\nx[c(\"name\", \"name2\")] select elements by name, if elements are named\nx[] - nothing returns the original object\nx[0] - zero returns a zero-length vector\nx[c(TRUE, TRUE)] - select elements where corresponding logical value is TRUE\n\nThese also apply when selecting multiple elements from higher dimensional objects (matrix, array, data frame), but note that:\n\nindexes for different dimensions are separated by commas [rows, columns, ...]\nomitted dimensions return all values along that dimension\nthe result is simplified to the lowest possible dimensions by default\ndata frames can also be indexed like a vector (selects columns)\n\nThere are 3 ways to extract a single element from any data structure:\n\n[[2]] - a single positive integer (index)\n[['name']] - a single string\nx$name - the $ operator is a useful shorthand for [['name']]\n\nWhen extracting single elements, note that:\n\n[[ is preferred for atomic vectors for clarity (though[ also works)\n$ does partial matching without warning; use options(warnPartialMatchDollar=TRUE)\nthe behavior for invalid indexes is inconsistent: sometimes you’ll get an error message, and sometimes it will return NULL"
  },
  {
    "objectID": "notes/r-basics.html#built-in-functions",
    "href": "notes/r-basics.html#built-in-functions",
    "title": "Week 1: R basics",
    "section": "4.7 Built-in functions",
    "text": "4.7 Built-in functions\nNote that you do not need to memorize these built-in functions to be successful on quizzes. Use this as a reference.\nFor basic math:\n\nlog(x) - natural log\nexp(x) - exponential\nsqrt(x) - square root\nabs(x) - absolute value\nmax(x) - largest element\nmin(x) - smallest element\nround(x, n) - round to n decimal places\nsignif(x, n) - round to n significant figures\nsum(x) - add all elements\n\nFor stats:\n\nmean(x) - mean\nmedian(x) - median\nsd(x) - standard deviation\nvar(x) - variance\nquantile(x) - percentage quantiles\nrank(x) - rank of elements\ncor(x, y) - correlation\nlm(x ~ y, data=df) - fit a linear model\nglm(x ~ y, data=df) - fit a generalized linear model\nsummary(x) - get more detailed information from a fitted model\naov(x) - analysis of variance\n\nFor vectors:\n\nsort(x) - return sorted vector\ntable(x) - see counts of values in a vector\nrev(x) - return reversed vector\nunique(x) - return unique values in a vector\narray(x, dim) - transform vector into n-dimensional array\n\nFor matrices:\n\nt(m) - transpose matrix\nm %+% n - matrix multiplication\nsolve(m, n) - find x in m * x = n\n\nFor data frames:\n\nview(df) - see the full data frame\nhead(df) - see the first 6 rows of data frame\nnrow(df) - number of rows in a data frame\nncol(df) - number of columns in a data frame\ndim(df) - number of rows and columns in a data frame\ncbind(df1, df2) - bind dataframe columns\nrbind(df1, df2) - bind dataframe rows\n\nFor strings:\n\npaste(x, y, sep=' ') - join vectors together element-wise\ntoupper(x) - convert to uppercase\ntolower(x) - convert to lowercase\nnchar(x) - number of characters in a string\n\nFor simple plotting:\n\nplot(x) values of x in order\nplot(x, y) - values of x against y\nhist(x) - histogram of x"
  },
  {
    "objectID": "notes/r-basics.html#programming-in-r",
    "href": "notes/r-basics.html#programming-in-r",
    "title": "Week 1: R basics",
    "section": "4.8 Programming in R",
    "text": "4.8 Programming in R\nWriting functions and handling control flow are important aspects of learning to program in any language. For our purposes, some general conceptual knowledge on these topics is sufficient (see below). Those interested to learn more might enjoy the book Hands-On Programming with R.\n\nFunctions are reusable pieces of code that take some input, perform some task or computation, and return an output.\nfunction(inputs){\n    ## do something\n    return(output)\n}\nControl flow refers to managing the order in which expressions are executed in a program:\n\nif…else - if something is true, do this; otherwise do that\nfor loops - repeat code a specific number of times\nwhile loops - repeat code as long as certain conditions are true\nbreak - exit a loop early\nnext - skip to next iteration in a loop"
  },
  {
    "objectID": "notes/r-basics.html#footnotes",
    "href": "notes/r-basics.html#footnotes",
    "title": "Week 1: R basics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nKok, P., & de Lange, F. P. (2014). Shape perception simultaneously up-and downregulates neural activity in the primary visual cortex. Current Biology, 24(13), 1531-1535.↩︎\nhttps://neurosciencenews.com/neuroimaging-visual-processing-fmri-1150/↩︎"
  },
  {
    "objectID": "slides/r-basics.html#announcements",
    "href": "slides/r-basics.html#announcements",
    "title": "R basics",
    "section": "Announcements",
    "text": "Announcements\n\nCourse is full\nThursday 3:30 moved to 5:15pm\nPlease join the waitlist\nPlease fill out Who’s in class"
  },
  {
    "objectID": "slides/r-basics.html#you-are-here",
    "href": "slides/r-basics.html#you-are-here",
    "title": "R basics",
    "section": "You are here",
    "text": "You are here\n\n\nData science with R\n\n\nR basics\nData visualization\nData wrangling\n\n\n\nStats & Model buidling\n\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability\n\n\n\nMore advanced\n\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "slides/r-basics.html#basic-concepts",
    "href": "slides/r-basics.html#basic-concepts",
    "title": "R basics",
    "section": "Basic concepts",
    "text": "Basic concepts\n\nExpressions: fundamental building blocks of programming\nObjects: allow us to store stuff, created with assignment operator\nNames: names w give objects must be letters, numbers, ., or _\nAttributes: allow us to attach arbitrary metadata to objects\nFunctions: take some input, perform some computation, and return some output\nEnvironment: collection of all objects we defined in current R session\nPackages: collections of functions, data, and documentation bundled together in R\nComments: notes you leave for yourself, not evaluated\nMessages: notes R leaves for you (FYI, warning, error)"
  },
  {
    "objectID": "slides/r-basics.html#important-functions",
    "href": "slides/r-basics.html#important-functions",
    "title": "R basics",
    "section": "Important functions",
    "text": "Important functions\nObjects\n\nstr(x) - returns summary of object’s structure\ntypeof(x) - returns object’s data type\nlength(x) - returns object’s length\nattributes(x) - returns list of object’s attributes"
  },
  {
    "objectID": "slides/r-basics.html#important-functions-1",
    "href": "slides/r-basics.html#important-functions-1",
    "title": "R basics",
    "section": "Important functions",
    "text": "Important functions\nEnvironment\n\nls() - list all variables in environment\nrm(x) - remove x variable from environment\nrm(list = ls()) - remove all variables from environment"
  },
  {
    "objectID": "slides/r-basics.html#important-function",
    "href": "slides/r-basics.html#important-function",
    "title": "R basics",
    "section": "Important function",
    "text": "Important function\nPackages\n\ninstall.packages() to install packages\nlibrary() to load package into current R session.\ndata() to load data from package into environment\nsessionInfo() - version info, packages for current R session"
  },
  {
    "objectID": "slides/r-basics.html#important-functions-2",
    "href": "slides/r-basics.html#important-functions-2",
    "title": "R basics",
    "section": "Important functions",
    "text": "Important functions\nHelp\n\n?mean - get help with a function\nhelp('mean') - search help files for word or phrase\nhelp(package='tidyverse') - find help for a package"
  },
  {
    "objectID": "slides/r-basics.html#vectors-1",
    "href": "slides/r-basics.html#vectors-1",
    "title": "R basics",
    "section": "Vectors",
    "text": "Vectors\nare fundamental data structures in R. There are two types:\n\natomic vectors - elements of the same data type\nlists - elements refer to any object"
  },
  {
    "objectID": "slides/r-basics.html#atomic-vectors",
    "href": "slides/r-basics.html#atomic-vectors",
    "title": "R basics",
    "section": "Atomic vectors",
    "text": "Atomic vectors\nAtomic vectors can be one of six data types:\n\n\n\ntypeof(x)\nexamples\n\n\n\n\ndouble\n3, 3.32\n\n\ninteger\n1L, 144L\n\n\ncharacter\n“hello”, ‘hello, world!’\n\n\nlogical\nTRUE, F\n\n\n\n\natomic because they must contain only one type"
  },
  {
    "objectID": "slides/r-basics.html#atomic-vectors-1",
    "href": "slides/r-basics.html#atomic-vectors-1",
    "title": "R basics",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\n\ndouble\n\ntypeof(3.34)\n\n[1] \"double\"\n\n\ninteger\n\ntypeof(3L)\n\n[1] \"integer\"\n\n\n\ncharacter\n\ntypeof('hello, world!')\n\n[1] \"character\"\n\n\nlogical\n\ntypeof(TRUE)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/r-basics.html#create-a-vector",
    "href": "slides/r-basics.html#create-a-vector",
    "title": "R basics",
    "section": "Create a vector",
    "text": "Create a vector\nwith c() for concatenate\n\nc(2,4,6)\n\n[1] 2 4 6\n\nc(\"hello\", \"world\", \"!\")\n\n[1] \"hello\" \"world\" \"!\"    \n\nc(T, F, T)\n\n[1]  TRUE FALSE  TRUE\n\nc(\"hello\", c(2, 3))\n\n[1] \"hello\" \"2\"     \"3\""
  },
  {
    "objectID": "slides/r-basics.html#create-a-vector-1",
    "href": "slides/r-basics.html#create-a-vector-1",
    "title": "R basics",
    "section": "Create a vector",
    "text": "Create a vector\nwith sequences seq() or repetitions rep()\n\n# sequence of integers have a special shorthand\n6:10\n\n[1]  6  7  8  9 10\n\n\n\n\n# sequence from, to, by \nseq(from=3, to=5, by=0.5)\n\n[1] 3.0 3.5 4.0 4.5 5.0\n\n\n\n\n\n# rep(x, times = 1, each = 1)\nrep(c(1,0), times = 4)\n\n[1] 1 0 1 0 1 0 1 0\n\n\n\n\n\n# rep(x, times = 1, each = 1)\nrep(c(1,0), each = 4)\n\n[1] 1 1 1 1 0 0 0 0"
  },
  {
    "objectID": "slides/r-basics.html#check-data-type",
    "href": "slides/r-basics.html#check-data-type",
    "title": "R basics",
    "section": "Check data type",
    "text": "Check data type\nwith typeof(x) - returns the type of vector x\n\ntypeof(3)\n\n[1] \"double\"\n\ntypeof(3L)\n\n[1] \"integer\"\n\ntypeof(\"three\")\n\n[1] \"character\"\n\ntypeof(TRUE)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/r-basics.html#check-data-type-1",
    "href": "slides/r-basics.html#check-data-type-1",
    "title": "R basics",
    "section": "Check data type",
    "text": "Check data type\nwith is.*(x) - returns TRUE if x has type *\n\nis.double(3)\n\n[1] TRUE\n\nis.integer(3L)\n\n[1] TRUE\n\nis.character(\"three\")\n\n[1] TRUE\n\nis.logical(TRUE)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/r-basics.html#coercion-implicit",
    "href": "slides/r-basics.html#coercion-implicit",
    "title": "R basics",
    "section": "Coercion, implicit",
    "text": "Coercion, implicit\nIf you try to include elements of different types, R will coerce them into the same type without warning (implicit coercion)\n\nx &lt;- c(1, 2, \"three\", 4, 5 )\nx\n\n[1] \"1\"     \"2\"     \"three\" \"4\"     \"5\"    \n\ntypeof(x)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/r-basics.html#coercion-explicit",
    "href": "slides/r-basics.html#coercion-explicit",
    "title": "R basics",
    "section": "Coercion, explicit",
    "text": "Coercion, explicit\nYou can also use explict coercion to change a vector to another data type with as.*()\n\nx &lt;- c(1, 0 , 1, 0)\nas.logical(x)\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\n\n\n\n\nhierarchy: character &gt; double &gt; integer &gt; logical"
  },
  {
    "objectID": "slides/r-basics.html#more-complex-structures-1",
    "href": "slides/r-basics.html#more-complex-structures-1",
    "title": "R basics",
    "section": "More complex structures",
    "text": "More complex structures\nSome more complex data structures are built from atomic vectors by adding attributes:\n\n\n\n\n\n\n\nStructure\nDescription\n\n\n\n\nmatrix\nvector with dim attribute representing 2 dimensions\n\n\narray\nvector with dim attribute representing n dimensions\n\n\ndata.frame\na named list of vectors (of equal length) with attributes for names (column names), row.names, and class=\"data.frame\""
  },
  {
    "objectID": "slides/r-basics.html#create-more-complex-structures",
    "href": "slides/r-basics.html#create-more-complex-structures",
    "title": "R basics",
    "section": "Create more complex structures",
    "text": "Create more complex structures\n\n\nmatrix\n\nmatrix(0, nrow=2, ncol=3)\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\n\ndata.frame\n\ndata.frame(x=c(1,2,3), y=c('a','b','c'))\n\n  x y\n1 1 a\n2 2 b\n3 3 c\n\n\n\narray\n\narray(0, dim=c(2,3,2))\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0"
  },
  {
    "objectID": "slides/r-basics.html#basic-math-operators",
    "href": "slides/r-basics.html#basic-math-operators",
    "title": "R basics",
    "section": "Basic math operators",
    "text": "Basic math operators\n\n\n\nOperator\nOperation\n\n\n\n\n()\nParentheses\n\n\n^\nExponent\n\n\n*\nMultiply\n\n\n/\nDivide\n\n\n+\nAdd\n\n\n-\nSubtract"
  },
  {
    "objectID": "slides/r-basics.html#basic-math-operations",
    "href": "slides/r-basics.html#basic-math-operations",
    "title": "R basics",
    "section": "Basic math operations",
    "text": "Basic math operations\nfollow the order of operations you expect (PEMDAS)\n\n# multiplication takes precedence\n2 + 3 * 10\n\n[1] 32\n\n# we can use paratheses to be explicit\n(2 + 3) * 10 \n\n[1] 50"
  },
  {
    "objectID": "slides/r-basics.html#comparison-operators",
    "href": "slides/r-basics.html#comparison-operators",
    "title": "R basics",
    "section": "Comparison operators",
    "text": "Comparison operators\n\n\n\nOperator\nComparison\n\n\n\n\nx &lt; y\nless than\n\n\nx &gt; y\ngreater than\n\n\nx &lt;= y\nless than or equal to\n\n\nx &gt;= y\ngreater than or equal to\n\n\nx != y\nnot equal to\n\n\nx == y\nequal to"
  },
  {
    "objectID": "slides/r-basics.html#comparison-operators-1",
    "href": "slides/r-basics.html#comparison-operators-1",
    "title": "R basics",
    "section": "Comparison operators",
    "text": "Comparison operators\n\nx &lt;- 2\ny &lt;- 3\n\n\n\n\nx &lt; y\n\n[1] TRUE\n\nx &gt; y \n\n[1] FALSE\n\nx != y\n\n[1] TRUE\n\nx == y\n\n[1] FALSE"
  },
  {
    "objectID": "slides/r-basics.html#logical-operators",
    "href": "slides/r-basics.html#logical-operators",
    "title": "R basics",
    "section": "Logical operators",
    "text": "Logical operators\n\n\n\nOperator\nOperation\n\n\n\n\nx | y\nor\n\n\nx & y\nand\n\n\n!x\nnot\n\n\nany()\ntrue if any element meets condition\n\n\nall()\ntrue if all elements meet condition\n\n\n%in%\ntrue if any element is in following vector"
  },
  {
    "objectID": "slides/r-basics.html#logical-operators-1",
    "href": "slides/r-basics.html#logical-operators-1",
    "title": "R basics",
    "section": "Logical operators",
    "text": "Logical operators\n\nx &lt;- TRUE\ny &lt;- FALSE\n\n\n\n\nx | y\n\n[1] TRUE\n\nx & y \n\n[1] FALSE\n\n!x \n\n[1] FALSE\n\nany(c(x,y))\n\n[1] TRUE\n\nall(c(x,y))\n\n[1] FALSE"
  },
  {
    "objectID": "slides/r-basics.html#operations-are-vectorized",
    "href": "slides/r-basics.html#operations-are-vectorized",
    "title": "R basics",
    "section": "Operations are vectorized",
    "text": "Operations are vectorized\nAlmost all operations (and many functions) are vectorized\n\n\n\nmath\n\nc(1, 2, 3) + c(4, 5, 6)\n\n[1] 5 7 9\n\nc(1, 2, 3) / c(4, 5, 6)\n\n[1] 0.25 0.40 0.50\n\nc(1, 2, 3) * 10 \n\n[1] 10 20 30\n\nc(1, 2, 30) &gt; 10\n\n[1] FALSE FALSE  TRUE\n\n\n\nlogical\n\nx &lt;- c(TRUE, FALSE, FALSE)\ny &lt;- c(TRUE, TRUE, FALSE)\nz &lt;- TRUE\n\n\nx | y\n\n[1]  TRUE  TRUE FALSE\n\nx & y \n\n[1]  TRUE FALSE FALSE\n\nx | z \n\n[1] TRUE TRUE TRUE\n\nx & z \n\n[1]  TRUE FALSE FALSE"
  },
  {
    "objectID": "slides/r-basics.html#operator-coercion",
    "href": "slides/r-basics.html#operator-coercion",
    "title": "R basics",
    "section": "Operator coercion",
    "text": "Operator coercion\nOperators and functions will also coerce values when needed (and without warning)\n\n5.6 + 2L\n\n[1] 7.6\n\n10 + FALSE \n\n[1] 10\n\nlog(1)\n\n[1] 0\n\nlog(TRUE)\n\n[1] 0"
  },
  {
    "objectID": "slides/r-basics.html#subsetting-1",
    "href": "slides/r-basics.html#subsetting-1",
    "title": "R basics",
    "section": "Subsetting",
    "text": "Subsetting\n\nSubsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that you’re interested in. ~ Hadley Wickham, Advanced R\n\nstr()\n\nx &lt;- c(\"hello\", \"world\", \"!\")\nstr(x)\n\n chr [1:3] \"hello\" \"world\" \"!\"\n\ny &lt;- c(1, 2, 3, 4, 5)\nstr(y)\n\n num [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "slides/r-basics.html#subsetting-2",
    "href": "slides/r-basics.html#subsetting-2",
    "title": "R basics",
    "section": "Subsetting",
    "text": "Subsetting\nThere are three operators for subsetting objects:\n\n[ - subsets (one or more) elements\n[[ and $ - extracts a single element"
  },
  {
    "objectID": "slides/r-basics.html#subset-multiple-elements-with",
    "href": "slides/r-basics.html#subset-multiple-elements-with",
    "title": "R basics",
    "section": "Subset multiple elements with [",
    "text": "Subset multiple elements with [\n\n\n\n\n\n\n\nCode\nReturns\n\n\n\n\nx[c(1,2)]\npositive integers select elements at specified indexes\n\n\nx[-c(1,2)]\nnegative integers select all but elements at specified indexes\n\n\nx[c(\"x\", \"y\")]\nselect elements by name, if elements are named\n\n\nx[]\nnothing returns the original object\n\n\nx[0]\nzero returns a zero-length vector\n\n\nx[c(TRUE, TRUE)]\nselect elements where corresponding logical value is TRUE"
  },
  {
    "objectID": "slides/r-basics.html#subset-multiple-elements-with-1",
    "href": "slides/r-basics.html#subset-multiple-elements-with-1",
    "title": "R basics",
    "section": "Subset multiple elements with [",
    "text": "Subset multiple elements with [\n\n\natomic vector\n\nx &lt;- c(\"hello\", \"world\", \"1\")\n\n\nx[c(1,2)]\n\n[1] \"hello\" \"world\"\n\nx[-c(1,2)]\n\n[1] \"1\"\n\nx[]\n\n[1] \"hello\" \"world\" \"1\"    \n\n\n\ndata.frame\n\ny &lt;- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n\n\ny[c(1,2)]\n\n  this that\n1    1    a\n2    2    b\n3    3    c\n\ny[-c(1,2)]\n\n  theother\n1        4\n2        5\n3        6\n\ny[c(\"this\")]\n\n  this\n1    1\n2    2\n3    3"
  },
  {
    "objectID": "slides/r-basics.html#ways-to-extract-a-single-element",
    "href": "slides/r-basics.html#ways-to-extract-a-single-element",
    "title": "R basics",
    "section": "3 ways to extract a single element",
    "text": "3 ways to extract a single element\n\n\n\nCode\nReturns\n\n\n\n\n[[2]]\na single positive integer (index)\n\n\n[['name']]\na single string\n\n\nx$name\nthe $ operator is a useful shorthand for [['name']]"
  },
  {
    "objectID": "slides/r-basics.html#ways-to-extract-a-single-element-1",
    "href": "slides/r-basics.html#ways-to-extract-a-single-element-1",
    "title": "R basics",
    "section": "3 ways to extract a single element",
    "text": "3 ways to extract a single element\n\n\natomic vector\n\nx &lt;- c(\"hello\", \"world\", \"1\")\n\n\nx[[1]]\n\n[1] \"hello\"\n\nx[[2]]\n\n[1] \"world\"\n\nx[[3]]\n\n[1] \"1\"\n\n\n\ndata.frame\n\ny &lt;- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n\n\ny[[1]]\n\n[1] 1 2 3\n\ny[[\"that\"]]\n\n[1] \"a\" \"b\" \"c\"\n\ny$that\n\n[1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "slides/r-basics.html#r-has-many-built-in-functions",
    "href": "slides/r-basics.html#r-has-many-built-in-functions",
    "title": "R basics",
    "section": "R has many built-in functions",
    "text": "R has many built-in functions\n\nx &lt;- c(1, -2, 3)\n\n\n\n\nSome are vectorized\n\nlog(x)\n\n[1] 0.000000      NaN 1.098612\n\nabs(x)\n\n[1] 1 2 3\n\nround(x, 2)\n\n[1]  1 -2  3\n\n\n\nSome are not\n\nmean(x)\n\n[1] 0.6666667\n\nmax(x)\n\n[1] 3\n\nmin(x)\n\n[1] -2"
  },
  {
    "objectID": "slides/r-basics.html#missing-values",
    "href": "slides/r-basics.html#missing-values",
    "title": "R basics",
    "section": "Missing values",
    "text": "Missing values\n\n\nNA\n\nused to represent missing or unknown elements in vectors\nNote that NA is contageous: expressions including NA usually return NA\nCheck for NA values with is.na()\n\n\nx &lt;- c(1, NA, 3)\nis.na(x)\n\n[1] FALSE  TRUE FALSE\n\nlength(x)\n\n[1] 3\n\nmean(x)\n\n[1] NA\n\n\n\nNULL\n\nused to represent an empty or absent vector of arbitrary type\nNULL is its own special type and always has length zero and NULL attributes\nCheck for NULL values with is.null()\n\n\nx &lt;- c()\nis.null(x)\n\n[1] TRUE\n\nlength(x)\n\n[1] 0\n\nmean(x)\n\n[1] NA"
  },
  {
    "objectID": "slides/r-basics.html#programming",
    "href": "slides/r-basics.html#programming",
    "title": "R basics",
    "section": "Programming",
    "text": "Programming\n\n\nfunctions\nare reusable pieces of code that take some input, perform some task or computation, and return an output\nfunction(inputs){\n    # do something\n    return(output)\n}\n\ncontrol flow\nrefers to managing the order in which expressions are executed in a program\n\nif…else - if something is true, do this; otherwise do that\nfor loops - repeat code a specific number of times\nwhile loops - repeat code as long as certain conditions are true\nbreak - exit a loop early\nnext - skip to next iteration in a loop"
  },
  {
    "objectID": "slides/r-basics.html#notes-on-with-higher-dim-objects",
    "href": "slides/r-basics.html#notes-on-with-higher-dim-objects",
    "title": "R basics",
    "section": "Notes on [ with higher dim objects",
    "text": "Notes on [ with higher dim objects\n\nm &lt;- matrix(1:6, nrow=2, ncol=3)\nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n# separate dimensions by comma \nm[1, 2]\n\n[1] 3\n\n# omitted dim return all from that dim \nm[2, ]\n\n[1] 2 4 6\n\nm[ , 2]\n\n[1] 3 4"
  },
  {
    "objectID": "slides/r-basics.html#notes-on-and",
    "href": "slides/r-basics.html#notes-on-and",
    "title": "R basics",
    "section": "Notes on [[ and $:",
    "text": "Notes on [[ and $:\nboth [[ and [ work for vectors; use [[\n\nx &lt;- c(1, -2, 3)\nx[[1]]\n\n[1] 1\n\nx[1]\n\n[1] 1\n\n\n$ does partial matching without warning\n\ndf &lt;- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n\n\ndf[['theo']]\n\nNULL\n\ndf$theo\n\n[1] 4 5 6"
  },
  {
    "objectID": "slides/hello-world.html#paperwork",
    "href": "slides/hello-world.html#paperwork",
    "title": "Week 1: R Basics",
    "section": "Paperwork",
    "text": "Paperwork\n\nWhen you arrive, complete this anonymous form: Who’s in class\nYou can also join the waitlist if you are not enrolled"
  },
  {
    "objectID": "slides/hello-world.html#announcements",
    "href": "slides/hello-world.html#announcements",
    "title": "Week 1: R Basics",
    "section": "Announcements",
    "text": "Announcements\n\nThe course is full and the room is full\nWays to join:\n\nWatch for an opening (highest odds of getting in)\nAdd your name to our waitlist"
  },
  {
    "objectID": "slides/hello-world.html#course-description",
    "href": "slides/hello-world.html#course-description",
    "title": "Week 1: R Basics",
    "section": "Course description",
    "text": "Course description\nData Sci for Lang & Mind is an entry-level course designed to teach basic principles of statistics and data science to students with little or no background in statistics or computer science. Students will learn to identify patterns in data using visualizations and descriptive statistics; make predictions from data using machine learning and optimization; and quantify the certainty of their predictions using statistical models. This course aims to help students build a foundation of critical thinking and computational skills that will allow them to work with data in all fields related to the study of the mind (e.g. linguistics, psychology, philosophy, cognitive science, neuroscience)."
  },
  {
    "objectID": "slides/hello-world.html#prerequisites",
    "href": "slides/hello-world.html#prerequisites",
    "title": "Week 1: R Basics",
    "section": "Prerequisites",
    "text": "Prerequisites\nThere are no prerequisites beyond high school algebra. No prior programming or statistics experience is necessary, though you will still enjoy this course if you already have a little. Students who have taken several computer science or statistics classes should look for a more advanced course."
  },
  {
    "objectID": "slides/hello-world.html#teaching-team",
    "href": "slides/hello-world.html#teaching-team",
    "title": "Week 1: R Basics",
    "section": "Teaching team",
    "text": "Teaching team\nInstructor: Dr. Katie Schuler (she/her)\nTAs:\n\nBrittany Zykoski\nWesley Lincoln"
  },
  {
    "objectID": "slides/hello-world.html#about-me-your-instructor-katie",
    "href": "slides/hello-world.html#about-me-your-instructor-katie",
    "title": "Week 1: R Basics",
    "section": "About me, your instructor (Katie)",
    "text": "About me, your instructor (Katie)\n\nYou can call me Professor Schuler or Katie, whichever makes you more comfortable\nI live in Mt Airy with my husband and two kids (Dory, 2 and Joan, 6)\nAt Penn I also have a research lab, the Child Language Lab and am on the Natural Science and Math Panel (a group focused on improving inclusive teaching in STEM at Penn).\nI’m a first-generation college student from Western NY. I worked 40 hours a week to put myself through college; I am still paying off my student loans."
  },
  {
    "objectID": "slides/hello-world.html#my-assumptions-about-you",
    "href": "slides/hello-world.html#my-assumptions-about-you",
    "title": "Week 1: R Basics",
    "section": "My assumptions about you",
    "text": "My assumptions about you\nYou are an honest, kind, and hardworking student who wants to do well in and enjoy this class\n\nYou are very busy, and will sometimes have to prioritize other things above this class."
  },
  {
    "objectID": "slides/hello-world.html#data-science",
    "href": "slides/hello-world.html#data-science",
    "title": "Week 1: R Basics",
    "section": "Data science",
    "text": "Data science\nData science is about making decisions based on incomplete information.\n\n\n\n\n\n\n\nFigure 1: from Kok & de Lange (2014)\n\n\n\nThis concept is not new. Brains were built for doing this!"
  },
  {
    "objectID": "slides/hello-world.html#but-we-have-new-tools-and-lots-more-data",
    "href": "slides/hello-world.html#but-we-have-new-tools-and-lots-more-data",
    "title": "Week 1: R Basics",
    "section": "But we have new tools and lots more data!",
    "text": "But we have new tools and lots more data!\n\n\n\n\n\n\n\nFigure 2: from https://web-assets.domo.com/miyagi/images/product/product-feature-22-data-never-sleeps-10.png"
  },
  {
    "objectID": "slides/hello-world.html#data-science-workflow",
    "href": "slides/hello-world.html#data-science-workflow",
    "title": "Week 1: R Basics",
    "section": "Data science workflow",
    "text": "Data science workflow\nThe folks who wrote R for Data Science proposed the following data science workflow:\n\n\n\n\n\n\n\nFigure 3: from R for Data Science"
  },
  {
    "objectID": "slides/hello-world.html#overview-of-course",
    "href": "slides/hello-world.html#overview-of-course",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nWe will spend the first few weeks getting comfortable programming in R, including some useful skills for data science:\n\nR basics\nData visualization\nData wrangling (import, tidy, and transform)"
  },
  {
    "objectID": "slides/hello-world.html#overview-of-course-1",
    "href": "slides/hello-world.html#overview-of-course-1",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nThen, we will spend the next several weeks building a foundation in basic statistics and model building:\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability"
  },
  {
    "objectID": "slides/hello-world.html#overview-of-course-2",
    "href": "slides/hello-world.html#overview-of-course-2",
    "title": "Week 1: R Basics",
    "section": "Overview of course",
    "text": "Overview of course\nFinally we will cover a selection of more advanced topics that are often applied in language and mind fields, with a focus on basic understanding:\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "slides/hello-world.html#syllabus-briefly",
    "href": "slides/hello-world.html#syllabus-briefly",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nEach week will include two lectures and a lab:\n\nLectures are on Tuesdays and Thursdays at 12pm and will be a mix of conceptual overviews and R tutorials. It is a good idea to bring your laptop so you can follow along and try stuff in R!\nLabs are on Thursday or Friday and will consist of (ungraded) practice problems and concept review with TAs. You may attend any lab section that works for your schedule."
  },
  {
    "objectID": "slides/hello-world.html#syllabus-briefly-1",
    "href": "slides/hello-world.html#syllabus-briefly-1",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nThere are 8 graded assessments:\n\n6 Problem sets (40%) in which you will be asked to apply your newly aquired R programming skills.\n2 Midterm exams (60%) in which you will be tested on your understanding of lecture concepts."
  },
  {
    "objectID": "slides/hello-world.html#syllabus-briefly-2",
    "href": "slides/hello-world.html#syllabus-briefly-2",
    "title": "Week 1: R Basics",
    "section": "Syllabus, briefly",
    "text": "Syllabus, briefly\nThere are a few policies to take note of:\n\nMissed exams cannot be made up except in cases of genuine conflict or emergency (documentation and course action notice required). You may take the optional final exam to replace a missed or low scoring exam.\nYou may request an extension on any problem set of up to 3 days. But extensions beyond 3 days will not be granted (because delying solutions will negative impact other students).\nYou may submit any missed quiz or problem set by the end of the semester for half-credit (50%), even after solutions are posted.\nWe will drop your lowest pset grade, but you must turn in all 6 assignements to be eligible."
  },
  {
    "objectID": "slides/hello-world.html#resources",
    "href": "slides/hello-world.html#resources",
    "title": "Week 1: R Basics",
    "section": "Resources",
    "text": "Resources\nIn addition to our course website, we will use the following:\n\ngoogle colab (r kernel) - for computing\ncanvas- for posting grades\ngradescope - for submitting problem sets\ned discussion - for announcements and questions"
  },
  {
    "objectID": "slides/hello-world.html#wellness-resources",
    "href": "slides/hello-world.html#wellness-resources",
    "title": "Week 1: R Basics",
    "section": "Wellness resources",
    "text": "Wellness resources\nPlease consider using these Penn resources this semester:\n\nWeingarten Center for academic support and tutoring.\nWellness at Penn for health and wellbeing."
  },
  {
    "objectID": "slides/hello-world.html#why-r",
    "href": "slides/hello-world.html#why-r",
    "title": "Week 1: R Basics",
    "section": "Why R?",
    "text": "Why R?\nWith many programming languages available for data science (e.g. R, Python, Julia, MATLAB), why use R?\n\nBuilt for stats, specifically\nMakes nice visualizations\nLots of people are doing it, especially in academia\nEasier for beginners to understand\nFree and open source (though so are Python and Julia, MATLAB costs $)"
  },
  {
    "objectID": "slides/hello-world.html#many-ways-to-use-r",
    "href": "slides/hello-world.html#many-ways-to-use-r",
    "title": "Week 1: R Basics",
    "section": "Many ways to use R",
    "text": "Many ways to use R\n\nR Studio\nJupyter\nVS Code\nand even simply the command line/terminal"
  },
  {
    "objectID": "slides/hello-world.html#google-colab",
    "href": "slides/hello-world.html#google-colab",
    "title": "Week 1: R Basics",
    "section": "Google Colab",
    "text": "Google Colab\n\nGoogle Colab is a cloud-based Jupyter notebook that allows you to write, execute, and share code like a google doc.\nWe use Google Colab because it’s simple and accessible to everyone. You can start programming right away, no setup required!"
  },
  {
    "objectID": "slides/hello-world.html#secretly-r",
    "href": "slides/hello-world.html#secretly-r",
    "title": "Week 1: R Basics",
    "section": "Secretly, R!",
    "text": "Secretly, R!\nGoogle Colab officially supports Python, but secretly supports R (and Julia, too!)\n\nUpdate 2024: Google Colab now officially supports R!\ncolab (r kernel)"
  },
  {
    "objectID": "slides/hello-world.html#open-a-new-r-notebook",
    "href": "slides/hello-world.html#open-a-new-r-notebook",
    "title": "Week 1: R Basics",
    "section": "Open a new R notebook:",
    "text": "Open a new R notebook:\n\ncolab (r kernel) - use this link to start a new R notebook\nFile &gt; New notebook and then Runtime &gt; Change runtime type to R"
  },
  {
    "objectID": "slides/hello-world.html#cell-types",
    "href": "slides/hello-world.html#cell-types",
    "title": "Week 1: R Basics",
    "section": "Cell types:",
    "text": "Cell types:\n\n+ Code - write and execute code\n+ Text - write text blocks in markdown"
  },
  {
    "objectID": "slides/hello-world.html#left-sidebar",
    "href": "slides/hello-world.html#left-sidebar",
    "title": "Week 1: R Basics",
    "section": "Left sidebar:",
    "text": "Left sidebar:\n\nTable of contents - outline from text headings\nFind and replace - find and/or replace\nFiles - upload files to cloud session"
  },
  {
    "objectID": "slides/hello-world.html#frequently-used-menu-options",
    "href": "slides/hello-world.html#frequently-used-menu-options",
    "title": "Week 1: R Basics",
    "section": "Frequently used menu options:",
    "text": "Frequently used menu options:\n\nFile &gt; Locate in Drive - where in your Google Drive?\nFile &gt; Save - saves\nFile &gt; Revision history - history of changes you made\nFile &gt; Download &gt; Download .ipynb - used to submit assignments!\nFile &gt; Print - prints\nRuntime &gt; Run all - run all cells\nRuntime &gt; Run before - run all cells before current active cell\nRuntime &gt; Restart and run all - restart runtime, then run all"
  },
  {
    "objectID": "slides/hello-world.html#frequently-used-keyboard-shortcuts",
    "href": "slides/hello-world.html#frequently-used-keyboard-shortcuts",
    "title": "Week 1: R Basics",
    "section": "Frequently used keyboard shortcuts:",
    "text": "Frequently used keyboard shortcuts:\n\nCmd/Ctrl+S - save\nCmd/Ctrl+Enter - run focused cell\nCmd/Ctrl+Shift+A - select all cells\nCmd/Ctrl+/ - comment/uncomment selection\nCmd/Ctrl+] - increase indent\nCmd/Ctrl+[ - decrease indent"
  },
  {
    "objectID": "slides/hello-world.html#expressions",
    "href": "slides/hello-world.html#expressions",
    "title": "Week 1: R Basics",
    "section": "Expressions",
    "text": "Expressions\n\nExpressions are combinations of values, variables, operators, and functions that can be evaluated to produce a result. Expressions can be as simple as a single value or more complex involving calculations, comparisons, and function calls. They are the fundamental building blocks of programming.\n\n10 - a simple value expression that evaluates to 10.\nx &lt;- 10 - an expression that assigns the value of 10 to x.\nx + 10 - an expression that adds the value of x to 10.\na &lt;- x + 10 - an expression that adds the value of x to 10 and assigns the result to the variable a"
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "1 Archive",
    "section": "",
    "text": "1 Archive\nCourse materials for past semesters can be found below:\n\nFall 2023\nSpring 2023"
  },
  {
    "objectID": "psets/pset-01.html",
    "href": "psets/pset-01.html",
    "title": "Problem set 1",
    "section": "",
    "text": "Instructions\n\nUpload your .ipynb notebook to gradescope by 11:59am on the due date. Please include your name, Problem set 1, and any collaborators you worked with in a text cell at the top of your notebook. Please also number your problems and include comments in your code to indicate what part of a problem you are working on."
  },
  {
    "objectID": "psets/pset-01.html#problem-1",
    "href": "psets/pset-01.html#problem-1",
    "title": "Problem set 1",
    "section": "Problem 1",
    "text": "Problem 1\nSuppose you track the number of hours you spend studying each day for a week. Create a vector with the following values and store it as study_hours : 0 4 5 1 0 0 7. Use R’s built-in functions to compute the total number of hours you studied that week, the average number of hours studied per day, and the maximum number of hours studied on a single day. Perform a comparison operation on the study_hours vector to determine whether each day’s study hours were greater than zero."
  },
  {
    "objectID": "psets/pset-01.html#problem-2",
    "href": "psets/pset-01.html#problem-2",
    "title": "Problem set 1",
    "section": "Problem 2",
    "text": "Problem 2\nCreate the matrix given below. Subtract 6 from every number in the matrix and store the output as a new matrix called new_matrix. Then use subsetting to return the value in the first row and third column of new_matrix.\n\n\n     [,1] [,2] [,3]\n[1,]   -5   -2    1\n[2,]   -4   -1    2\n[3,]   -3    0    3"
  },
  {
    "objectID": "psets/pset-01.html#problem-3",
    "href": "psets/pset-01.html#problem-3",
    "title": "Problem set 1",
    "section": "Problem 3",
    "text": "Problem 3\nCreate a data frame that looks like the one below. Return the structure of the dataframe with str(). Use subsetting such that you select the age column and return a vector (not a dataframe). Use a comparison operation on the vector to determine whether each individual is over 80 years old.\n\n\n  age height  major score firstgen\n1  30     65 cogsci   100     TRUE\n2  45     66   ling    75    FALSE\n3  81     72  psych    88     TRUE\n4  27     59   ling    97    FALSE"
  },
  {
    "objectID": "psets/pset-01.html#problem-4",
    "href": "psets/pset-01.html#problem-4",
    "title": "Problem set 1",
    "section": "Problem 4",
    "text": "Problem 4\nRead the documentation for the emojifont package. Install and load the package. Use the package’s search_emoji() function to find all of the emojis with hearts. Then use the emoji() function to return all of these emjois as a vector, as shown below. Finally, select your favorite emoji and visulize it with ggplot, using theme_void().\n\n\n\n\n\n\nHint\n\n\n\nemojifont has it’s own ggplot geom called geom_emoji()! Read the emojifont docs to learn more.\n\n\nAn example of a vector of heart emojis (approximately the same is fine!):\n\n\n [1] \"😍\"    \"😘\"    \"😻\"    \"💑\"    \"💑\"    \"👩‍❤️‍👩\" \"👨‍❤️‍👨\" \"❤️\"     \"💛\"   \n[10] \"💚\"    \"💙\"    \"💜\"    \"🖤\"    \"💔\"    \"❣️\"     \"💕\"    \"💞\"    \"💓\"   \n[19] \"💗\"    \"💖\"    \"💝\"    \"💟\"    \"♥️\"    \n\n\nAn example of a favorite emoji visualized with ggplot and theme_void:"
  },
  {
    "objectID": "psets/pset-01.html#problem-5",
    "href": "psets/pset-01.html#problem-5",
    "title": "Problem set 1",
    "section": "Problem 5",
    "text": "Problem 5\nProblems 5-7 make use of the english dataset in the languageR package. From the documentation:\n\nThis data set gives mean visual lexical decision latencies and word naming latencies to 2284 monomorphemic English nouns and verbs, averaged for old and young subjects, with various predictor variables.\n\nInstall and load the languageR library. Use str() to return the structure of the english dataset. Use subsetting via the $ operator and the typeof() function to return the type of the NounFrequency column."
  },
  {
    "objectID": "psets/pset-01.html#problem-6",
    "href": "psets/pset-01.html#problem-6",
    "title": "Problem set 1",
    "section": "Problem 6",
    "text": "Problem 6\nUse the WrittenFrequency, Familiarity, and WordCategory columns in the english dataset to recreate (as faithfully as possible) the figure below."
  },
  {
    "objectID": "psets/pset-01.html#problem-7",
    "href": "psets/pset-01.html#problem-7",
    "title": "Problem set 1",
    "section": "Problem 7",
    "text": "Problem 7\nCompute the mean of Familiarity and store it in a variable called mean_familiarity. Add a dashed horizontal line on top of the dots in your figure to indicate this value, as shown below. Also include an annotation layer above the dashed line to indicate the line is the mean written frequency.\n\n\n\n\n\n\nHint\n\n\n\ngeom_hline() adds a horizontal line and annotate() adds a text layer! Investigate these geoms and layers to figure out this problem!"
  },
  {
    "objectID": "labs/lab-01.html",
    "href": "labs/lab-01.html",
    "title": "Lab 1: Getting started with R",
    "section": "",
    "text": "To learn to program in R (or any language), you can read about how to do it, and watch someone else do it; but the only way to really learn is to do it yourself. Create some data structures, try some stuff, and see what happens! Here are some practice quiz questions to guide your learning. We will go over the solutions to these in lab.\n\n1 Materials from lab\n\nBrittany’s lab slides\nWesley’s lab slides\n\n\n\n\n2 Google Colab\n\nTrue or false? We can start a new R notebook in Google Colab with File &gt; New notebook\n\n True True, but we need to change the Runtime environment too False\n\nFor problem sets, how will you submit your colab notebook for grading?\n\n File &gt; Download &gt; Download .ipynb, then upload to Gradescope File &gt; Download &gt; Download .ipynb, then upload to Canvas File &gt; Download &gt; Download .py, then upload to Gradescope File &gt; Download &gt; Download .py, then upload to Canvas\n\nWhat version of R is Google Colab running? Hint: use sessionInfo().\n\nWhat is the relationship between R and Google Colab?\n\n R is a programming language. Google Colab is a smaller, specific version of R. R is a programming language. Google Colab is a development environment where you can run R R and Google Colab are both programming languages. R is a paid (proprietary) programming language. Google Colab is a free service to run R.\n\nWhat happens to files you upload to google colab when the Runtime environment is restarted?\n\n They are saved in your google drive. They are saved in Google Colab's cloud for future use They are deleted They are stored for 7 business days, then deleted.\n\n\n\n\n3 R Basics\n\nWhich of the following are expressions?\n\n 10 5 + 10 x &lt;- 5 + 10 x &lt;- y + 10 mean(x)\n\nWhich of the following are valid variable names in R?\n\n childAge response_time 1stPlaceWinner 2fast2furious pi\n\nSuppose we open a new colab notebook and run the following code block. What will be returned?\nx &lt;- 1 + 2\ny &lt;- 0 + 3\nls()\n\n 3 x=3 • y=3 'x' • 'y'  mean(c(1,3,5)) • median(c(1,3,5))\n\nWhich of the following will load the emo package into the current environment?\n\n install.packages('emo') library(emo) data(emo) attributes(emo)\n\nWhich of the following occur in the code block below?\n# compute the mean of x and y\nmean(c(x,y))\n\n a message a function a comment an expression\n\n\n\n\n4 Vectors\n\nWhich of the following returns the vector 20 22 24 26\n\n 20:26 seq(from=20, to=26, by =2) rep(c(20, 22, 24, 26), times = 4) c(20, 22, 24, 26)\n\nSuppose we construct a vector with c(1, \"two\", 3, 4, 5, 6) and assign it to x. What will the following code block return?\ntypeof(x)\n\nWhat is the previous question an example of?\n\n attribute addition explicit coercion implicit coercion none of the above\n\nWhat will the following code block return?\nx &lt;- 1:4\ny &lt;- matrix(x, ncol=2, nrow=2)\ntypeof(y)\n\nWhat will the following code block return?\nx &lt;- c()\nlength(x)\n\nGiven the following output from str(x), what will as.logical(x) return?\n::: {.cell} ::: {.cell-output .cell-output-stdout}\n num [1:4] 1 0 1 0\n::: :::\n\n an error TRUE • FALSE • TRUE • FALSE FALSE FALSE • TRUE • FALSE • TRUE\n\nGiven the following vector, what will as.double(x) return?\nx &lt;- c(\"one\", \"two\", \"three\")\n\n an error 1 • 2 • 3 2 • 4 • 6 'one' • 'two' • 'three'\n\nWhat happens if you add a vector of numbers to a single number in the following expression?\nc(1, 3, 5) + 1\n\n 2 • 3 • 5 Error: length mismatch 1 • 3 • 5 • 1 2 • 4 • 6\n\nWhat happens if you multiply a vector times another vector?\nc(1, 3, 5) * c(10, 100, 1000)\n\n 10 • 300 • 5000 Error: length mismatch 10 • 30 • 50 • 100 • 300 • 500 • 1000 • 3000 • 5000 a 2 x 3 matrix Error: cannot multiply vectors\n\nSuppose we run the following code. What will any(x) return?\nx &lt;- c(1, 5, 11) &gt; 10\n\n TRUE FALSE Error: vector is double but requires logical\n\n\n\n\n5 Subsetting\n\nWhich of the following code subsets the vector x &lt;- c(\"blue\", \"pink\", \"red\") to return just the first element?\n\n x[1] x[[1]] x[0] x[-c(2, 3)] x[“blue”]\n\nSuppose we run the following code. What will x[[2]] return?\nx &lt;- seq(from = 2, to =8, by=2)\n\nSuppose we run the following code. What will m[1, 2] return?\nm &lt;- matrix(c(10,20,30,40), nrow=2, ncol=2)\n\nSuppose we run the following code. What will df$y[4] return?\ndf &lt;- data.frame(\n    x = c(2, 4, 6, 8), \n    y = c(\"l\", \"m\", \"n\", \"o\")\n)\n\n\n\n\n6 Missing Values\n\nSuppose we run the following code. What will is.na(y) return?\n\ny &lt;- c(25, 25, NA, 36)\n\n 3 Error: Non-atomic vector is invalid type TRUE FALSE FALSE TRUE FALSE\n\nSuppose we run the following code. What will is.null(y) return?\ny &lt;- c()\n\nSuppose we run the following code. What will mean(y) return?\ny &lt;- c()"
  },
  {
    "objectID": "webexercises.html",
    "href": "webexercises.html",
    "title": "Webexercises",
    "section": "",
    "text": "This is a Web Exercise template created by the psychology teaching team at the University of Glasgow, based on ideas from Software Carpentry. This template shows how instructors can easily create interactive web documents that students can use in self-guided learning.\nThe {webexercises} package provides a number of functions that you use in inline R code or through code chunk options to create HTML widgets (text boxes, pull down menus, buttons that reveal hidden content). Examples are given below. Render this file to HTML to see how it works.\nNOTE: To use the widgets in the compiled HTML file, you need to have a JavaScript-enabled browser."
  },
  {
    "objectID": "webexercises.html#example-questions",
    "href": "webexercises.html#example-questions",
    "title": "Webexercises",
    "section": "1 Example Questions",
    "text": "1 Example Questions\n\n1.1 Fill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 16 is: \n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\n\n1.2 Multiple Choice (mcq())\n\n“Never gonna give you up, never gonna: let you goturn you downrun awaylet you down”\n“I bless the rainsguess it rainssense the rain down in Africa” -Toto\n\n\n\n1.3 True or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). TRUEFALSE\n\n\n\n1.4 Longer MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n there is a 95% probability that the true mean lies within this range 95% of the data fall within this range if you repeated the process many times, 95% of intervals calculated in this way contain the true mean"
  },
  {
    "objectID": "webexercises.html#checked-sections",
    "href": "webexercises.html#checked-sections",
    "title": "Webexercises",
    "section": "2 Checked sections",
    "text": "2 Checked sections\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion"
  },
  {
    "objectID": "webexercises.html#hidden-solutions-and-hints",
    "href": "webexercises.html#hidden-solutions-and-hints",
    "title": "Webexercises",
    "section": "3 Hidden solutions and hints",
    "text": "3 Hidden solutions and hints\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for studying language and the mind",
    "section": "",
    "text": "Announcements\n\n\n\n\nLING 0700-405 (Friday 12pm lab) has a new, bigger, room! WILL 306!\nIf we issued you a permit in Path @ Penn, please use it to re-register today!\nJoin the waitlist here: LING0700/PSYC2314 Waitlist\nWelcome to Data Science for Studying Language & the Mind! The Fall 2024 course information and materials are below. Course materials from previous semesters are archived here.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#study-guides",
    "href": "index.html#study-guides",
    "title": "Data Science for studying language and the mind",
    "section": "Study guides",
    "text": "Study guides\nStudy guides include weekly study guides and additional resources from each week, including slides, demos, and further reading.\n\nWeek 1: R Basics\nWeek 2: Data visualization\nWeek 3: Data import, tidy, wrangle\nWeek 4: Sampling distribution\nWeek 5: Hypothesis testing\nWeek 6: Exam 1 review\nWeek 7: Model specification\nWeek 8: Model fitting\nWeek 9: Model accuracy\nWeek 10: Model reliability\nWeek 11: Classification\nWeek 12: Inference\nWeek 13: Exam 2 review\nWeeK 15: Multilevel Models",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#problem-sets",
    "href": "index.html#problem-sets",
    "title": "Data Science for studying language and the mind",
    "section": "Problem sets",
    "text": "Problem sets\nThere are 6 problem sets, due to Gradescope by noon on the following Mondays. You may request an extension of up to 3 days for any reason. After solutions are posted, late problem sets can still be submitted for half credit (50%). If you submit all 6 problem sets, we will drop your lowest.\n\nProblem set 1 due Sep 9\nProblem set 2 due Sep 23\nProblem set 3 due Oct 14\nProblem set 4 due Oct 28\nProblem set 5 due Nov 11\nProblem set 6 due Dec 9",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#exams",
    "href": "index.html#exams",
    "title": "Data Science for studying language and the mind",
    "section": "Exams",
    "text": "Exams\nThere are 2 midterm exams, taken in class on the following dates. Exams cannot be rescheduled, except in cases of genuine conflict or emergency (documentation and a Course Action Notice are required). However, you can submit any missed exam by the end of the semester for half credit (50%). You may also replace your lowest midterm exam score with the optional final exam.\n\nExam 1 in class Tuesday Oct 1\nExam 2 in class Thursday Nov 21\nFinal exam (optional) TBD",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#lab-exercises",
    "href": "index.html#lab-exercises",
    "title": "Data Science for studying language and the mind",
    "section": "Lab exercises",
    "text": "Lab exercises\nLab exercises are intended for practice and are not graded.\n\nLab 1 on Aug 29 or 30\nLab 2 on Sep 5 or 6\nLab 3 on Sep 12 or 13\nLab 4 on Sep 19 or 20\nLab 5 on Oct 10 or 11\nLab 6 on Oct 17 or 18\nLab 7 on Oct 24 or 25\nLab 8 on Nov 1 or 2\nLab 9 on Nov 8 or 9\nLab 10 on Dec 5 or 6",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "slides/data-visualization-1.html#announcements",
    "href": "slides/data-visualization-1.html#announcements",
    "title": "Data Visualization Day 1",
    "section": "Announcements",
    "text": "Announcements\n\nPermits are being issued today!\n\nFirst, for students dropped due to the rescheduled lab\nNext, for students on the waitlist\n\nIf you are unable to request a permit in Path @ Penn, please send me an email to let me know\n\nThese are the instructions\n\nThe Friday 12pm lab has 8 more seats 🙂"
  },
  {
    "objectID": "slides/data-visualization-1.html#you-are-here",
    "href": "slides/data-visualization-1.html#you-are-here",
    "title": "Data Visualization Day 1",
    "section": "You are here",
    "text": "You are here\n\n\nData science with R\n\n\nR basics\nData visualization\nData wrangling\n\n\n\nStats & Model buidling\n\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability\n\n\n\nMore advanced\n\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "slides/data-visualization-1.html#why-visualize",
    "href": "slides/data-visualization-1.html#why-visualize",
    "title": "Data Visualization Day 1",
    "section": "Why visualize?",
    "text": "Why visualize?\n\n“The simple graph has brought more information to the data analyst’s mind than any other device.” — John Tukey"
  },
  {
    "objectID": "slides/data-visualization-1.html#why-visualize-1",
    "href": "slides/data-visualization-1.html#why-visualize-1",
    "title": "Data Visualization Day 1",
    "section": "Why visualize?",
    "text": "Why visualize?\n\n“Visualization is a fundamentally human activity. A good visualization will show you things you did not expect or raise new questions about the data. A good visualization might also hint that you’re asking the wrong question or that you need to collect different data. Visualizations can surprise you, but they don’t scale particularly well because they require a human to interpret them.” – R4DS"
  },
  {
    "objectID": "slides/data-visualization-1.html#datasaurus-dozen",
    "href": "slides/data-visualization-1.html#datasaurus-dozen",
    "title": "Data Visualization Day 1",
    "section": "Datasaurus dozen",
    "text": "Datasaurus dozen\n\n\n# A tibble: 13 × 6\n   dataset    mean_x mean_y std_dev_x std_dev_y corr_x_y\n   &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 away         54.3   47.8      16.8      26.9  -0.0641\n 2 bullseye     54.3   47.8      16.8      26.9  -0.0686\n 3 circle       54.3   47.8      16.8      26.9  -0.0683\n 4 dino         54.3   47.8      16.8      26.9  -0.0645\n 5 dots         54.3   47.8      16.8      26.9  -0.0603\n 6 h_lines      54.3   47.8      16.8      26.9  -0.0617\n 7 high_lines   54.3   47.8      16.8      26.9  -0.0685\n 8 slant_down   54.3   47.8      16.8      26.9  -0.0690\n 9 slant_up     54.3   47.8      16.8      26.9  -0.0686\n10 star         54.3   47.8      16.8      26.9  -0.0630\n11 v_lines      54.3   47.8      16.8      26.9  -0.0694\n12 wide_lines   54.3   47.8      16.8      26.9  -0.0666\n13 x_shape      54.3   47.8      16.8      26.9  -0.0656\n\n\n\n\nDatasaurus was created by Alberto Cairo, library(datasauRus)"
  },
  {
    "objectID": "slides/data-visualization-1.html#datasaurus-dozen-1",
    "href": "slides/data-visualization-1.html#datasaurus-dozen-1",
    "title": "Data Visualization Day 1",
    "section": "Datasaurus dozen",
    "text": "Datasaurus dozen\n\n\n\n\n\n\n\n\n\n\n\nDatasaurus was created by Alberto Cairo"
  },
  {
    "objectID": "slides/data-visualization-1.html#ggplot2",
    "href": "slides/data-visualization-1.html#ggplot2",
    "title": "Data Visualization Day 1",
    "section": "ggplot2",
    "text": "ggplot2\n\n\nFigure 2"
  },
  {
    "objectID": "slides/data-visualization-1.html#using-ggplot2",
    "href": "slides/data-visualization-1.html#using-ggplot2",
    "title": "Data Visualization Day 1",
    "section": "Using ggplot2",
    "text": "Using ggplot2\nGoogle Colab already has ggplot2 installed by default. There is no need to run install.packages().\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "slides/data-visualization-1.html#why-ggplot2",
    "href": "slides/data-visualization-1.html#why-ggplot2",
    "title": "Data Visualization Day 1",
    "section": "Why ggplot2?",
    "text": "Why ggplot2?\n\n“R has several systems for making graphs, but ggplot2 is one of the most elegant and most versatile. ggplot2 implements the grammar of graphics, a coherent system for describing and building graphs. With ggplot2, you can do more and faster by learning one system and applying it in many places.” – R4DS"
  },
  {
    "objectID": "slides/data-visualization-1.html#ggplot2s-grammar-of-graphics",
    "href": "slides/data-visualization-1.html#ggplot2s-grammar-of-graphics",
    "title": "Data Visualization Day 1",
    "section": "ggplot2’s grammar of graphics",
    "text": "ggplot2’s grammar of graphics\n\n\nFigure 3"
  },
  {
    "objectID": "slides/data-visualization-1.html#todays-data-ratings",
    "href": "slides/data-visualization-1.html#todays-data-ratings",
    "title": "Data Visualization Day 1",
    "section": "Today’s data: ratings",
    "text": "Today’s data: ratings\n\nSubjective frequency ratings, ratings of estimated weight, and ratings of estimated size, averaged over subjects, for 81 concrete English nouns. – languageR\n\n\nlibrary(languageR)\nstr(ratings)\n\n'data.frame':   81 obs. of  14 variables:\n $ Word            : Factor w/ 81 levels \"almond\",\"ant\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ Frequency       : num  4.2 5.35 6.3 3.83 3.66 ...\n $ FamilySize      : num  0 1.39 1.1 0 0 ...\n $ SynsetCount     : num  1.1 1.1 1.1 1.39 1.1 ...\n $ Length          : int  6 3 5 7 9 7 6 6 3 6 ...\n $ Class           : Factor w/ 2 levels \"animal\",\"plant\": 2 1 2 2 2 2 1 2 1 1 ...\n $ FreqSingular    : int  24 69 315 26 19 24 53 74 155 37 ...\n $ FreqPlural      : int  42 140 231 19 19 6 78 77 103 14 ...\n $ DerivEntropy    : num  0 0.562 0.496 0 0 ...\n $ Complex         : Factor w/ 2 levels \"complex\",\"simplex\": 2 2 2 2 2 2 2 2 2 2 ...\n $ rInfl           : num  -0.542 -0.7 0.309 0.3 0 ...\n $ meanWeightRating: num  1.49 3.35 2.19 1.32 1.44 ...\n $ meanSizeRating  : num  1.89 3.63 2.47 1.76 1.87 ...\n $ meanFamiliarity : num  3.72 3.6 5.84 4.4 3.68 4.12 2.12 5.68 3.2 2.2 ..."
  },
  {
    "objectID": "slides/data-visualization-1.html#todays-data-ratings-1",
    "href": "slides/data-visualization-1.html#todays-data-ratings-1",
    "title": "Data Visualization Day 1",
    "section": "Today’s data: ratings",
    "text": "Today’s data: ratings\nWe will make use of the following variables:\n\nFrequency - actual word frequency\nmeanFamiliarity - subjective frequency rating\nClass - whether word is a plant or animal\n\n\n\n\n'data.frame':   81 obs. of  4 variables:\n $ Word           : Factor w/ 81 levels \"almond\",\"ant\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ Frequency      : num  4.2 5.35 6.3 3.83 3.66 ...\n $ meanFamiliarity: num  3.72 3.6 5.84 4.4 3.68 4.12 2.12 5.68 3.2 2.2 ...\n $ Class          : Factor w/ 2 levels \"animal\",\"plant\": 2 1 2 2 2 2 1 2 1 1 ..."
  },
  {
    "objectID": "slides/data-visualization-1.html#todays-goal",
    "href": "slides/data-visualization-1.html#todays-goal",
    "title": "Data Visualization Day 1",
    "section": "Today’s goal",
    "text": "Today’s goal\nCreate this figure showing the relationship between actual frequency and subjective frequency rating of each word, considering the class the word belongs to"
  },
  {
    "objectID": "slides/data-visualization-1.html#data",
    "href": "slides/data-visualization-1.html#data",
    "title": "Data Visualization Day 1",
    "section": "1 data",
    "text": "1 data\n\nUse ratings data\n\n\n\nggplot(\n    data = ratings\n )"
  },
  {
    "objectID": "slides/data-visualization-1.html#aesthetic-mapping",
    "href": "slides/data-visualization-1.html#aesthetic-mapping",
    "title": "Data Visualization Day 1",
    "section": "2 aesthetic mapping",
    "text": "2 aesthetic mapping\n\nMap Frequency to x-axis and meanFamiliarity to y-axis.\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n )"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom",
    "href": "slides/data-visualization-1.html#geom",
    "title": "Data Visualization Day 1",
    "section": "3 geom",
    "text": "3 geom\n\nRepresent each value with a point.\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point()"
  },
  {
    "objectID": "slides/data-visualization-1.html#mapping-categorical-variables",
    "href": "slides/data-visualization-1.html#mapping-categorical-variables",
    "title": "Data Visualization Day 1",
    "section": "Mapping categorical variables",
    "text": "Mapping categorical variables\n\nWhen a categorical variable is mapped to an aesthetic, ggplot2 will automatically assign a unique value of the aesthetic (here color) … a process known as scaling. – R4DS\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity,\n        color = Class\n    )\n ) +\n  geom_point()"
  },
  {
    "objectID": "slides/data-visualization-1.html#global-vs.-local-aesthetics",
    "href": "slides/data-visualization-1.html#global-vs.-local-aesthetics",
    "title": "Data Visualization Day 1",
    "section": "Global vs. local aesthetics",
    "text": "Global vs. local aesthetics\n\nglobally in ggplot(), which are passed down to all geoms\nlocally in geom_*() which are used by that geom only\n\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class)\n    )"
  },
  {
    "objectID": "slides/data-visualization-1.html#mapping-vs.-setting-aesthetics",
    "href": "slides/data-visualization-1.html#mapping-vs.-setting-aesthetics",
    "title": "Data Visualization Day 1",
    "section": "Mapping vs. setting aesthetics",
    "text": "Mapping vs. setting aesthetics\n\nmapping allows us to determine a geom’s aesthetics based on a variable, and is passed as argument in aes()\nsetting allows us to set a geom’s aestheics to a constant value (not based on any variable), and passed as argument in geom_*() directly\n\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class), \n    size = 3\n    )"
  },
  {
    "objectID": "slides/data-visualization-1.html#labels-title-and-subtitle",
    "href": "slides/data-visualization-1.html#labels-title-and-subtitle",
    "title": "Data Visualization Day 1",
    "section": "labels: title and subtitle",
    "text": "labels: title and subtitle\n\nAdd title “Subjective frequency ratings” with subtitle “for 81 english nouns”\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class), \n    size = 3\n    ) +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\"\n  )"
  },
  {
    "objectID": "slides/data-visualization-1.html#labels-x-and-y-axis",
    "href": "slides/data-visualization-1.html#labels-x-and-y-axis",
    "title": "Data Visualization Day 1",
    "section": "labels: x and y axis",
    "text": "labels: x and y axis\n\nLabel x-axis “Actual frequency” and y-axis “Frequency rating”\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class), \n    size = 3\n    ) +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\"\n  ) \n\n\n\n\n\n\n\n\n\n\n\nNote these are mapped to the aesthetic (x and y)"
  },
  {
    "objectID": "slides/data-visualization-1.html#labels-legend",
    "href": "slides/data-visualization-1.html#labels-legend",
    "title": "Data Visualization Day 1",
    "section": "labels: legend",
    "text": "labels: legend\n\nLabel the legend “word class”.\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class), \n    size = 3\n    ) +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) \n\n\n\n\n\n\n\n\n\n\n\nNote these are mapped to the aesthetic as well (color)"
  },
  {
    "objectID": "slides/data-visualization-1.html#themes",
    "href": "slides/data-visualization-1.html#themes",
    "title": "Data Visualization Day 1",
    "section": "themes",
    "text": "themes\n\nApply classic theme with base_size 20.\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class), \n    size = 3\n    ) +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#scales-changing-color",
    "href": "slides/data-visualization-1.html#scales-changing-color",
    "title": "Data Visualization Day 1",
    "section": "scales: changing color",
    "text": "scales: changing color\n\nRemember: When a categorical variable is mapped to an aesthetic, ggplot2 will automatically assign a unique value of the aesthetic (here color) … a process known as scaling. – R4DS\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class), \n    size = 3\n    ) +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20) +\n  scale_color_brewer(palette = \"Paired\")"
  },
  {
    "objectID": "slides/data-visualization-1.html#color",
    "href": "slides/data-visualization-1.html#color",
    "title": "Data Visualization Day 1",
    "section": "color",
    "text": "color\nMap the color aesthetic to a variable\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class),\n    size = 3\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#color-1",
    "href": "slides/data-visualization-1.html#color-1",
    "title": "Data Visualization Day 1",
    "section": "color",
    "text": "color\nSet a constant value for the color aesthetic\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    color = \"blue\",\n    size = 3\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#size",
    "href": "slides/data-visualization-1.html#size",
    "title": "Data Visualization Day 1",
    "section": "size",
    "text": "size\nSetting a constant value for the size aesthetic\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class),\n    size = 3\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#size-1",
    "href": "slides/data-visualization-1.html#size-1",
    "title": "Data Visualization Day 1",
    "section": "size",
    "text": "size\nMapped the size aesthetic to a variable\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(\n        color = Class,\n        size = Complex\n    ),\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#shape",
    "href": "slides/data-visualization-1.html#shape",
    "title": "Data Visualization Day 1",
    "section": "shape",
    "text": "shape\nMap the shape aesthetic to a different variable\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(\n        color = Class,\n        shape = Complex),\n    size = 3\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#shape-1",
    "href": "slides/data-visualization-1.html#shape-1",
    "title": "Data Visualization Day 1",
    "section": "shape",
    "text": "shape\nMap the shape aesthetic to the same variable\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(\n        color = Class,\n        shape = Class),\n    size = 3\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#alpha",
    "href": "slides/data-visualization-1.html#alpha",
    "title": "Data Visualization Day 1",
    "section": "alpha",
    "text": "alpha\nSet a constant value for the alpha aesthetic\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(\n        color = Class,\n        shape = Class),\n    alpha = 0.5,\n    size = 3\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#alpha-1",
    "href": "slides/data-visualization-1.html#alpha-1",
    "title": "Data Visualization Day 1",
    "section": "alpha",
    "text": "alpha\nMapped to a variable\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(\n        color = Class,\n        shape = Class,\n        alpha = Length),\n    size = 3\n    ) +\n theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_-aka-geoms",
    "href": "slides/data-visualization-1.html#geom_-aka-geoms",
    "title": "Data Visualization Day 1",
    "section": "geom_*() aka geoms",
    "text": "geom_*() aka geoms\nThere are many. We will start with these, and add a few additional geoms as we move through the course:\n\n\n\n\n\n\n\ngeom_histogram()\nhistogram, distribution of a continuous variable\n\n\ngeom_density()\ndistribution of a continuous variable\n\n\ngeom_bar()\ndistribution of a categorical data\n\n\ngeom_point()\nscatterplot\n\n\ngeom_smooth()\nsmoothed line of best fit"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_histogram",
    "href": "slides/data-visualization-1.html#geom_histogram",
    "title": "Data Visualization Day 1",
    "section": "geom_histogram()",
    "text": "geom_histogram()\n\nA histogram divides the x-axis into equally spaced bins and then uses the height of a bar to display the number of observations that fall in each bin. – R4DS\n\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram()"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_histogram-1",
    "href": "slides/data-visualization-1.html#geom_histogram-1",
    "title": "Data Visualization Day 1",
    "section": "geom_histogram()",
    "text": "geom_histogram()\nbins - How many bins should we have?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        bins = 10\n    )"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_histogram-2",
    "href": "slides/data-visualization-1.html#geom_histogram-2",
    "title": "Data Visualization Day 1",
    "section": "geom_histogram()",
    "text": "geom_histogram()\nbinwidth - How wide should the bins be?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        binwidth = 0.25\n    )"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_histogram-3",
    "href": "slides/data-visualization-1.html#geom_histogram-3",
    "title": "Data Visualization Day 1",
    "section": "geom_histogram()",
    "text": "geom_histogram()\ncolor - What should the outline color be?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        binwidth = 0.25,\n        color = \"red\"\n    )"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_histogram-4",
    "href": "slides/data-visualization-1.html#geom_histogram-4",
    "title": "Data Visualization Day 1",
    "section": "geom_histogram()",
    "text": "geom_histogram()\nfill - What should the fill color be?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        binwidth = 0.25,\n        color = \"red\",\n        fill = \"lightblue\"\n    )"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_density",
    "href": "slides/data-visualization-1.html#geom_density",
    "title": "Data Visualization Day 1",
    "section": "geom_density()",
    "text": "geom_density()\n\nImagine a histogram made out of wooden blocks. Then, imagine that you drop a cooked spaghetti string over it. The shape the spaghetti will take draped over blocks can be thought of as the shape of the density curve. – R4DS\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_density()"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_density-1",
    "href": "slides/data-visualization-1.html#geom_density-1",
    "title": "Data Visualization Day 1",
    "section": "geom_density()",
    "text": "geom_density()\nMap Class to color aesthetic\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity,\n        color = Class\n    )\n) + \n    geom_density()"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_density-2",
    "href": "slides/data-visualization-1.html#geom_density-2",
    "title": "Data Visualization Day 1",
    "section": "geom_density()",
    "text": "geom_density()\nSet linewidth\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity,\n        color = Class\n    )\n) + \n    geom_density(linewidth = 2)"
  },
  {
    "objectID": "slides/data-visualization-1.html#geom_density-3",
    "href": "slides/data-visualization-1.html#geom_density-3",
    "title": "Data Visualization Day 1",
    "section": "geom_density()",
    "text": "geom_density()\nMap Class to fill and set alpha\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity,\n        fill = Class\n    )\n) + \n    geom_density(alpha = 0.5) \n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://kathrynschuler.com/datasci"
  },
  {
    "objectID": "notes/data-visualization.html",
    "href": "notes/data-visualization.html",
    "title": "Week 2: Data visualization",
    "section": "",
    "text": "Tuesday: Slides and Demo\nThursday: Slides\n\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThese notes are adapted from Data visualization and Layers chapters in R for Data Science"
  },
  {
    "objectID": "notes/data-visualization.html#facets",
    "href": "notes/data-visualization.html#facets",
    "title": "Week 2: Data visualization",
    "section": "5.1 Facets",
    "text": "5.1 Facets\nFacets are smaller plots that display different subsets of the data. They are often used as an alternative to aesthetics to plot additional categorical variables.\n\nfacet_wrap(~var) - splits a plot into subplots based on a categorical variable; each subplot displays a subset of the data. The ncol argument takes a number and specifies the number of columns.\nfacet_grid(rows~cols) - splits a plot into subplots with the combination of two variables, one as the rows of the facet and one as the columns. To leave off rows (or cols), use the ., e.g. facet_grid(.~species)\nscales - by default facets share the same scale and range for x and y aesthetics. Set the scales argument to “free” to allow for different axis scales, e.g. scales=\"free\""
  },
  {
    "objectID": "notes/data-visualization.html#labels",
    "href": "notes/data-visualization.html#labels",
    "title": "Week 2: Data visualization",
    "section": "5.2 Labels",
    "text": "5.2 Labels\nThe labs() functions allows you to modify axis, legend, and plot labels. labs() takes several arguments.\nSome are a straightforward name, like:\n\ntitle - plot title\nsubtitle - plot subtitle\ncaption - caption at bottom right of plot\n\nOthers are mapped to aesthetics, like:\n\nx - the x axis label\ny - the y axis label\ncolor - the legend for the color aesthetic\nsize - the legend for the size aesthetic"
  },
  {
    "objectID": "notes/data-visualization.html#themes",
    "href": "notes/data-visualization.html#themes",
    "title": "Week 2: Data visualization",
    "section": "5.3 Themes",
    "text": "5.3 Themes\nggplot2 comes with many complete themes which control how everything is displayed (except data!). A few favorites include:\n\ntheme_gray() - the default\ntheme_bw() - classic dark-on-light theme\ntheme_minimal() - minimal theme with no background annotations\ntheme_classic() - a classic looking theme with no gridelines\n\nThemes take a few arguments, two of which we may use in the class:\n\nbase_size - base font size, given in pts\nbase_family - base font family to use"
  },
  {
    "objectID": "notes/data-visualization.html#scales",
    "href": "notes/data-visualization.html#scales",
    "title": "Week 2: Data visualization",
    "section": "5.4 Scales",
    "text": "5.4 Scales\nScales control the details of how data values are translated to visual properties. Adding a scale layer overrides the default scales that ggplot2 uses automatically. There are many kinds of scales, but we will mostly encounter them when changing colors of things:\n\nscale_color_brewer() - changes the color, allows you to select color palettes from the RColorBrewer package with palette argument, e.g. palette=\"Greens\"\nscale_fill_manual() - also changes the color, set to manual values with values argument, e.g. values=c(\"green\", \"blue\", \"red\")"
  },
  {
    "objectID": "notes/data-wrangling.html",
    "href": "notes/data-wrangling.html",
    "title": "Data import, tidy, wrangle",
    "section": "",
    "text": "Under construction\n\n\n\nNotes may change between now and the lecture"
  },
  {
    "objectID": "notes/data-wrangling.html#welcome-to-the-tidyverse",
    "href": "notes/data-wrangling.html#welcome-to-the-tidyverse",
    "title": "Data import, tidy, wrangle",
    "section": "1.1 Welcome to the tidyverse",
    "text": "1.1 Welcome to the tidyverse\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. ~ Tidyverse package docs\n\nThe tidyverse collection of packages includes:\n\nggplot2 - for data visualization\ndplyr - for data wrangling\nreadr - for reading data\ntibble - for modern data frames\nstringr: for string manipulation\nforcats: for dealing with factors\ntidyr: for data tidying\npurrr: for functional programming\nlubridate: for working with dates and times\n\nWe load the tidyverse like any other package, with library(tidyverse). When we do, we will receive a message with (1) a list packages that were loaded and (2) a warning that there are potential conflicts with base R’s stats functions\n\nWe can resolve conflicts with the :: operator, which allows us to specify which package our intended function belongs to as a prefix: stats::filter() or dplyr::filter()"
  },
  {
    "objectID": "notes/data-wrangling.html#what-is-tidy-data",
    "href": "notes/data-wrangling.html#what-is-tidy-data",
    "title": "Data import, tidy, wrangle",
    "section": "1.2 What is tidy data?",
    "text": "1.2 What is tidy data?\nThe same underlying data can be represented in a table in many different ways; some easier to work with than others. The tidyverse makes use of tidy data principles to make datasets easier to work with in R. Tidy data provides a standard way of structuring datasets:\n\neach variable forms a column; each column forms a variable\neach observation forms a row; each row forms an observation\nvalue is a cell; each cell is a single value\n\nWhy is tidy data easier to work with?\n\nBecause consistency and uniformity are very helpful when programming\nVariables as columns works well for vectorized languages (R!)"
  },
  {
    "objectID": "notes/data-wrangling.html#functional-programming-with-purrr",
    "href": "notes/data-wrangling.html#functional-programming-with-purrr",
    "title": "Data import, tidy, wrangle",
    "section": "1.3 Functional programming with purrr",
    "text": "1.3 Functional programming with purrr\n\npurrr enhances R’s functional programming (FP) toolkit by providing a complete and consistent set of tools for working with functions and vectors. If you’ve never heard of FP before, the best place to start is the family of map() functions which allow you to replace many for loops with code that is both more succinct and easier to read. ~ purrr docs\n\nLet’s illustrate the joy of the tidyverse with one of its packages: purrr. The docs say that the best place to start is the family of map() functions, so we’ll do that.\nThe map() functions:\n\ntake a vector as input\napply a function to each element\nreturn a new vector\n\nWe say “functions” because there are 5, the generic map() function and map_*() variants for each type of vector:\n\nmap()\nmap_lgl()\nmap_int()\nmap_dbl()\nmap_chr()\n\nTo illustrate, suppose we have a data frame df with 3 columns and we want to compute the mean of each column. We could solve this with copy-and-paste (run mean() 3 different times) or try to use a for loop, but map() can do this with just one line:\n# We use `map_dbl()` because `mean()` returns a *double* value\nmap_dbl(df, mean)"
  },
  {
    "objectID": "notes/data-wrangling.html#modern-data-frames-with-tibble",
    "href": "notes/data-wrangling.html#modern-data-frames-with-tibble",
    "title": "Data import, tidy, wrangle",
    "section": "1.4 Modern data frames with tibble",
    "text": "1.4 Modern data frames with tibble\n\nA tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less and complain more ~ tibble docs\n\nTibbles do less than data frames, in a good way:\n\nnever changes type of input (never converts strings to factors!)\nnever changes the name of variables\nonly recycles vectors of length 1\nnever creates row names\n\nYou can read more in the tibble vignette if you are interested, but understanding these differences is not necessary to be successful in the course. The take-away is that data.frame and tibble sometimes behave differently. The behavior of tibble makes more sense for modern data science, so we should us it instead!\nCreate a tibble with one of the following:\n# (1) coerce an existing object (e.g., a data frame) to tibble\nas_tibble(x)\n\n# (2) construct a tibble from a column of vectors\ntibble(x=1:5, y=1)\n\n# (3) define row-by-row, short for transposed tibble\ntribble(\n    ~x, ~y, ~z,\n    \"a\", 2, 3.6,\n    \"b\", 1, 8.5\n)\nWe will encounter two main ways tibbles and data frames differ:\n\nprinting - by default, tibbles print the first 10 rows and all columns that fit on screen, making it easier to work with large datasets. Tibbles also report the type of each column (e.g. &lt;dbl&gt;, &lt;chr&gt;)\nsubsetting - tibbles are more strict than data frames, which fixes two quirks we encountered last lecture when subsetting with [[ and $: (1) tibbles never do partial matching, and (2) they always generate a warning if the column you are trying to extract does not exist.\n\nTo test if something is a tibble or a data.frame:\n\nis_tibble(x)\nis.data.frame(x)"
  },
  {
    "objectID": "notes/data-wrangling.html#reading-data-with-readr",
    "href": "notes/data-wrangling.html#reading-data-with-readr",
    "title": "Data import, tidy, wrangle",
    "section": "1.5 Reading data with readr",
    "text": "1.5 Reading data with readr\n\nThe goal of readr is to provide a fast and friendly way to read rectangular data from delimited files, such as comma-separated values (CSV) and tab-separated values (TSV). It is designed to parse many types of data found in the wild, while providing an informative problem report when parsing leads to unexpected results.\nreadr docs\n\nOften we want to read in some data we’ve generated or collected outside of R. The most basic and common format is plain-text rectangular files. We will “read” these into R with readr’s read_*() functions.\nThe read_*() functions have two important arguments:\n\nfile - the path to the file (that reader will try to parse)\ncol_types - column specification, a description of how each column should be converted from a character vector to a specific data type\n\nThere are 7 supported file types, each with their own read_*() function:\n\nread_csv(): comma-separated values (CSV)\nread_tsv(): tab-separated values (TSV)\nread_csv2(): semicolon-separated values\nread_delim(): delimited files (CSV and TSV are important special cases)\nread_fwf(): fixed-width files\nread_table(): whitespace-separated files\nread_log(): web log files\n\nTo read .csv files, include a path and (optionally) a column specification in col_types:\n# (1) pass only the path; readr guesses col_types \nread_csv(file='path/to/file.csv')\n\n# (2) include a column specification with col_types\nread_csv(\n    file='path/to/file.csv', \n    col_types = list( x = col_string(), y = col_skip() )\n)\nWith no column specification, readr uses the the first 1000 rows to guess with a simple heuristic:\n\nif column contains only T/F, logical\nif only numbers, double\nif ISO8601 standard, date or date-time\notherwise string\n\nThere are 11 column types that can be specified:\n\ncol_logical() - reads as boolean TRUE FALSE values\ncol_integer() - reads as integer\ncol_double() - reads as double\ncol_number() - numeric parser that can ignore non-numbers\ncol_character() - reads as strings\ncol_factor(levels, ordered = FALSE) - creates factors\ncol_datetime(format = \"\") - creates date-times\ncol_date(format = \"\") - creates dates\ncol_time(format = \"\") - creates times\ncol_skip() - skips a column\ncol_guess() - tries to guess the column\n\nSome useful additional arguments:\n\nif there is no header (the top row containing column names), include col_names = FALSE\nto provide a header, include col_names = c(\"x\",\"y\",\"z\")\nto skip some lines, include skip = n, where n is number of lines to skip\nto select which columns to import, include col_select(x, y)\nto guess column types with all rows, include guess_max = Inf\n\nSometimes weird things happen. The most common problems are:\n\ncolumn contains unexpected values - your dataset has a column that you expected to be logical or double, but there is a typo somewhere, so R has coerced the column into character. Solve by specifying the column type col_double() and then using the problems() function to see where R failed.\nmissing values are not NA - your dataset has missing values, but they were not coded as NA as R expects. Solve by adding an na argument (e.g. na=c(\"N/A\"))\ncolumn names have spaces - your dataset has column names that include spaces, breaking R’s naming rules. In these cases, R adds backticks (e.g. `brain size`); we can use the rename() function to fix them. If we have a lot to rename and that gets annoying, see janitor::clean_names().\n\nReading more complex file types requires functions outside the tidyverse:\n\nexcel with readxl - see Spreadsheets in R for Data Science\ngoogle sheets with googlesheets4 - see Spreadsheets in R for Data Science\ndatabases with DBI - see Databases in R for Data Science\njson data with jsonlite - see Hierarchical data in R for Data Science"
  },
  {
    "objectID": "notes/data-wrangling.html#writing-data",
    "href": "notes/data-wrangling.html#writing-data",
    "title": "Data import, tidy, wrangle",
    "section": "1.6 Writing data",
    "text": "1.6 Writing data\nWe can also write to a csv file with:\nwrite_csv(our_tibble, \"name_of_file.csv\")"
  },
  {
    "objectID": "notes/data-wrangling.html#why-wrangle",
    "href": "notes/data-wrangling.html#why-wrangle",
    "title": "Data import, tidy, wrangle",
    "section": "2.1 Why wrangle?",
    "text": "2.1 Why wrangle?\n\nVisualization is an important tool for generating insight, but it’s rare that you get the data in exactly the right form you need to make the graph you want. Often you’ll need to create some new variables or summaries to answer your questions with your data, or maybe you just want to rename the variables or reorder the observations to make the data a little easier to work with."
  },
  {
    "objectID": "notes/data-wrangling.html#data-wrangling-with-dplyr",
    "href": "notes/data-wrangling.html#data-wrangling-with-dplyr",
    "title": "Data import, tidy, wrangle",
    "section": "2.2 Data wrangling with dplyr",
    "text": "2.2 Data wrangling with dplyr\nAll dplyr functions (verbs) share a common structure:\n\n1st argument is always a data frame\nSubsequent arguments typically describe which columns to operate on (via their names)\nOutput is always a new data frame\n\nWe can group dplyr functions based on what they operate on:\n\nrows - see section 3 Manipulating rows\ncolumns - see section 4 Manipulating columns\ngroups - see section 5 Grouping and summarizing data frames\ntables - see section 6 Joining data frames\n\nWe can easily combine dplyr functions to solve complex problems:\n\nThe pipe operator, |&gt; takes the output from one function and passes it as input (the first argument) to the next function.\nThere is another version of the pipe, %&gt;%. See the reading on data transformation if you are curious about the difference.\n\nIn lecture, we will demonstrate with the 3 most common dplyr functions for manipulating rows, manipulating columns, and grouping. But you should feel comfortable reading the docs/resources to use others to solve unique problems."
  },
  {
    "objectID": "notes/data-wrangling.html#manipulating-rows",
    "href": "notes/data-wrangling.html#manipulating-rows",
    "title": "Data import, tidy, wrangle",
    "section": "2.3 Manipulating rows",
    "text": "2.3 Manipulating rows\nfilter() filters rows, allowing you to keep only some rows based on the values of the columns.\n\nthe first argument is a data frame (all dplyr verbs)\nsubsequent arguments are the conditions that must be true to keep the row (using R’s logical and comparison operators we learned in R basics!), e.g. filter(age &gt; 18)\na common filtering mistake is to use = instead of the logical operator ==!\n\narrange() arranges the rows in the order you specify based on column values (does not change the number of rows, just changes their order)\n\nthe first argument is a data frame (all dplyr verbs)\nsubsequent arguments are a set of column names to order by\nnote that the default order is ascending, but you can specify descending by wrapping the column in the desc() function\n\ndistinct() finds unique rows in a dataset, but you can also provide column names\n\nthe first argument is a data frame\noptionally subsequent arguments provides column names to find the distinct combination of some variables\nnote that if you provide column names, distinct will only return those columns unless you add the argument .keep_all=TRUE"
  },
  {
    "objectID": "notes/data-wrangling.html#manipulating-columns",
    "href": "notes/data-wrangling.html#manipulating-columns",
    "title": "Data import, tidy, wrangle",
    "section": "2.4 Manipulating columns",
    "text": "2.4 Manipulating columns\nmutate() adds new columns that are calculated from existing columns\n\nfirst argument is a data frame (all dplyr verbs)\nsubsequent arguments are the new column name, an equals sign, followed by an expression you want to use to calculate the new value, e.g. difference=age_end - age_start\nby default new columns are added to the right, but the .before and .after arguments allows you to add them before/after specific positions (by position number, e.g. .before=1 or by column name, e.g. before=age)\n\nselect() selects columns based on their names\n\nfirst argument is a data frame (all dplyr verbs)\nsubsequent arguments can be the names of the columns you want to keep\nuse the : operator to select everything from one column to another, e.g. age:height\nyou can also use logical operators like & (and) or ! (not) to identify the subset of columns you want to select, e.g. !age:height\nyou can also rename columns within select by putting the name of the column and an equals sign before the column you want to select, e.g. new_name=selected_column\n\nrename() we’ve already seen this function when importing data. Rename is used when want to keep all of our columns but rename one or more.\n\nfirst argument is a data frame (all dplyr verbs)\nsubsequent arguments are the columns we would like to rename, e.g. new_colname=old_colname"
  },
  {
    "objectID": "notes/data-wrangling.html#group-and-summarise",
    "href": "notes/data-wrangling.html#group-and-summarise",
    "title": "Data import, tidy, wrangle",
    "section": "2.5 Group and summarise",
    "text": "2.5 Group and summarise\nIn addition to manipulating rows and columns in your dataset, dplyr also allows you to work with groups\ngroup_by() is used to divide your dataset into groups that are meaningful for your analysis.\n\ngroup_by() doesn’t change the data, but adds a groups attribute, which tells R that subsequent operations will be performed by group\nyou can tell if a data frame is grouped by the first line of the output (or with attributes()!)\n\nsummarise() is often used after group_by() to calculate summary statistics on grouped data, which returns a data frame with a single row for each group\n\nyou can add any number of summary stats; usually you want to name them something that makes sense for your analysis\n\nn() is a particularly useful summary stat to add to our list that returns a count\nuse the argument na.rm=TRUE to compute the summary statistics with NAs removed (remember they are contageous!)\nnote that the returned data frame is iteself grouped, but in a quirky way, with one fewer group (you may get a warning about this). You can add the argument .groups=\"drop\" to drop all groups or .groups=\"keep\" to keep them all\nto avoid this quirk, summarise() also has a cool new .by argument that can be used instead of calling group_by(), which always returns an ungrouped data frame.\n\nungroup() is used to remove the grouping attribute from a data frame"
  },
  {
    "objectID": "notes/data-wrangling.html#more-advanced",
    "href": "notes/data-wrangling.html#more-advanced",
    "title": "Data import, tidy, wrangle",
    "section": "2.6 More advanced",
    "text": "2.6 More advanced\nThere are a few more advanced techniques for transforming and tidying data that we won’t cover now, but might be useful to you in your own research.\n\njoins - sometimes you have more than one dataset that you want to join into one. dplyr also has functions for handling that. Learn more about joins\npivots - sometimes your data doesn’t arrive in the tidy data form. The tidyr package can help with pivot_longer() and pivot_wider(). Learn more about pivots"
  },
  {
    "objectID": "notes/data-wrangling.html#further-reading-and-references",
    "href": "notes/data-wrangling.html#further-reading-and-references",
    "title": "Data wrangling",
    "section": "3.7 Further reading and references",
    "text": "3.7 Further reading and references\nRecommended further reading:\n\nData tidying in R for Data Science\nTibbles in R for Data Science\nData import in R for Data Science\nreadr cheatsheet\nCh 4 Data transformation in R for Data Science textbook\n\nOther references:\n\nCh 20 Joins in R for Data Science textbook\nCh 6 Data tidying in R for Data Science textbook"
  },
  {
    "objectID": "index.html#welcome-to-the-tidyverse",
    "href": "index.html#welcome-to-the-tidyverse",
    "title": "Data import, tidy, wrangle",
    "section": "Welcome to the tidyverse",
    "text": "Welcome to the tidyverse\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. ~ Tidyverse package docs\n\nThe tidyverse collection of packages includes:\n\nggplot2 - for data visualization\ndplyr - for data wrangling\nreadr - for reading data\ntibble - for modern data frames\nstringr: for string manipulation\nforcats: for dealing with factors\ntidyr: for data tidying\npurrr: for functional programming\nlubridate: for working with dates and times\n\nWe load the tidyverse like any other package, with library(tidyverse). When we do, we will receive a message with (1) a list packages that were loaded and (2) a warning that there are potential conflicts with base R’s stats functions\n\nWe can resolve conflicts with the :: operator, which allows us to specify which package our intended function belongs to as a prefix: stats::filter() or dplyr::filter()",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#what-is-tidy-data",
    "href": "index.html#what-is-tidy-data",
    "title": "Data import, tidy, wrangle",
    "section": "What is tidy data?",
    "text": "What is tidy data?\nThe same underlying data can be represented in a table in many different ways; some easier to work with than others. The tidyverse makes use of tidy data principles to make datasets easier to work with in R. Tidy data provides a standard way of structuring datasets:\n\neach variable forms a column; each column forms a variable\neach observation forms a row; each row forms an observation\nvalue is a cell; each cell is a single value\n\nWhy is tidy data easier to work with?\n\nBecause consistency and uniformity are very helpful when programming\nVariables as columns works well for vectorized languages (R!)",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#functional-programming-with-purrr",
    "href": "index.html#functional-programming-with-purrr",
    "title": "Data import, tidy, wrangle",
    "section": "Functional programming with purrr",
    "text": "Functional programming with purrr\n\npurrr enhances R’s functional programming (FP) toolkit by providing a complete and consistent set of tools for working with functions and vectors. If you’ve never heard of FP before, the best place to start is the family of map() functions which allow you to replace many for loops with code that is both more succinct and easier to read. ~ purrr docs\n\nLet’s illustrate the joy of the tidyverse with one of its packages: purrr. The docs say that the best place to start is the family of map() functions, so we’ll do that.\nThe map() functions:\n\ntake a vector as input\napply a function to each element\nreturn a new vector\n\nWe say “functions” because there are 5, the generic map() function and map_*() variants for each type of vector:\n\nmap()\nmap_lgl()\nmap_int()\nmap_dbl()\nmap_chr()\n\nTo illustrate, suppose we have a data frame df with 3 columns and we want to compute the mean of each column. We could solve this with copy-and-paste (run mean() 3 different times) or try to use a for loop, but map() can do this with just one line:\n# We use `map_dbl()` because `mean()` returns a *double* value\nmap_dbl(df, mean)",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#modern-data-frames-with-tibble",
    "href": "index.html#modern-data-frames-with-tibble",
    "title": "Data import, tidy, wrangle",
    "section": "Modern data frames with tibble",
    "text": "Modern data frames with tibble\n\nA tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less and complain more ~ tibble docs\n\nTibbles do less than data frames, in a good way:\n\nnever changes type of input (never converts strings to factors!)\nnever changes the name of variables\nonly recycles vectors of length 1\nnever creates row names\n\nYou can read more in the tibble vignette if you are interested, but understanding these differences is not necessary to be successful in the course. The take-away is that data.frame and tibble sometimes behave differently. The behavior of tibble makes more sense for modern data science, so we should us it instead!\nCreate a tibble with one of the following:\n# (1) coerce an existing object (e.g., a data frame) to tibble\nas_tibble(x)\n\n# (2) construct a tibble from a column of vectors\ntibble(x=1:5, y=1)\n\n# (3) define row-by-row, short for transposed tibble\ntribble(\n    ~x, ~y, ~z,\n    \"a\", 2, 3.6,\n    \"b\", 1, 8.5\n)\nWe will encounter two main ways tibbles and data frames differ:\n\nprinting - by default, tibbles print the first 10 rows and all columns that fit on screen, making it easier to work with large datasets. Tibbles also report the type of each column (e.g. &lt;dbl&gt;, &lt;chr&gt;)\nsubsetting - tibbles are more strict than data frames, which fixes two quirks we encountered last lecture when subsetting with [[ and $: (1) tibbles never do partial matching, and (2) they always generate a warning if the column you are trying to extract does not exist.\n\nTo test if something is a tibble or a data.frame:\n\nis_tibble(x)\nis.data.frame(x)",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#reading-data-with-readr",
    "href": "index.html#reading-data-with-readr",
    "title": "Data import, tidy, wrangle",
    "section": "Reading data with readr",
    "text": "Reading data with readr\n\nThe goal of readr is to provide a fast and friendly way to read rectangular data from delimited files, such as comma-separated values (CSV) and tab-separated values (TSV). It is designed to parse many types of data found in the wild, while providing an informative problem report when parsing leads to unexpected results.\nreadr docs\n\nOften we want to read in some data we’ve generated or collected outside of R. The most basic and common format is plain-text rectangular files. We will “read” these into R with readr’s read_*() functions.\nThe read_*() functions have two important arguments:\n\nfile - the path to the file (that reader will try to parse)\ncol_types - column specification, a description of how each column should be converted from a character vector to a specific data type\n\nThere are 7 supported file types, each with their own read_*() function:\n\nread_csv(): comma-separated values (CSV)\nread_tsv(): tab-separated values (TSV)\nread_csv2(): semicolon-separated values\nread_delim(): delimited files (CSV and TSV are important special cases)\nread_fwf(): fixed-width files\nread_table(): whitespace-separated files\nread_log(): web log files\n\nTo read .csv files, include a path and (optionally) a column specification in col_types:\n# (1) pass only the path; readr guesses col_types \nread_csv(file='path/to/file.csv')\n\n# (2) include a column specification with col_types\nread_csv(\n    file='path/to/file.csv', \n    col_types = list( x = col_string(), y = col_skip() )\n)\nWith no column specification, readr uses the the first 1000 rows to guess with a simple heuristic:\n\nif column contains only T/F, logical\nif only numbers, double\nif ISO8601 standard, date or date-time\notherwise string\n\nThere are 11 column types that can be specified:\n\ncol_logical() - reads as boolean TRUE FALSE values\ncol_integer() - reads as integer\ncol_double() - reads as double\ncol_number() - numeric parser that can ignore non-numbers\ncol_character() - reads as strings\ncol_factor(levels, ordered = FALSE) - creates factors\ncol_datetime(format = \"\") - creates date-times\ncol_date(format = \"\") - creates dates\ncol_time(format = \"\") - creates times\ncol_skip() - skips a column\ncol_guess() - tries to guess the column\n\nSome useful additional arguments:\n\nif there is no header (the top row containing column names), include col_names = FALSE\nto provide a header, include col_names = c(\"x\",\"y\",\"z\")\nto skip some lines, include skip = n, where n is number of lines to skip\nto select which columns to import, include col_select(x, y)\nto guess column types with all rows, include guess_max = Inf\n\nSometimes weird things happen. The most common problems are:\n\ncolumn contains unexpected values - your dataset has a column that you expected to be logical or double, but there is a typo somewhere, so R has coerced the column into character. Solve by specifying the column type col_double() and then using the problems() function to see where R failed.\nmissing values are not NA - your dataset has missing values, but they were not coded as NA as R expects. Solve by adding an na argument (e.g. na=c(\"N/A\"))\ncolumn names have spaces - your dataset has column names that include spaces, breaking R’s naming rules. In these cases, R adds backticks (e.g. `brain size`); we can use the rename() function to fix them. If we have a lot to rename and that gets annoying, see janitor::clean_names().\n\nReading more complex file types requires functions outside the tidyverse:\n\nexcel with readxl - see Spreadsheets in R for Data Science\ngoogle sheets with googlesheets4 - see Spreadsheets in R for Data Science\ndatabases with DBI - see Databases in R for Data Science\njson data with jsonlite - see Hierarchical data in R for Data Science",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#writing-data",
    "href": "index.html#writing-data",
    "title": "Data import, tidy, wrangle",
    "section": "Writing data",
    "text": "Writing data\nWe can also write to a csv file with:\nwrite_csv(our_tibble, \"name_of_file.csv\")",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#why-wrangle",
    "href": "index.html#why-wrangle",
    "title": "Data import, tidy, wrangle",
    "section": "Why wrangle?",
    "text": "Why wrangle?\n\nVisualization is an important tool for generating insight, but it’s rare that you get the data in exactly the right form you need to make the graph you want. Often you’ll need to create some new variables or summaries to answer your questions with your data, or maybe you just want to rename the variables or reorder the observations to make the data a little easier to work with.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#data-wrangling-with-dplyr",
    "href": "index.html#data-wrangling-with-dplyr",
    "title": "Data import, tidy, wrangle",
    "section": "Data wrangling with dplyr",
    "text": "Data wrangling with dplyr\nAll dplyr functions (verbs) share a common structure:\n\n1st argument is always a data frame\nSubsequent arguments typically describe which columns to operate on (via their names)\nOutput is always a new data frame\n\nWe can group dplyr functions based on what they operate on:\n\nrows - see section 3 Manipulating rows\ncolumns - see section 4 Manipulating columns\ngroups - see section 5 Grouping and summarizing data frames\ntables - see section 6 Joining data frames\n\nWe can easily combine dplyr functions to solve complex problems:\n\nThe pipe operator, |&gt; takes the output from one function and passes it as input (the first argument) to the next function.\nThere is another version of the pipe, %&gt;%. See the reading on data transformation if you are curious about the difference.\n\nIn lecture, we will demonstrate with the 3 most common dplyr functions for manipulating rows, manipulating columns, and grouping. But you should feel comfortable reading the docs/resources to use others to solve unique problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#manipulating-rows",
    "href": "index.html#manipulating-rows",
    "title": "Data import, tidy, wrangle",
    "section": "Manipulating rows",
    "text": "Manipulating rows\nfilter() filters rows, allowing you to keep only some rows based on the values of the columns.\n\nthe first argument is a data frame (all dplyr verbs)\nsubsequent arguments are the conditions that must be true to keep the row (using R’s logical and comparison operators we learned in R basics!), e.g. filter(age &gt; 18)\na common filtering mistake is to use = instead of the logical operator ==!\n\narrange() arranges the rows in the order you specify based on column values (does not change the number of rows, just changes their order)\n\nthe first argument is a data frame (all dplyr verbs)\nsubsequent arguments are a set of column names to order by\nnote that the default order is ascending, but you can specify descending by wrapping the column in the desc() function\n\ndistinct() finds unique rows in a dataset, but you can also provide column names\n\nthe first argument is a data frame\noptionally subsequent arguments provides column names to find the distinct combination of some variables\nnote that if you provide column names, distinct will only return those columns unless you add the argument .keep_all=TRUE",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#manipulating-columns",
    "href": "index.html#manipulating-columns",
    "title": "Data import, tidy, wrangle",
    "section": "Manipulating columns",
    "text": "Manipulating columns\nmutate() adds new columns that are calculated from existing columns\n\nfirst argument is a data frame (all dplyr verbs)\nsubsequent arguments are the new column name, an equals sign, followed by an expression you want to use to calculate the new value, e.g. difference=age_end - age_start\nby default new columns are added to the right, but the .before and .after arguments allows you to add them before/after specific positions (by position number, e.g. .before=1 or by column name, e.g. before=age)\n\nselect() selects columns based on their names\n\nfirst argument is a data frame (all dplyr verbs)\nsubsequent arguments can be the names of the columns you want to keep\nuse the : operator to select everything from one column to another, e.g. age:height\nyou can also use logical operators like & (and) or ! (not) to identify the subset of columns you want to select, e.g. !age:height\nyou can also rename columns within select by putting the name of the column and an equals sign before the column you want to select, e.g. new_name=selected_column\n\nrename() we’ve already seen this function when importing data. Rename is used when want to keep all of our columns but rename one or more.\n\nfirst argument is a data frame (all dplyr verbs)\nsubsequent arguments are the columns we would like to rename, e.g. new_colname=old_colname",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#group-and-summarise",
    "href": "index.html#group-and-summarise",
    "title": "Data import, tidy, wrangle",
    "section": "Group and summarise",
    "text": "Group and summarise\nIn addition to manipulating rows and columns in your dataset, dplyr also allows you to work with groups\ngroup_by() is used to divide your dataset into groups that are meaningful for your analysis.\n\ngroup_by() doesn’t change the data, but adds a groups attribute, which tells R that subsequent operations will be performed by group\nyou can tell if a data frame is grouped by the first line of the output (or with attributes()!)\n\nsummarise() is often used after group_by() to calculate summary statistics on grouped data, which returns a data frame with a single row for each group\n\nyou can add any number of summary stats; usually you want to name them something that makes sense for your analysis\n\nn() is a particularly useful summary stat to add to our list that returns a count\nuse the argument na.rm=TRUE to compute the summary statistics with NAs removed (remember they are contageous!)\nnote that the returned data frame is iteself grouped, but in a quirky way, with one fewer group (you may get a warning about this). You can add the argument .groups=\"drop\" to drop all groups or .groups=\"keep\" to keep them all\nto avoid this quirk, summarise() also has a cool new .by argument that can be used instead of calling group_by(), which always returns an ungrouped data frame.\n\nungroup() is used to remove the grouping attribute from a data frame",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html#more-advanced",
    "href": "index.html#more-advanced",
    "title": "Data import, tidy, wrangle",
    "section": "More advanced",
    "text": "More advanced\nThere are a few more advanced techniques for transforming and tidying data that we won’t cover now, but might be useful to you in your own research.\n\njoins - sometimes you have more than one dataset that you want to join into one. dplyr also has functions for handling that. Learn more about joins\npivots - sometimes your data doesn’t arrive in the tidy data form. The tidyr package can help with pivot_longer() and pivot_wider(). Learn more about pivots",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "labs/lab-02.html",
    "href": "labs/lab-02.html",
    "title": "Lab 2: Data visualization",
    "section": "",
    "text": "Practice your new ggplot skills with these practice exam questions! Best to open a fresh Google Colab notebook and test things out! Refer to the study guide to find answers as well."
  },
  {
    "objectID": "labs/lab-02.html#plot-1",
    "href": "labs/lab-02.html#plot-1",
    "title": "Lab 2: Data visualization",
    "section": "3.1 Plot 1",
    "text": "3.1 Plot 1\nGiven code blocks a, b, and c; and the plot below:\n# CODE BLOCK a ---------------------------#\nggplot(\n    data = ratings, \n    mapping = aes(x = Frequency, y = meanFamiliarity)\n    ) +\n    geom_point(color = \"blue\")\n\n# CODE BLOCK b ---------------------------#\nggplot(\n    data = ratings, \n    mapping = aes(x = Frequency, y = meanFamiliarity, color = \"blue\")\n    ) \n\n# CODE BLOCK c ---------------------------#\nggplot(\n    data = ratings, \n    mapping = aes(x = Frequency, y = meanFamiliarity)\n    ) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\nWhich of the code blocks above generate the plot ?\n\n a b c\n\nIn the plot above, is the color aesthetic mapped, set, or both?\n\n mapped set both\n\nIn the plot above, which of the following aesthetics should we set to make the points more transparent?\n\n color fill alpha shape\n\nIn plot A above, which of the following would change the x axis label to “FQ”?\n\n add a labs() layer with x=\"FQ\" argument add a labs() layer with y=\"FQ\" argument change the mapping argument from x=\"Frequency\" to x=\"FQ\""
  },
  {
    "objectID": "labs/lab-02.html#plot-2",
    "href": "labs/lab-02.html#plot-2",
    "title": "Lab 2: Data visualization",
    "section": "3.2 Plot 2",
    "text": "3.2 Plot 2\nGiven the following plot:\n\n\n\n\n\n\n\n\n\n\nIn the plot above, which geom(s) are used to represent the data?\n\n geom_histogram() geom_density() geom_bar() geom_point() geom_smooth()\n\nTrue or false, the blue line in the plot above is mapped to the Class aesthetic?\n\n True False\n\nIn the plot above, which of the following variables is mapped to the x aesthetic?\n\n Frequency meanFamiliarity FreqSingular FreqPlural\n\nTrue or false, in the plot above, the default statistical transformation in the geom responsible for the red dots is “identity”.\n\n True False"
  },
  {
    "objectID": "labs/lab-02.html#additional-questions",
    "href": "labs/lab-02.html#additional-questions",
    "title": "Lab 2: Data visualization",
    "section": "3.3 Additional questions",
    "text": "3.3 Additional questions\nSuppose we run the code below.\nggplot(\n    data = ratings, \n    mapping = aes(x = Frequency, y = meanFamiliarity, color = Class)\n    ) +\n    geom_point() +\n    geom_smooth(method = \"lm\", color = \"red\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich of the following plots will be returned?\n\n Choice 1 Choice 2\n\nSuppose we run the following code block, which plot will be returned?\n\n\n E F G H\n\nggplot(\n    data = ratings, \n    mapping = aes(x = Class, fill = Complex)\n    ) +\n    geom_bar() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo generate the facets in the plot below, which of the following lines of code must be included?\n\n\n facet_grid(Complex ~ Class) facet_grid(Class ~ Complex) facet_grid(.~ Complex) facet_wrap(Class~Complex, ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nTo adjust the size of the font to 20pt in the complete theme theme_minimal(), what argument should we include?\n\n\n base_size(20) size=20 font_family_size=20 None of the above\n\n\nWhat would happen if we added the layer scale_fill_manual(values = c(\"green\", \"orange\")) to the following plot?\n\n\n\n\n\n\n\n\n\n\n\n\n error: no fill aesthetic specified complex would turn green and simplex would turn orange simplex would turn green and complex would turn orange No change"
  },
  {
    "objectID": "labs/lab-02.html#code-block-1",
    "href": "labs/lab-02.html#code-block-1",
    "title": "Lab 2: Data visualization",
    "section": "3.3 Code block 1",
    "text": "3.3 Code block 1\nSuppose we run the following code.\nggplot(\n    data = ratings, \n    mapping = aes(x = Frequency, y = meanFamiliarity, color = Class)\n    ) +\n    geom_point() +\n    geom_smooth(method = \"lm\", color = \"red\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich of the following plots will be returned?\n\n A B\n\nWhich aesthetic is mapped and which is set?\n\n Class is set to color and the smoothing line is mapped to red Class is mapped to color and the smoothing line is set to red Both are mapped Both are set\n\nWhich aesthetic is global and which is local?\n\n Color is mapped to the class variable globally, and set to red locally Color is mapped to the class variable locally, and set to red globally Both are global Both are local"
  },
  {
    "objectID": "labs/lab-02.html#code-block-2",
    "href": "labs/lab-02.html#code-block-2",
    "title": "Lab 2: Data visualization",
    "section": "3.4 Code block 2",
    "text": "3.4 Code block 2\nSuppose we run the following code block\nggplot(\n    data = ratings, \n    mapping = aes(x = Class, fill = Complex)\n    ) +\n    geom_bar() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich plot will be returned?\n\n A B C D\n\nWhat would happen if we added the layer scale_fill_manual(values = c(\"green\", \"orange\")) to the following plot?\n\n error: no fill aesthetic specified complex would turn green and simplex would turn orange simplex would turn green and complex would turn orange No change\n\nWhat argument could we add to geom_bar() to add a black border around the bars?\n\n fill = black border_color = 'black' linetype = 'black' color = 'black'"
  },
  {
    "objectID": "labs/lab-02.html#plot-3",
    "href": "labs/lab-02.html#plot-3",
    "title": "Lab 2: Data visualization",
    "section": "3.5 Plot 3",
    "text": "3.5 Plot 3\nConsider the following plot\n\n\n\n\n\n\n\n\n\n\nTo generate the facets in the plot above, which of the following lines of code must be included?\n\n facet_grid(Complex ~ Class) facet_grid(Class ~ Complex) facet_grid(.~ Complex) facet_wrap(Class~Complex, ncol = 2)\n\nWhich of the following geoms are added to the plot above?\n\n geom_histogram() geom_density() geom_bar() geom_smooth() geom_point()\n\nWhich built-in theme is applied to the following plot?\n\n theme_grey() theme_classic() theme_void() theme_bw()"
  },
  {
    "objectID": "labs/lab-02.html#plot-4",
    "href": "labs/lab-02.html#plot-4",
    "title": "Lab 2: Data visualization",
    "section": "3.6 Plot 4",
    "text": "3.6 Plot 4\nConsider the following plot"
  },
  {
    "objectID": "slides/data-visualization-2.html#announcements",
    "href": "slides/data-visualization-2.html#announcements",
    "title": "Data Visualization Day 2",
    "section": "Announcements",
    "text": "Announcements\n\nPermits have been issued! If you are on the waitlist and have not been issued a permit, please email me!\nThe Friday 12pm lab has 8 more seats 🙂\nThe course we be reopened to regular enrollment today"
  },
  {
    "objectID": "slides/data-visualization-2.html#how-are-we-feeling-today",
    "href": "slides/data-visualization-2.html#how-are-we-feeling-today",
    "title": "Data Visualization Day 2",
    "section": "How are we feeling today?",
    "text": "How are we feeling today?"
  },
  {
    "objectID": "slides/data-visualization-2.html#you-are-here",
    "href": "slides/data-visualization-2.html#you-are-here",
    "title": "Data Visualization Day 2",
    "section": "You are here",
    "text": "You are here\n\n\nData science with R\n\n\nR basics\nData visualization\nData wrangling\n\n\n\nStats & Model buidling\n\n\nSampling distribution\nHypothesis testing\nModel specification\nModel fitting\nModel accuracy\nModel reliability\n\n\n\nMore advanced\n\n\nClassification\nInference for regression\nMixed-effect models"
  },
  {
    "objectID": "slides/data-visualization-2.html#ggplot2",
    "href": "slides/data-visualization-2.html#ggplot2",
    "title": "Data Visualization Day 1",
    "section": "ggplot2",
    "text": "ggplot2\n\n\nFigure 2\nGoogle Colab already has ggplot2 installed by default. There is no need to run install.packages().\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "slides/data-visualization-2.html#todays-data-ratings",
    "href": "slides/data-visualization-2.html#todays-data-ratings",
    "title": "Data Visualization Day 2",
    "section": "Today’s data: ratings",
    "text": "Today’s data: ratings\n\nSubjective frequency ratings, ratings of estimated weight, and ratings of estimated size, averaged over subjects, for 81 concrete English nouns. – languageR\n\n\nlibrary(languageR)\nstr(ratings)\n\n'data.frame':   81 obs. of  14 variables:\n $ Word            : Factor w/ 81 levels \"almond\",\"ant\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ Frequency       : num  4.2 5.35 6.3 3.83 3.66 ...\n $ FamilySize      : num  0 1.39 1.1 0 0 ...\n $ SynsetCount     : num  1.1 1.1 1.1 1.39 1.1 ...\n $ Length          : int  6 3 5 7 9 7 6 6 3 6 ...\n $ Class           : Factor w/ 2 levels \"animal\",\"plant\": 2 1 2 2 2 2 1 2 1 1 ...\n $ FreqSingular    : int  24 69 315 26 19 24 53 74 155 37 ...\n $ FreqPlural      : int  42 140 231 19 19 6 78 77 103 14 ...\n $ DerivEntropy    : num  0 0.562 0.496 0 0 ...\n $ Complex         : Factor w/ 2 levels \"complex\",\"simplex\": 2 2 2 2 2 2 2 2 2 2 ...\n $ rInfl           : num  -0.542 -0.7 0.309 0.3 0 ...\n $ meanWeightRating: num  1.49 3.35 2.19 1.32 1.44 ...\n $ meanSizeRating  : num  1.89 3.63 2.47 1.76 1.87 ...\n $ meanFamiliarity : num  3.72 3.6 5.84 4.4 3.68 4.12 2.12 5.68 3.2 2.2 ..."
  },
  {
    "objectID": "slides/data-visualization-2.html#todays-data-ratings-1",
    "href": "slides/data-visualization-2.html#todays-data-ratings-1",
    "title": "Data Visualization Day 2",
    "section": "Today’s data: ratings",
    "text": "Today’s data: ratings\nWe will make use of the following variables:\n\nFrequency - actual word frequency\nmeanFamiliarity - subjective frequency rating\nClass - whether word is a plant or animal\n\n\n\n\n         Word Frequency  Class\n1      almond  4.204693  plant\n2         ant  5.347108 animal\n3       apple  6.304449  plant\n4     apricot  3.828641  plant\n5   asparagus  3.663562  plant\n6     avocado  3.433987  plant\n7      badger  5.056246 animal\n8      banana  5.023881  plant\n9         bat  5.918894 animal\n10     beaver  3.951244 animal\n11        bee  5.700444 animal\n12   beetroot  3.555348  plant\n13 blackberry  4.060443  plant\n14  blueberry  2.484907  plant\n15   broccoli  2.833213  plant\n16      bunny  3.332205 animal\n17  butterfly  5.214936 animal\n18      camel  6.109248 animal\n19     carrot  4.976734  plant\n20        cat  7.086738 animal\n21     cherry  4.997212  plant\n22    chicken  6.599870 animal\n23      clove  3.663562  plant\n24  crocodile  4.615121 animal\n25   cucumber  4.454347  plant\n26        dog  7.667626 animal\n27    dolphin  4.007333 animal\n28     donkey  5.541264 animal\n29      eagle  5.117994 animal\n30   eggplant  1.791759  plant\n31   elephant  6.063785 animal\n32        fox  5.652489 animal\n33       frog  5.129899 animal\n34    gherkin  2.079442  plant\n35       goat  6.228511 animal\n36      goose  5.267858 animal\n37      grape  5.192957  plant\n38       gull  4.418841 animal\n39   hedgehog  3.637586 animal\n40      horse  7.771910 animal\n41       kiwi  3.044522  plant\n42       leek  3.332205  plant\n43      lemon  5.631212  plant\n44    lettuce  4.812184  plant\n45       lion  6.098074 animal\n46     magpie  2.995732 animal\n47      melon  4.127134  plant\n48       mole  4.605170 animal\n49     monkey  5.783825 animal\n50      moose  2.708050 animal\n51      mouse  5.805135 animal\n52   mushroom  5.537334  plant\n53    mustard  4.442651  plant\n54      olive  5.587249  plant\n55     orange  6.378426  plant\n56        owl  4.859812 animal\n57    paprika  2.484907  plant\n58     peanut  4.595120  plant\n59       pear  4.727388  plant\n60        pig  6.660575 animal\n61     pigeon  5.262690 animal\n62  pineapple  3.988984  plant\n63     potato  6.461468  plant\n64     radish  3.044522  plant\n65   reindeer  4.043051 animal\n66      shark  5.880533 animal\n67      sheep  6.577861 animal\n68      snake  6.120297 animal\n69     spider  4.844187 animal\n70      squid  3.970292 animal\n71   squirrel  4.709530 animal\n72      stork  3.044522 animal\n73 strawberry  4.753590  plant\n74       swan  4.962845 animal\n75     tomato  5.545177  plant\n76   tortoise  4.624973 animal\n77    vulture  4.248495 animal\n78     walnut  4.499810  plant\n79       wasp  4.682131 animal\n80      whale  5.298317 animal\n81 woodpecker  2.890372 animal"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_-aka-geoms",
    "href": "slides/data-visualization-2.html#geom_-aka-geoms",
    "title": "Data Visualization Day 2",
    "section": "geom_*() aka geoms",
    "text": "geom_*() aka geoms\nThere are many. We will start with these, and add a few additional geoms as we move through the course:\n\n\n\n\n\n\n\ngeom_histogram()\nhistogram, distribution of a continuous variable\n\n\ngeom_density()\ndistribution of a continuous variable\n\n\ngeom_bar()\ndistribution of a categorical data\n\n\ngeom_point()\nscatterplot\n\n\ngeom_smooth()\nsmoothed line of best fit"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_histogram",
    "href": "slides/data-visualization-2.html#geom_histogram",
    "title": "Data Visualization Day 2",
    "section": "geom_histogram()",
    "text": "geom_histogram()\n\nA histogram divides the x-axis into equally spaced bins and then uses the height of a bar to display the number of observations that fall in each bin. – R4DS\n\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram()"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_histogram-1",
    "href": "slides/data-visualization-2.html#geom_histogram-1",
    "title": "Data Visualization Day 2",
    "section": "geom_histogram()",
    "text": "geom_histogram()\nbins - How many bins should we have?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        bins = 10\n    )"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_histogram-2",
    "href": "slides/data-visualization-2.html#geom_histogram-2",
    "title": "Data Visualization Day 2",
    "section": "geom_histogram()",
    "text": "geom_histogram()\nbinwidth - How wide should the bins be?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        binwidth = 0.25\n    )"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_histogram-3",
    "href": "slides/data-visualization-2.html#geom_histogram-3",
    "title": "Data Visualization Day 2",
    "section": "geom_histogram()",
    "text": "geom_histogram()\ncolor - What should the outline color be?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        binwidth = 0.25,\n        color = \"red\"\n    )"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_histogram-4",
    "href": "slides/data-visualization-2.html#geom_histogram-4",
    "title": "Data Visualization Day 2",
    "section": "geom_histogram()",
    "text": "geom_histogram()\nfill - What should the fill color be?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_histogram(\n        binwidth = 0.25,\n        color = \"red\",\n        fill = \"lightblue\"\n    )"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_density",
    "href": "slides/data-visualization-2.html#geom_density",
    "title": "Data Visualization Day 2",
    "section": "geom_density()",
    "text": "geom_density()\n\nImagine a histogram made out of wooden blocks. Then, imagine that you drop a cooked spaghetti string over it. The shape the spaghetti will take draped over blocks can be thought of as the shape of the density curve. – R4DS\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity\n    )\n) + \n    geom_density()"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_density-1",
    "href": "slides/data-visualization-2.html#geom_density-1",
    "title": "Data Visualization Day 2",
    "section": "geom_density()",
    "text": "geom_density()\nMap Class to color aesthetic\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity,\n        color = Class\n    )\n) + \n    geom_density()"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_density-2",
    "href": "slides/data-visualization-2.html#geom_density-2",
    "title": "Data Visualization Day 2",
    "section": "geom_density()",
    "text": "geom_density()\nSet linewidth\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity,\n        color = Class\n    )\n) + \n    geom_density(linewidth = 2)"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_density-3",
    "href": "slides/data-visualization-2.html#geom_density-3",
    "title": "Data Visualization Day 2",
    "section": "geom_density()",
    "text": "geom_density()\nMap Class to fill and set alpha\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = meanFamiliarity,\n        fill = Class\n    )\n) + \n    geom_density(alpha = 0.5)"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_bar",
    "href": "slides/data-visualization-2.html#geom_bar",
    "title": "Data Visualization Day 2",
    "section": "geom_bar()",
    "text": "geom_bar()\n\nTo examine the distribution of a categorical variable, you can use a bar chart. The height of the bars displays how many observations occurred with each x value. – R4DS\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Class\n    )\n) + \n    geom_bar()"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_bar---stacked",
    "href": "slides/data-visualization-2.html#geom_bar---stacked",
    "title": "Data Visualization Day 2",
    "section": "geom_bar() - stacked",
    "text": "geom_bar() - stacked\nWe can use stacked bar plots to visualize the relationship between two categorical variables\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Class,\n        fill = Complex\n    )\n) + \n    geom_bar()"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_bar---relative-frequency",
    "href": "slides/data-visualization-2.html#geom_bar---relative-frequency",
    "title": "Data Visualization Day 2",
    "section": "geom_bar() - relative frequency",
    "text": "geom_bar() - relative frequency\nWe can use relative frequency to visualize the relationship between two categorical variables (as a percentage)\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Class,\n        fill = Complex\n    )\n) + \n    geom_bar(position = \"fill\")"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_bar---dodged",
    "href": "slides/data-visualization-2.html#geom_bar---dodged",
    "title": "Data Visualization Day 2",
    "section": "geom_bar() - dodged",
    "text": "geom_bar() - dodged\nWe can use a dodged bar plot to visualize the relationship between two categorical variables side-by-side, not stacked\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Class,\n        fill = Complex\n    )\n) + \n    geom_bar(position = \"dodge\")"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_point",
    "href": "slides/data-visualization-2.html#geom_point",
    "title": "Data Visualization Day 2",
    "section": "geom_point()",
    "text": "geom_point()\n\nScatterplots are useful for displaying the relationship between two numerical variables – R4DS\n\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    color = \"blue\", \n    size = 3\n    ) +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_point-with-geom_smooth",
    "href": "slides/data-visualization-2.html#geom_point-with-geom_smooth",
    "title": "Data Visualization Day 2",
    "section": "geom_point() with geom_smooth()",
    "text": "geom_point() with geom_smooth()\ndraws a best fitting curve\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    color = \"blue\", \n    size = 3\n    ) +\n  geom_smooth() +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_point-with-geom_smoothmethodlm",
    "href": "slides/data-visualization-2.html#geom_point-with-geom_smoothmethodlm",
    "title": "Data Visualization Day 2",
    "section": "geom_point() with geom_smooth(method=\"lm\")",
    "text": "geom_point() with geom_smooth(method=\"lm\")\ndraws the best fitting linear model\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    color = \"blue\", \n    size = 3\n    ) +\n  geom_smooth(method=\"lm\") +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_point-with-geom_smoothmethodlm-1",
    "href": "slides/data-visualization-2.html#geom_point-with-geom_smoothmethodlm-1",
    "title": "Data Visualization Day 2",
    "section": "geom_point() with geom_smooth(method=\"lm\")",
    "text": "geom_point() with geom_smooth(method=\"lm\")\nWe can also map to color, by specifying globally\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity,\n        color = Class\n    )\n ) +\n  geom_point( \n    size = 3\n    ) +\n  geom_smooth(method=\"lm\") +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#geom_point-with-geom_smoothmethodlm-2",
    "href": "slides/data-visualization-2.html#geom_point-with-geom_smoothmethodlm-2",
    "title": "Data Visualization Day 2",
    "section": "geom_point() with geom_smooth(method=\"lm\")",
    "text": "geom_point() with geom_smooth(method=\"lm\")\nOr include only a single smooth, by specifying color in the point geom only\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    aes(color = Class),\n    size = 3\n    ) +\n  geom_smooth(method=\"lm\") +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#facet_grid",
    "href": "slides/data-visualization-2.html#facet_grid",
    "title": "Data Visualization Day 2",
    "section": "facet_grid()",
    "text": "facet_grid()\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point() +\n  facet_grid(Class ~ Complex) +\n  theme_classic(base_size = 20) \n\n\n\n\n\n\n\n\n\n\nCompare with the same data, viewed with two aesthetics (color and shape)\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point(\n    aes(color = Class, shape = Complex)\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#facet_grid-1",
    "href": "slides/data-visualization-2.html#facet_grid-1",
    "title": "Data Visualization Day 1",
    "section": "facet_grid()",
    "text": "facet_grid()\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point() +\n  facet_grid(Class ~ Complex) +\n  theme_classic(base_size = 20) \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point(\n    aes(color = Class, shape = Complex)\n  ) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#facet_grid---just-columns",
    "href": "slides/data-visualization-2.html#facet_grid---just-columns",
    "title": "Data Visualization Day 2",
    "section": "facet_grid() - just columns",
    "text": "facet_grid() - just columns\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point() +\n  facet_grid(. ~ Complex) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#facet_grid---just-columns-1",
    "href": "slides/data-visualization-2.html#facet_grid---just-columns-1",
    "title": "Data Visualization Day 2",
    "section": "facet_grid() - just columns",
    "text": "facet_grid() - just columns\nand note we can still map other aesthetics!\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point(\n    aes(color = Class),\n    shape = \"triangle\"\n  ) +\n  facet_grid(. ~ Complex) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#facet_grid---just-rows",
    "href": "slides/data-visualization-2.html#facet_grid---just-rows",
    "title": "Data Visualization Day 2",
    "section": "facet_grid() - just rows",
    "text": "facet_grid() - just rows\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point() +\n  facet_grid(Class ~ .) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#facet_wrap",
    "href": "slides/data-visualization-2.html#facet_wrap",
    "title": "Data Visualization Day 2",
    "section": "facet_wrap()",
    "text": "facet_wrap()\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point() +\n  facet_wrap(~ Class) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#facet_wrap---number-of-columns",
    "href": "slides/data-visualization-2.html#facet_wrap---number-of-columns",
    "title": "Data Visualization Day 2",
    "section": "facet_wrap() - number of columns",
    "text": "facet_wrap() - number of columns\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point() +\n  facet_wrap(~ Class, ncol = 1) +\n  theme_classic(base_size = 20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#remember-our-goal-plot",
    "href": "slides/data-visualization-2.html#remember-our-goal-plot",
    "title": "Data Visualization Day 2",
    "section": "remember our goal plot?",
    "text": "remember our goal plot?\n\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency, \n        y = meanFamiliarity\n    )\n ) +\n  geom_point( \n    mapping = aes(color = Class), \n    size = 3\n    ) +\n  labs(\n    title = \"Subjective frequency ratings\", \n    subtitle = \"for 81 english nouns\",\n    x = \"Actual frequency\",\n    y = \"Frequency rating\",\n    color = \"word class\"\n  ) +\n  theme_classic(base_size = 20) +\n  scale_color_brewer(palette = \"Paired\")"
  },
  {
    "objectID": "slides/data-visualization-2.html#last_plot",
    "href": "slides/data-visualization-2.html#last_plot",
    "title": "Data Visualization Day 2",
    "section": "last_plot()",
    "text": "last_plot()\nreturns the last plot\n\nlast_plot()"
  },
  {
    "objectID": "slides/data-visualization-2.html#ggsave",
    "href": "slides/data-visualization-2.html#ggsave",
    "title": "Data Visualization Day 2",
    "section": "ggsave()",
    "text": "ggsave()\nsaves last plot\nggsave(\"plot.png\", width=5, height=5)\n\n\nShows up in the files (left side-bar) on Google Colab!"
  },
  {
    "objectID": "slides/data-visualization-2.html#default-theme",
    "href": "slides/data-visualization-2.html#default-theme",
    "title": "Data Visualization Day 2",
    "section": "Default theme",
    "text": "Default theme\n\nlast_plot() + theme_gray(base_size=20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#sample-themes",
    "href": "slides/data-visualization-2.html#sample-themes",
    "title": "Data Visualization Day 2",
    "section": "Sample themes",
    "text": "Sample themes\n\n\n\nlast_plot() + theme_bw(base_size=20)\n\n\n\n\n\n\n\n\n\nlast_plot() + theme_classic(base_size=20)\n\n\n\n\n\n\n\n\n\n\nlast_plot() + theme_minimal(base_size=20)\n\n\n\n\n\n\n\n\n\nlast_plot() + theme_void(base_size=20)"
  },
  {
    "objectID": "slides/data-visualization-2.html#ggplot2-calls",
    "href": "slides/data-visualization-2.html#ggplot2-calls",
    "title": "Data Visualization Day 2",
    "section": "ggplot2 calls",
    "text": "ggplot2 calls\n\n\nExplicit argument names:\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency,\n        y = meanFamiliarity\n    )\n) + \n   geom_point()\n\n\n\n\n\n\n\n\n\nImplied argument names:\n\nggplot(\n    ratings,\n    aes(\n        x = Frequency,\n        y = meanFamiliarity\n    )\n) + \n   geom_point()"
  },
  {
    "objectID": "slides/data-visualization-2.html#the-pipe",
    "href": "slides/data-visualization-2.html#the-pipe",
    "title": "Data Visualization Day 2",
    "section": "the pipe %>%",
    "text": "the pipe %&gt;%\n\nthe pipe takes the thing on its left and passes it along to the function on its right\n\n\nlibrary(magrittr)"
  },
  {
    "objectID": "slides/data-visualization-2.html#the-pipe-1",
    "href": "slides/data-visualization-2.html#the-pipe-1",
    "title": "Data Visualization Day 2",
    "section": "the pipe %>%",
    "text": "the pipe %&gt;%\n\nthe pipe takes the thing on its left and passes it along to the function on its right\n\n\nx %&gt;% f(y) is equivalent to f(x, y)\n\n\n\nx &lt;- c(1.0, 2.245, 3, 4.22222)\nx\n\n[1] 1.00000 2.24500 3.00000 4.22222\n\n# pass x as an argument to function usual way\nround(x, digits = 2)\n\n[1] 1.00 2.24 3.00 4.22\n\n\n\n\n\n# pass x as an argument to function with pipe\nx %&gt;% round(digits = 2)\n\n[1] 1.00 2.24 3.00 4.22\n\n\n\n\n\nThere are two ways to write the pipe: %&gt;% or |&gt;"
  },
  {
    "objectID": "slides/data-visualization-2.html#the-pipe-and-ggplot",
    "href": "slides/data-visualization-2.html#the-pipe-and-ggplot",
    "title": "Data Visualization Day 2",
    "section": "the pipe %>% and ggplot",
    "text": "the pipe %&gt;% and ggplot\n\n\nImplied argument names:\n\nggplot(\n    data = ratings,\n    mapping = aes(\n        x = Frequency,\n        y = meanFamiliarity\n    )\n) + \n   geom_point()\n\n\n\n\n\n\n\n\n\nImplied argument names + pipe:\n\nratings %&gt;% \nggplot(\n    aes(\n        x = Frequency,\n        y = meanFamiliarity\n    )\n) + \n   geom_point()\n\n\n\n\n\n\n\n\n\n\n\nNote that we pipe %&gt;% in arguments to functions but we ADD + layers to ggplot. Common mistake!"
  },
  {
    "objectID": "slides/data-visualization-2.html#exercise-1",
    "href": "slides/data-visualization-2.html#exercise-1",
    "title": "Data Visualization Day 2",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nThe basic ggplot (review from last time!)\n\n\n\n\n\n\n\nFigure 1: Data from penguins dataframe in palmerpenguins package\n\n\n\n\n\nRecreate the figure as faithfully as possible"
  },
  {
    "objectID": "slides/data-visualization-2.html#exercise-2",
    "href": "slides/data-visualization-2.html#exercise-2",
    "title": "Data Visualization Day 2",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nPractice adding aesthetics and layers by creating this!\n\n\n\nFigure 2: Data from penguins dataframe in palmerpenguins package"
  },
  {
    "objectID": "slides/data-visualization-2.html#exercise-3",
    "href": "slides/data-visualization-2.html#exercise-3",
    "title": "Data Visualization Day 2",
    "section": "Exercise 3",
    "text": "Exercise 3\n\nNeed a challenge? Use the datasaurus_dozen data from the datasauRus R package to create this!\n\n\n\n\n\nhttps://kathrynschuler.com/datasci"
  },
  {
    "objectID": "slides/data-visualization-2.html#the-grammar-of-graphics-with-ggplot2",
    "href": "slides/data-visualization-2.html#the-grammar-of-graphics-with-ggplot2",
    "title": "Data Visualization Day 2",
    "section": "The grammar of graphics with ggplot2",
    "text": "The grammar of graphics with ggplot2"
  }
]