---
title:  "Exam 1 (Practice)"
subtitle: "Data Science for Studying Language & the Mind"
# author: 
#     name: Katie Schuler
#     affiliation: University of Pennsylvania
number-sections: false
format: 
  html: default
  pdf: default

---

::: {.callout-tip}
## Estimated time: 60 minutes

You may need more time if programming is completely new to you, or less if you have some experience already.
:::

**Instructions**

- This exam is closed book/note/computer/phone
- If you need to use the restroom, leave your exam and phone with the TA
- You have 90 minutes to complete the exam. If you finish early, you may turn in your exam and leave early


```{r}
#| echo: false
#| message: false
library(tidyverse)
```

\newcommand\answerbox{%%
    \framebox(400,50){}}

\begin{flushleft}
\makebox[12cm]{\textbf{Name}:\ \hrulefill}
\medskip
\makebox[12cm]{\textbf{PennKey}:\ \hrulefill}
\medskip
\makebox[12cm]{\textbf{Lab section TA}:\ \hrulefill}
\end{flushleft}

<!-- \begin{center}
\textbf{Score by topic area}\\
\begin{tabular}{|l|l|}\hline
R basics: general &   \\ \hline
R basics: vectors, operations, subsetting &  \\ \hline
Data importing &  \\ \hline
Data visualization: basics &  \\ \hline
Data visualization: layers  &  \\ \hline
Data wrangling &  \\ \hline
Total & \\ \hline

\end{tabular}
\end{center} -->

\clearpage


## Part 1: Data science with R

### 1 R basics: general {.unnumbered}

(a) Suppose you run the following code. Which command could you run to remove the `y` variable from the current environment? 

    ```r
    x <- 1 + 2 
    y <- 3 + 4
    z <- 0
    ```
    - [ ] `ls(y)`
    - [ ] `rm(3 + 4)`
    - [ ] `rm(y)` 
    - [ ] `environment(remove = 'y')`
    - All of the above

(b) Write an expression that would assign the value `10` to the variable name `my_var`? 

    \answerbox

(c) Which of the following would install the `praise` package? Choose all that apply.
    - [ ] `library(praise)`
    - [ ] `load(praise)`
    - [ ] `install.packages("praise")`
    - [ ] `package::praise`
    - [ ] All of the above

(d) Suppose you run the following code. Which functions would return the structure of the object you defined? Choose one.

    ```r
    x <- c("bus", "stop")
    ```
    - [ ] `length(x)`
    - [ ] `print(x)`
    - [ ] `str(x)`
    - [ ] `attributes(x)` 
    - [ ] None of the above

\clearpage 

### R basics: vectors, operations, subsetting {.unnumbered}

(a) Suppose you run the following code. What will length(x) return? Write your answer in the box below.

    ```r
    x <- 1:5
    ```
    \answerbox



(b) Suppose you run the following code. What will `y > 4` return? Write your answer in the box below and **show your work**.

    ```r
    x <- seq(2, 8, by = 2)
    y <- x[2:4]
    ```
    \answerbox

(c) Suppose you run the following code. What will `typeof(x)` return? 

    ```r
    x <- c("apple", "banana", "pear", "orange")
    ```
    - [ ] `fruit`
    - [ ] `character`
    - [ ] `vector`
    - [ ] `logical`
    - [ ] Error: No type attribute for x

(d) Suppose you create the following data frame and assign it to the `df` variable. What will `sum(df$antique)` return?

    ```{r}
    #| echo: false


    df <- data.frame(
        antique = 1:3,
        age = 2:4,
        show = c("a", "b", "c")
        
    )
    print(df)

    ```

    - [ ] NULL
    - [ ] Error: Cannot sum on value "antique"
    - [ ] 6
    - [ ] 9 
    - [ ] 15

### Data importing {.unnumbered}

(a) Which `tidyverse` package do we use to import data? 
    - [ ] `dplyr`
    - [ ] `readr`
    - [ ] `importr`
    - [ ] `ggplot2`
    - [ ] `googlesheets2`
    - [ ] `purrr`

(b) True or false, the following code blocks return the same tibble. 

    ```r
    tibble(
        x = 1:2,
        y = 3:4,
        z = 5:6
    )
    ```

    ```r
    tribble(
        ~x, ~y, ~z,
        ~1, 3, 5,
        ~2, 4, 6
    )
    ```

    - [ ] True
    - [ ] False

(c) Suppose you import "junesales.csv", shown below, with the following code. What would `data$Sale` return? Choose one.

    ```
    Year, Month, Day, Sale
    2023, June, 1, 0
    2023, June, 2, 1
    2023, June, 3, 0
    2023, June, 4, 1
    ```

    ```r
    data <- read_csv("junesales.csv",
        col_types = list(Sale = col_logical())
    )
    ```
    - [ ] A `double` vector with values `0 1 0 1`
    - [ ] A `logical` vector with values `FALSE TRUE FALSE TRUE`
    - [ ] A double vector with values `NA NA NA NA`
    - [ ] Error: Cannot coerce col to logical

(d) Suppose you import a dataset with but when you `print(data)` you notice that the `age` column was identified as `character` when you were expecting `double`. Given the resulting tibble, which of the following arguments could you include in blank in the code below to solve this problem?


    ```{r}
    #| echo: false
    data <- tibble(
        age = c(18, "na", 25, 21), 
        graduated = c(F, F, T, T), 
        gpa = c(NA, 3.8, 2.9, 3.1)
    )
    print(data)
    ```

    ```r
    data <- read_csv("data.csv", ________)
    ```

    - [ ] `.drop = NA`
    - [ ] `skip = 2`
    - [ ] `guess_max = Inf`
    - [ ] `na = c("na")`
    - [ ] `col_names = FALSE`

\clearpage

### Data visualization: basics {.unnumbered}

LEFT OFF HERE 

Section 5 makes use of the `durationsGe` dataset and plots A, B, and C in the appendix.


(a) Which of the plots above (A and B) did the code blocks below generate?

    ```r
    # code 1
    ggplot(durationsGe, aes(x = DurationOfPrefix, fill = Sex)) +
        geom_density(fill = "lightgray") +
        theme_classic(base_size = 12) +
        labs(y = "") +
        scale_fill_manual(values = c("white", "gray", "black"))
    # code 2
    ggplot(durationsGe, aes(x = DurationOfPrefix)) +
        geom_density(fill = "lightgray") +
        theme_classic(base_size = 12) +
        labs(y = "")
    ```
    - [ ] Code 1 generates plot A, code 2 generates plot B
    - [ ] Code 2 generates plot A, code 1 generates plot B
    - [ ] Code 1 and 2 both generate plot A
    - [ ] Code 1 and 2 both generate plot B 
    - [ ] Code 1 and 2 generate neither plot A nor plot B

(b) Which geoms could be depicted in plots A and B? Choose all that apply. 

    - [ ] `geom_histogram()`
    - [ ] `geom_smooth()`
    - [ ] `geom_line()`
    - [ ] `geom_density()`
    - [ ] `geom_bar()`

\clearpage

(c) True or false, the following code blocks generate the same figure. Write your answer in the following box and **explain why**.

    ```r
    # code block 1
    ggplot(
        data=durationsGe, 
        mapping = aes(y = DurationOfPrefix, x = Sex)) + 
            geom_bar(stat = "identity") 

    # code block 2
      ggplot(
        aes(y = DurationOfPrefix, x = Sex),
        durationsGe) + 
            geom_bar(stat = "identity") 

    ```

    \answerbox


(d) The code below makes use of a new geom, `geom_rug()`, to generate plot C, in which each individual data point is plotted along the x-axis like a "rug". In the box below, rewrite the code such the color of the rug is mapped to the `Sex` variable and the bars of the histogram are filled in with the color "lightblue". 

    ```r
    ggplot(durationsGe, aes(x = DurationOfPrefix)) +
        geom_rug() + 
        geom_histogram() +
        theme_classic(base_size = 12) 

    ```

    \answerbox


\clearpage

### Data visualization: layers {.unnumbered}

Section 5 makes use of the `durationsGe` dataset and plots D, E, and F in the appendix.



(a) Which of the following would add a small amount of random noise around each point in plot D? Choose all that apply.

    - [ ] add the argument `position = "jitter"` to `geom_point()`
    - [ ] add the argument `position = "random"` to `geom_point()`
    - [ ] add the argument `rand_noise = TRUE` to `geom_point()`
    - [ ] replace `geom_point()` with `geom_jitter()`
    - [ ] replace `geom_point()` with `geom_noise()` 


(b) Which of the following could change plot D to plot E? Choose all that apply

    - [ ] add `facet_wrap(~Sex)`
    - [ ] add `facet_wrap(~Sex, ncol = 2)`
    - [ ] add `facet_wrap(~Sex, ncol = 3)`
    - [ ] add `facet_grid(Sex~.)`
    - [ ] add `facet_grid(.~Sex)`
    - [ ] add `facet(.by = c(Sex))`


(c) Which of the following arguments to `geom_histogram()` could be present in the code that returned plot F? Choose all that apply.

    - [ ] `bins=12`
    - [ ] `bins=11`
    - [ ] `binwidth=1`
    - [ ] `binwidth=3`
    - [ ] `stat="identity"`

(d) Which of the following layers are required to produce plot F? Note that the plot uses the complete theme `theme_minimal()` and the font is 20pt Palatino. Choose all that apply.

    - [ ] `theme_minimal(use=TRUE)`
    - [ ] `theme_minimal(base_size = 20, base_family = "Palatino")`
    - [ ] `labs(title = "Histogram of speech rate")`
    - [ ] `font(size=20, family="Palatino")`
    - [ ] `scale_fill_manual(values = c("gray"))`

\clearpage

### Data wrangling {.unnumbered}

Section 6 makes use of the `durationsGe` dataset in the appendix.


(a) The `Sex` variable in the `durationsGe` dataset has the following distinct values: `"male" "female" NA`. How many rows would be in the object returned by the following code block? Write your answer in the box below.

    ```{r}
    #| echo: false

    library(languageR)
    ```

    ```r
    durationsGe %>% 
        filter(Sex %in% c("female")) %>%
        summarise(minBirthYear=min(YearOfBirth, na.rm=TRUE), .by=c(Sex))
    ```

    \answerbox


(b) True or false, the following code options are equivalent.

    ```r
    # option 1
    durationsGe %>% 
        select(Frequency) %>% 
        filter(Frequency > 40) %>%
        distinct()

    # option 2
    just_freq <- select(durationsGe, Frequency)
    freq_under_40 <- filter(just_freq, Frequency > 40)
    distinct(freq_under_40)
    ```

    - [ ] True
    - [ ] False

(c) Fill in the blank in the code below such that it returns a new column called "count", which counts of the number of rows in the `durationsGe` dataset per `Sex`

    ```r
    ratings %>% group_by(Sex) %>% summarise(_________)
    ```

    \answerbox

(d) True or false, the following code options are equivalent. 

    ```r
    # option 1
    durationsGe %>% 
        select(Freq=Frequency, Speaker:DurationOfPrefix) %>% 
        mutate(AgeInYears = 2023 - YearOfBirth, .before = Freq)

    # option 2
    durationsGe %>% 
        select(Frequency:DurationOfPrefix) %>% 
        rename(Freq = Frequency) %>%
        mutate(AgeInYears = 2023 - YearOfBirth, .before = 1)

    ```

    - [ ] True
    - [ ] False

\clearpage


### Appendix A: Data {.unnumbered}


Sections 4-6 make use of `durationsGe` data in the `languageR` package. The dataset includes the duration of the prefix ge- in Dutch by various speakers from the Spoken Dutch Corpus. 

```{r}
library(languageR)
glimpse(durationsGe)
```

\clearpage 

### Appendix B: Plots section 4 {.unnumbered}

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| layout-valign: bottom
#| cap-location: bottom

ggplot(durationsGe, aes(x = DurationOfPrefix, fill = Sex)) +
    geom_density(fill = "lightgray") +
    theme_classic(base_size = 15) +
    labs(tag = "A", y = "")

ggplot(durationsGe, aes(x = DurationOfPrefix, fill = Sex)) +
    geom_density() +
    theme_classic(base_size = 15) +
    labs(tag = "B", y = "") +
    scale_fill_manual(values = c("white", "gray", "black"))
```



```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| layout-valign: bottom
#| cap-location: bottom
ggplot(durationsGe, aes(x = DurationOfPrefix)) +
    geom_rug() + 
    geom_histogram() +
    theme_classic(base_size = 12) +
    labs(tag = "C")
```

\clearpage

### Appendix C: Plots section 5 {.unnumbered}

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| layout-valign: bottom
#| cap-location: bottom

ggplot(durationsGe, aes(x = SpeechRate, y = DurationOfPrefix)) +
    geom_point(alpha = 0.5) + 
    geom_smooth(method = "lm") +
    theme_classic(base_size = 15) +
    labs(tag = "D")

ggplot(durationsGe, aes(x = SpeechRate, y = DurationOfPrefix)) +
    geom_point(alpha = 0.5) + 
    geom_smooth(method = "lm") + 
    facet_grid(. ~ Sex) +
    theme_classic(base_size = 15) +
    labs(tag = "E")

```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| layout-valign: bottom
#| cap-location: bottom
#| 
ggplot(data = durationsGe, mapping = aes(x = SpeechRate)) +
    geom_histogram(fill = "lightgray", bins = 12) +
    theme_minimal(base_family = "Palatino", base_size = 20) +
    labs(title = "Histogram of speech rate", tag="F") 
    
```

## Part 2

```{r}
#| echo: false
#| message: false

library(infer)
library(faux)
theme_set(theme_gray(base_size = 16))
set.seed(60)
```

```{r}
#| echo: false

native <- tibble(
    score = rnorm(23, 268.8 , 2.9), 
    age = 0, 
    ageGroup = "0"
)

three <- tibble( score = rnorm(7, 269.3, 2.8), 
    age = runif(7, 3, 7), ageGroup = "3-7")
eight <- tibble( score = rnorm(8, 256.0, 6.0), 
    age = runif(8, 8, 10), ageGroup = "8-10")
eleven <- tibble( score = rnorm(8, 235.9, 13.6), 
    age = runif(8, 11, 15), ageGroup = "11-15")
seventeen <- tibble( score = rnorm(23, 210.3, 22.8), 
    age = runif(23, 17, 39), ageGroup = "17-39")

johnson_newport_1989 <- bind_rows(
    native, three, eight, eleven, seventeen
)  %>%
mutate(langGroup = ifelse(ageGroup == "0", "native", "non-native"))


```

<!-- \newcommand\answerbox{%%
    \framebox(400,50){}}

\begin{flushleft}
\makebox[12cm]{\textbf{Name}:\ \hrulefill}
\medskip
\makebox[12cm]{\textbf{PennKey}:\ \hrulefill}
\medskip
\makebox[12cm]{\textbf{Lab section TA}:\ \hrulefill}
\end{flushleft}

\begin{center}
\textbf{Score by topic area}\\
\begin{tabular}{|l|l|}\hline
Sampling distribution &   \\ \hline
Hypothesis testing &  \\ \hline
Correlation & \\ \hline
Model specification & \\ \hline
Total & \\ \hline

\end{tabular}
\end{center}

\clearpage -->

### The data {.unnumbered}

This quiz refers to data simulated from Johnson & Newport (1989), who studied the English language proficiency of 46 native Korean or Chinese speakers who arrived in the US between the ages of 3 and 39. The researchers were interested in whether the participants' age of arrival to the United States played a role in their English language proficiency. 

The simulated data are stored in the tibble `johnson_newport_1989`. Here is a `glimpse()` at the tibble for your reference: 

```{r}
glimpse(johnson_newport_1989)
```

### Sampling distribution {.unnumbered}

Johnson and Newport (1989) reported the mean and standard deviation of participants' scores on the English proficiency test, grouped by an `ageGroup` variable, which divides age into 5 groups. Below we computed the **median** and **IQR** as the descriptive statistics on our simulated data. Then, we used `infer` to generate the sampling distribution for the **17-39 year old age group**, visualize the distribution, and shade the confidence interval. 

```{r}
# A. compute descriptive statistics by group 
johnson_newport_1989 %>% group_by(ageGroup) %>%
    summarise(n = n(), median = median(score), 
        lower = quantile(score, 0.25), upper = quantile(score, 0.75))
```


```{r}
# B. generate the sampling distribution 17-39 group
samp_distribution <- johnson_newport_1989 %>%
    filter(ageGroup == "17-39") %>%
    specify(response = score) %>%
    generate(reps = 1000, type = "bootstrap") %>% 
    calculate(stat = "median") 
```

```{r}
#| echo: false
#| message: false

# hide ci so we can ask about getting the ci a few ways
ci <- samp_distribution %>%
    get_confidence_interval(level = 0.68, type = "percentile")

ci2 <- samp_distribution %>%
    get_confidence_interval(type = "se", point_estimate = 271)

```

```r
# C. get confidence interval 
ci <- samp_distribution %>%
    get_confidence_interval(type = "percentile", level = 0.68)

```

```{r}
#| layout-ncol: 2

# D. visualize sampling distribution and confidence interval 
samp_distribution %>%
    visualize() +
    shade_ci(endpoints = ci)
```


(a) True or false, the descriptive statistics reported above are parametric.

    - [ ] True 
    - [ ] False

(b) The sampling distribution of the median looks approximately Gaussian. The probability densitiy function for the Gaussian distribution is given by which of the following equations? 


    - [ ] $\frac{\sum_{i=i}^{n} x_{i}}{n}$
    - [ ] $\frac{1}{\sigma\sqrt{2\pi}}\exp\left(-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^{2}\right)$
    - [ ] $\frac{1}{max-min}$
    - [ ] $\sqrt{\frac{\sum_{i=1}^n (x_i - \overline{x})^2}{n-1}}$

(c)  Fill in the blanks in the sentence below to describe what happens *on each repeat* in code B above, in which we constructed the sampling distribution.

> Draw __________ data points _____________ replacement, compute the ____________. 

(d) The shaded area of the figure shows a 68% confidence interval. If we were to increase the `level` of confidence to 95%, the confidence interval would become:

    - [ ] Narrower
    - [ ] Broader
    - [ ] Stay the same
    - [ ] There's insufficient information to determine this

### Hypothesis testing {.unnumbered}

Suppose we want to know whether the participants who arrived as adults (17-39 age group) acheived native performance. We decide to address this question via the 3-step hypothesis testing framework in which we investigate the difference in **medians** between the native English speakers (0 age group) and the 17-39 age group. 


```{r}
#| layout-ncol: 2
# A. visualize difference with a boxplot
johnson_newport_1989 %>%
    filter(ageGroup %in% c("0", "17-39")) %>%
    ggplot(aes(y = score, x = ageGroup)) +
    geom_boxplot()

```

\clearpage 

```{r}
# B. compute observed difference in means
diff_medians <- johnson_newport_1989 %>%
    filter(ageGroup %in% c("0", "17-39")) %>%
    specify(response = score, explanatory = ageGroup) %>%
    calculate(stat = "diff in medians", order = c("0", "17-39"))

```

```{r}
# C. construct the null distribution with infer
null_distribution <- johnson_newport_1989 %>%
    filter(ageGroup %in% c("0", "17-39")) %>%
    specify(response = score, explanatory = ageGroup) %>%
    hypothesize(null = "independence") %>%
    generate(reps = 1000, type = "permute") %>%
    calculate(stat = "diff in medians", order = c("0", "17-39")) 
```

```{r}
#| layout-ncol: 2

# D. visualize the null and shade p-value
null_distribution %>%
    visualize()  +
    shade_p_value(obs_stat = diff_medians, direction = "both")
```


(a) Step 1 is to pose the null hypothesis. True or false, the null hypothesis here is that the observed difference in medians is due age group (age of arrival in the US). 

    - [ ] True
    - [ ] False

\clearpage 

(b) Step 2 is to ask, if the null hypothesis is true, how likely is our observed pattern of results? We quantify this likelihood with:

    - [ ] diff in medians
    - [ ] correlation
    - [ ] liklihood estimation
    - [ ] p-value

(c) Step 3 is to decide whether to reject the null hypothesis. Johnson and Newport concluded that the two groups were significantly different from each other, suggesting that participants who arrived to the US after age 17 did not acheive native proficiency. This implies that they:

    - [ ] Reject the null hypothesis
    - [ ] Fail to reject the null hypothesis
    - [ ] Prove the research hypothesis to be true
    - [ ] Prove the null hypothesis to be true

(d) When we calculate the p-value from the simulated null distribution using the `get_p_value()` function, we get **p = 0**. Is this a problem? Why or why not? Explain what a p-value of 0 means in this context.

    \answerbox

### Correlation {.unnumbered}

Johnson and Newport (1989) also wanted to ask whether years of exposure to English predicted score on the English proficiency task. To address this, they computed the correlation between score and exposure.

```{r}
#| echo: false
#| layout-ncol: 2

dat <- rnorm_multi(n = 46, 
                  mu = c(242, 20),
                  sd = c(10, 5),
                  r = c(0.2), 
                  varnames = c("score", "exposure"),
                  empirical = FALSE)

dat %>% ggplot(aes(x = exposure, y = score)) +
geom_point(alpha = .8)
```


\clearpage 

(a) Given the scatterplot of these data, which of the following could be their observed correlation? 

    - [ ] $-0.88$
    - [ ] $0.88$
    - [ ] $0.16$
    - [ ] $0.5$

(b) True or false, the correlations computed on these data were subject to sampling variability.

    - [ ] True
    - [ ] False

(c) Johnson and Newport used hypothesis testing to determine whether the correlation they observed was significantly different from zero. We computed a p-value of `0.624` on the correlation we observed in our simulated data. Which figure could represent this p-value visualized on a null distribution generated nonparametrically from 1000 repetitions?

```{r}
#| echo: false


obs_corr <- dat %>%
    specify(response = score, explanatory = exposure) %>%
    calculate(stat = "correlation") 


null_distribution <- dat %>%
    specify(response = score, explanatory = exposure) %>%
    hypothesize(null = "independence") %>%
    generate(reps = 1000, type = "permute") %>%
    calculate(stat = "correlation") 

```


```{r}
#| echo: false 
#| layout-ncol: 3


null_distribution %>%
    visualize() +
    shade_p_value(0.23, direction = "two-sided") +
    labs(tag = "A")

null_distribution %>%
    visualize() +
    shade_p_value(0.624, direction = "two-sided") +
    labs(tag = "B")

null_distribution %>%
    visualize() +
    shade_p_value(obs_corr, direction = "two-sided") +
    labs(tag = "C")



```

(d) What type of relationship does the correlation between years of exposure and score suggest?

    - [ ] Linear
    - [ ] Nonlinear
    - [ ] Independence 
    - [ ] Permute

